!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$GOPATH	plugged/vim-go/scripts/runtest.vim	/^  let $GOPATH = s:gopath$/;"	v
$NODE_CLIENT_LOG_FILE	plugged/coc.nvim/autoload/coc/client.vim	/^    let $NODE_CLIENT_LOG_FILE = s:logfile$/;"	v
$NODE_CLIENT_LOG_LEVEL	plugged/coc.nvim/autoload/coc/client.vim	/^  let $NODE_CLIENT_LOG_LEVEL = 'debug'$/;"	v
$RUNBENCH_SETTINGS	plugged/vim-go/scripts/runbench.vim	/^  let $RUNBENCH_SETTINGS = join(['array_whitespace_error', 'build_constraints',$/;"	v
(section,	plugged/vim-airline/autoload/airline/themes.vim	/^      map(section, (_, v) => type(v) != type('') ? string(v) : v)$/;"	m
) reload	plugged/catppuccin/tests/flavour_spec.lua	/^	before_each(function() reload() end)$/;"	f
) reload	plugged/catppuccin/tests/palette_spec.lua	/^	before_each(function() reload() end)$/;"	f
) require	plugged/catppuccin/tests/palette_spec.lua	/^		assert.equals(pcall(function() require("catppuccin.palettes").get_palette() end), true)$/;"	f
2G	plugged/vim-gitgutter/test/test_gitgutter.vim	/^  normal! 2G$/;"	m
<C-LeftMouse>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-LeftMouse> <LeftMouse>:GoDef<cr>$/;"	m
<C-]>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-]> :GoDef<cr>$/;"	m
<C-e>	plugged/coc.nvim/plugin/coc.vim	/^  inoremap <silent><expr> <C-e> coc#pum#visible() ? coc#pum#cancel() : "\\<C-e>"$/;"	m
<C-n>	plugged/coc.nvim/plugin/coc.vim	/^  inoremap <silent><expr> <C-n> coc#pum#visible() ? coc#pum#next(1) : "\\<C-n>"$/;"	m
<C-p>	plugged/coc.nvim/plugin/coc.vim	/^  inoremap <silent><expr> <C-p> coc#pum#visible() ? coc#pum#prev(1) : "\\<C-p>"$/;"	m
<C-s>	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <silent> <C-s> <Plug>(coc-range-select)$/;"	m
<C-t>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-t> :<C-U>call go#def#StackPop(v:count1)<cr>$/;"	m
<C-w><C-]>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-w><C-]> :<C-u>call go#def#Jump("split", 0)<CR>$/;"	m
<C-w>]	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> <C-w>] :<C-u>call go#def#Jump("split", 0)<CR>$/;"	m
<C-y>	plugged/coc.nvim/plugin/coc.vim	/^  inoremap <silent><expr> <C-y> coc#pum#visible() ? coc#pum#confirm() : "\\<C-y>"$/;"	m
<CR>	plugged/coc.nvim/doc/coc-example-config.vim	/^inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()$/;"	m
<PageDown>	plugged/coc.nvim/plugin/coc.vim	/^  inoremap <silent><expr> <PageDown> coc#pum#visible() ? coc#pum#scroll(1) : "\\<PageDown>"$/;"	m
<PageUp>	plugged/coc.nvim/plugin/coc.vim	/^  inoremap <silent><expr> <PageUp> coc#pum#visible() ? coc#pum#scroll(0) : "\\<PageUp>"$/;"	m
<Plug>(GitGutterNextHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>(GitGutterNextHunk) &diff ? ']c' : ":\\<C-U>execute v:count1 . 'GitGutterNextHunk'\\<CR>"$/;"	m
<Plug>(GitGutterPrevHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>(GitGutterPrevHunk) &diff ? '[c' : ":\\<C-U>execute v:count1 . 'GitGutterPrevHunk'\\<CR>"$/;"	m
<Plug>(GitGutterPreviewHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterPreviewHunk) :GitGutterPreviewHunk<CR>$/;"	m
<Plug>(GitGutterStageHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>$/;"	m
<Plug>(GitGutterTextObjectInnerPending)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>(GitGutterTextObjectInnerPending) :<C-U>call gitgutter#hunk#text_object(1)<CR>$/;"	m
<Plug>(GitGutterTextObjectOuterPending)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>(GitGutterTextObjectOuterPending) :<C-U>call gitgutter#hunk#text_object(0)<CR>$/;"	m
<Plug>(GitGutterUndoHunk)	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>(GitGutterUndoHunk)    :GitGutterUndoHunk<CR>$/;"	m
<Plug>(coc-classobj-a)	plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-classobj-a)       :<C-U>call CocAction('selectSymbolRange', v:false, '', ['Interface', 'Struct', 'Class'])<CR>$/;"	m
<Plug>(coc-classobj-a)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-classobj-a)       :<C-U>call CocAction('selectSymbolRange', v:false, visualmode(), ['Interface', 'Struct', 'Class'])<CR>$/;"	m
<Plug>(coc-classobj-i)	plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-classobj-i)       :<C-U>call CocAction('selectSymbolRange', v:true, '', ['Interface', 'Struct', 'Class'])<CR>$/;"	m
<Plug>(coc-classobj-i)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-classobj-i)       :<C-U>call CocAction('selectSymbolRange', v:true, visualmode(), ['Interface', 'Struct', 'Class'])<CR>$/;"	m
<Plug>(coc-codeaction)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction)                     :<C-u>call       CocActionAsync('codeAction', '')<CR>$/;"	m
<Plug>(coc-codeaction-cursor)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-cursor)              :<C-u>call       CocActionAsync('codeAction', 'cursor')<CR>$/;"	m
<Plug>(coc-codeaction-line)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-line)                :<C-u>call       CocActionAsync('codeAction', 'currline')<CR>$/;"	m
<Plug>(coc-codeaction-refactor)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-refactor)            :<C-u>call       CocActionAsync('codeAction', 'cursor', ['refactor'], v:true)<CR>$/;"	m
<Plug>(coc-codeaction-refactor-selected)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-refactor-selected)   :<C-u>set        operatorfunc=<SID>CodeActionRefactorFromSelected<CR>g@$/;"	m
<Plug>(coc-codeaction-refactor-selected)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <Plug>(coc-codeaction-refactor-selected)   :<C-u>call       CocActionAsync('codeAction', visualmode(), ['refactor'], v:true)<CR>$/;"	m
<Plug>(coc-codeaction-selected)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-selected)            :<C-u>set        operatorfunc=<SID>CodeActionFromSelected<CR>g@$/;"	m
<Plug>(coc-codeaction-selected)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-codeaction-selected)   :<C-u>call       CocActionAsync('codeAction', visualmode())<CR>$/;"	m
<Plug>(coc-codeaction-source)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codeaction-source)              :<C-u>call       CocActionAsync('codeAction', '', ['source'], v:true)<CR>$/;"	m
<Plug>(coc-codelens-action)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-codelens-action)                :<C-u>call       CocActionAsync('codeLensAction')<CR>$/;"	m
<Plug>(coc-command-repeat)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-command-repeat)        :<C-u>call       CocAction('repeatCommand')<CR>$/;"	m
<Plug>(coc-cursors-operator)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-cursors-operator) :<C-u>set operatorfunc=<SID>CursorRangeFromSelected<CR>g@$/;"	m
<Plug>(coc-cursors-position)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-cursors-position) :<C-u>call CocAction('cursorsSelect', bufnr('%'), 'position', 'n')<CR>$/;"	m
<Plug>(coc-cursors-range)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-cursors-range)    :<C-u>call CocAction('cursorsSelect', bufnr('%'), 'range', visualmode())<CR>$/;"	m
<Plug>(coc-cursors-word)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-cursors-word)     :<C-u>call CocAction('cursorsSelect', bufnr('%'), 'word', 'n')<CR>$/;"	m
<Plug>(coc-declaration)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-declaration)           :<C-u>call       CocActionAsync('jumpDeclaration')<CR>$/;"	m
<Plug>(coc-definition)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-definition)            :<C-u>call       CocActionAsync('jumpDefinition')<CR>$/;"	m
<Plug>(coc-diagnostic-info)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-info)       :<C-u>call       CocActionAsync('diagnosticInfo')<CR>$/;"	m
<Plug>(coc-diagnostic-next)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-next)       :<C-u>call       CocActionAsync('diagnosticNext')<CR>$/;"	m
<Plug>(coc-diagnostic-next-error)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-next-error) :<C-u>call       CocActionAsync('diagnosticNext',     'error')<CR>$/;"	m
<Plug>(coc-diagnostic-prev)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-prev)       :<C-u>call       CocActionAsync('diagnosticPrevious')<CR>$/;"	m
<Plug>(coc-diagnostic-prev-error)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-diagnostic-prev-error) :<C-u>call       CocActionAsync('diagnosticPrevious', 'error')<CR>$/;"	m
<Plug>(coc-fix-current)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-fix-current)           :<C-u>call       CocActionAsync('doQuickfix')<CR>$/;"	m
<Plug>(coc-float-hide)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-float-hide)            :<C-u>call       coc#float#close_all()<CR>$/;"	m
<Plug>(coc-float-jump)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-float-jump)            :<c-u>call       coc#float#jump()<cr>$/;"	m
<Plug>(coc-format)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-format)                :<C-u>call       CocActionAsync('format')<CR>$/;"	m
<Plug>(coc-format-selected)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-format-selected)       :<C-u>set        operatorfunc=<SID>FormatFromSelected<CR>g@$/;"	m
<Plug>(coc-format-selected)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-format-selected)       :<C-u>call       CocActionAsync('formatSelected', visualmode())<CR>$/;"	m
<Plug>(coc-funcobj-a)	plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-funcobj-a)        :<C-U>call CocAction('selectSymbolRange', v:false, '', ['Method', 'Function'])<CR>$/;"	m
<Plug>(coc-funcobj-a)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-funcobj-a)        :<C-U>call CocAction('selectSymbolRange', v:false, visualmode(), ['Method', 'Function'])<CR>$/;"	m
<Plug>(coc-funcobj-i)	plugged/coc.nvim/plugin/coc.vim	/^onoremap <silent> <Plug>(coc-funcobj-i)        :<C-U>call CocAction('selectSymbolRange', v:true, '', ['Method', 'Function'])<CR>$/;"	m
<Plug>(coc-funcobj-i)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-funcobj-i)        :<C-U>call CocAction('selectSymbolRange', v:true, visualmode(), ['Method', 'Function'])<CR>$/;"	m
<Plug>(coc-implementation)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-implementation)        :<C-u>call       CocActionAsync('jumpImplementation')<CR>$/;"	m
<Plug>(coc-openlink)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-openlink)              :<C-u>call       CocActionAsync('openLink')<CR>$/;"	m
<Plug>(coc-range-select)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <Plug>(coc-range-select)                   :<C-u>call       CocActionAsync('rangeSelect',     '', v:true)<CR>$/;"	m
<Plug>(coc-range-select)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-range-select)          :<C-u>call       CocActionAsync('rangeSelect',     visualmode(), v:true)<CR>$/;"	m
<Plug>(coc-range-select-backward)	plugged/coc.nvim/plugin/coc.vim	/^vnoremap <silent> <Plug>(coc-range-select-backward) :<C-u>call       CocActionAsync('rangeSelect',     visualmode(), v:false)<CR>$/;"	m
<Plug>(coc-refactor)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-refactor)              :<C-u>call       CocActionAsync('refactor')<CR>$/;"	m
<Plug>(coc-references)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-references)            :<C-u>call       CocActionAsync('jumpReferences')<CR>$/;"	m
<Plug>(coc-references-used)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-references-used)       :<C-u>call       CocActionAsync('jumpUsed')<CR>$/;"	m
<Plug>(coc-rename)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-rename)                :<C-u>call       CocActionAsync('rename')<CR>$/;"	m
<Plug>(coc-type-definition)	plugged/coc.nvim/plugin/coc.vim	/^nnoremap <silent> <Plug>(coc-type-definition)       :<C-u>call       CocActionAsync('jumpTypeDefinition')<CR>$/;"	m
<Plug>(go-alternate-edit)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-alternate-edit) :<C-u>call go#alternate#Switch(0, "edit")<CR>$/;"	m
<Plug>(go-alternate-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-alternate-split) :<C-u>call go#alternate#Switch(0, "split")<CR>$/;"	m
<Plug>(go-alternate-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-alternate-vertical) :<C-u>call go#alternate#Switch(0, "vsplit")<CR>$/;"	m
<Plug>(go-build)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-build) :<C-u>call go#cmd#Build(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-callees)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-callees) :<C-u>call go#guru#Callees(-1)<CR>$/;"	m
<Plug>(go-callers)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-callers) :<C-u>call go#calls#Callers()<CR>$/;"	m
<Plug>(go-callstack)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-callstack) :<C-u>call go#guru#Callstack(-1)<CR>$/;"	m
<Plug>(go-channelpeers)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-channelpeers) :<C-u>call go#guru#ChannelPeers(-1)<CR>$/;"	m
<Plug>(go-coverage)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-coverage) :<C-u>call go#coverage#Buffer(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-coverage-browser)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-coverage-browser) :<C-u>call go#coverage#Browser(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-coverage-clear)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-coverage-clear) :<C-u>call go#coverage#Clear()<CR>$/;"	m
<Plug>(go-coverage-toggle)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-coverage-toggle) :<C-u>call go#coverage#BufferToggle(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-decls)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-decls) :<C-u>call go#decls#Decls(0, '')<CR>$/;"	m
<Plug>(go-decls-dir)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-decls-dir) :<C-u>call go#decls#Decls(1, '')<CR>$/;"	m
<Plug>(go-def)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def) :<C-u>call go#def#Jump('', 0)<CR>$/;"	m
<Plug>(go-def-pop)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-pop) :<C-u>call go#def#StackPop()<CR>$/;"	m
<Plug>(go-def-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-split) :<C-u>call go#def#Jump("split", 0)<CR>$/;"	m
<Plug>(go-def-stack)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-stack) :<C-u>call go#def#Stack()<CR>$/;"	m
<Plug>(go-def-stack-clear)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-stack-clear) :<C-u>call go#def#StackClear()<CR>$/;"	m
<Plug>(go-def-tab)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-tab) :<C-u>call go#def#Jump("tab", 0)<CR>$/;"	m
<Plug>(go-def-type)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-type) :<C-u>call go#def#Jump('', 1)<CR>$/;"	m
<Plug>(go-def-type-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-type-split) :<C-u>call go#def#Jump("split", 1)<CR>$/;"	m
<Plug>(go-def-type-tab)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-type-tab) :<C-u>call go#def#Jump("tab", 1)<CR>$/;"	m
<Plug>(go-def-type-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-type-vertical) :<C-u>call go#def#Jump("vsplit", 1)<CR>$/;"	m
<Plug>(go-def-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-def-vertical) :<C-u>call go#def#Jump("vsplit", 0)<CR>$/;"	m
<Plug>(go-deps)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-deps) :<C-u>call go#tool#Deps()<CR>$/;"	m
<Plug>(go-describe)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-describe) :<C-u>call go#guru#Describe(-1)<CR>$/;"	m
<Plug>(go-diagnostics)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-diagnostics) :<C-u>call go#lint#Diagnostics(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-doc)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc) :<C-u>call go#doc#Open("new", "split")<CR>$/;"	m
<Plug>(go-doc-browser)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc-browser) :<C-u>call go#doc#OpenBrowser()<CR>$/;"	m
<Plug>(go-doc-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc-split) :<C-u>call go#doc#Open("new", "split")<CR>$/;"	m
<Plug>(go-doc-tab)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc-tab) :<C-u>call go#doc#Open("tabnew", "tabe")<CR>$/;"	m
<Plug>(go-doc-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-doc-vertical) :<C-u>call go#doc#Open("vnew", "vsplit")<CR>$/;"	m
<Plug>(go-files)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-files) :<C-u>call go#tool#Files()<CR>$/;"	m
<Plug>(go-fmt)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-fmt) :<C-u>call go#fmt#Format(0)<CR>$/;"	m
<Plug>(go-generate)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-generate) :<C-u>call go#cmd#Generate(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-iferr)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-iferr) :<C-u>call go#iferr#Generate()<CR>$/;"	m
<Plug>(go-implements)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-implements) :<C-u>call go#implements#Implements(-1)<CR>$/;"	m
<Plug>(go-import)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-import) :<C-u>call go#import#SwitchImport(1, '', expand('<cword>'), '')<CR>$/;"	m
<Plug>(go-imports)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-imports) :<C-u>call go#fmt#Format(1)<CR>$/;"	m
<Plug>(go-info)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-info) :<C-u>call go#tool#Info(1)<CR>$/;"	m
<Plug>(go-install)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-install) :<C-u>call go#cmd#Install(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-lint)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-lint) :<C-u>call go#lint#Golint(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-metalinter)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-metalinter) :<C-u>call go#lint#Gometa(!g:go_jump_to_error, 0)<CR>$/;"	m
<Plug>(go-mod-fmt)	plugged/vim-go/ftplugin/gomod/mappings.vim	/^nnoremap <silent> <Plug>(go-mod-fmt) :<C-u>call go#mod#Format()<CR>$/;"	m
<Plug>(go-pointsto)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-pointsto) :<C-u>call go#guru#PointsTo(-1)<CR>$/;"	m
<Plug>(go-referrers)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-referrers) :<C-u>call go#referrers#Referrers(-1)<CR>$/;"	m
<Plug>(go-rename)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-rename) :<C-u>call go#rename#Rename(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-run)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-run) :<C-u>call go#cmd#Run(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-run-split)	plugged/vim-go/ftplugin/go/mappings.vim	/^  nnoremap <silent> <Plug>(go-run-split) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'split', [])<CR>$/;"	m
<Plug>(go-run-tab)	plugged/vim-go/ftplugin/go/mappings.vim	/^  nnoremap <silent> <Plug>(go-run-tab) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'tabe', [])<CR>$/;"	m
<Plug>(go-run-vertical)	plugged/vim-go/ftplugin/go/mappings.vim	/^  nnoremap <silent> <Plug>(go-run-vertical) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'vsplit', [])<CR>$/;"	m
<Plug>(go-sameids)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-sameids) :<C-u>call go#sameids#SameIds(1)<CR>$/;"	m
<Plug>(go-sameids-toggle)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-sameids-toggle) :<C-u>call go#sameids#ToggleSameIds()<CR>$/;"	m
<Plug>(go-test)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-test) :<C-u>call go#test#Test(!g:go_jump_to_error, 0)<CR>$/;"	m
<Plug>(go-test-compile)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-test-compile) :<C-u>call go#test#Test(!g:go_jump_to_error, 1)<CR>$/;"	m
<Plug>(go-test-func)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-test-func) :<C-u>call go#test#Func(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-vet)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-vet) :<C-u>call go#lint#Vet(!g:go_jump_to_error)<CR>$/;"	m
<Plug>(go-whicherrs)	plugged/vim-go/ftplugin/go/mappings.vim	/^nnoremap <silent> <Plug>(go-whicherrs) :<C-u>call go#guru#Whicherrs(-1)<CR>$/;"	m
<Plug>GitGutterNextHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterNextHunk   &diff ? ']c' : ":\\<C-U>call gitgutter#utility#warn('Please change your map \\<lt>Plug>GitGutterNextHunk to \\<lt>Plug>(GitGutterNextHunk)')\\<CR>"$/;"	m
<Plug>GitGutterPrevHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterPrevHunk   &diff ? '[c' : ":\\<C-U>call gitgutter#utility#warn('Please change your map \\<lt>Plug>GitGutterPrevHunk to \\<lt>Plug>(GitGutterPrevHunk)')\\<CR>"$/;"	m
<Plug>GitGutterPreviewHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterPreviewHunk   :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterPreviewHunk to <lt>Plug>(GitGutterPreviewHunk)')<CR>$/;"	m
<Plug>GitGutterStageHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>$/;"	m
<Plug>GitGutterUndoHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterUndoHunk      :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterUndoHunk to <lt>Plug>(GitGutterUndoHunk)')<CR>$/;"	m
<Plug>NERDCommenterAltDelims	plugged/nerdcommenter/plugin/nerdcommenter.vim	/^nnoremap <Plug>NERDCommenterAltDelims :call nerdcommenter#SwitchToAlternativeDelimiters(1)<CR>$/;"	m
<Plug>NERDCommenterInsert	plugged/nerdcommenter/plugin/nerdcommenter.vim	/^inoremap <silent> <Plug>NERDCommenterInsert <C-\\><C-O>:call nerdcommenter#Comment('i', "Insert")<CR>$/;"	m
<Plug>NERDTreeFocusToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeFocusToggle  :call <SID>NERDTreeFocusToggle()$/;"	m
<Plug>NERDTreeMirrorOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeMirrorOpen   :call <SID>NERDTreeMirrorOrCreate()$/;"	m
<Plug>NERDTreeMirrorToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeMirrorToggle :call <SID>NERDTreeMirrorToggle()$/;"	m
<Plug>NERDTreeSteppedClose	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeSteppedClose :call <SID>NERDTreeSteppedClose()$/;"	m
<Plug>NERDTreeSteppedOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeSteppedOpen  :call <SID>NERDTreeSteppedOpen()$/;"	m
<Plug>NERDTreeTabsClose	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeTabsClose    :call <SID>NERDTreeCloseAllTabs()$/;"	m
<Plug>NERDTreeTabsFind	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeTabsFind     :call <SID>NERDTreeFindFile()$/;"	m
<Plug>NERDTreeTabsOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeTabsOpen     :call <SID>NERDTreeOpenAllTabs()$/;"	m
<Plug>NERDTreeTabsToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^noremap <silent> <script> <Plug>NERDTreeTabsToggle   :call <SID>NERDTreeToggleAllTabs()$/;"	m
<Plug>XTablineCdCurrent	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdCurrent :cd %:p:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdDown1	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown1   :cd %:p:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdDown2	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown2   :cd %:p:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdDown3	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown3   :cd %:p:h:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdHome	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdHome    :cd ~<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineNextBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineNextBuffer <SID>NextBuffer$/;"	m
<Plug>XTablinePrevBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablinePrevBuffer <SID>PrevBuffer$/;"	m
<Plug>XTablineReopen	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineReopen <SID>ReopenLastTab$/;"	m
<Plug>XTablineSelectBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineSelectBuffer <SID>SelectBuffer$/;"	m
<Plug>XTablineToggleFiltering	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleFiltering <SID>ToggleFiltering$/;"	m
<Plug>XTablineToggleTabs	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleTabs <SID>ToggleTabs$/;"	m
<Plug>fugitive:	plugged/vim-fugitive/plugin/fugitive.vim	/^nmap <script> <Plug>fugitive: <Nop>$/;"	m
<Plug>fugitive:y<C-G>	plugged/vim-fugitive/plugin/fugitive.vim	/^nmap <script><silent> <Plug>fugitive:y<C-G> :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>$/;"	m
<S-TAB>	plugged/coc.nvim/doc/coc-example-config.vim	/^inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\\<C-h>"$/;"	m
<SID>:	plugged/vim-fugitive/autoload/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>NextBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>NextBuffer airline#extensions#tabline#xtabline#next_buffer(v:count1)$/;"	m
<SID>PrevBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>PrevBuffer airline#extensions#tabline#xtabline#prev_buffer(v:count1)$/;"	m
<SID>ReopenLastTab	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ReopenLastTab :XTabReopen<cr>$/;"	m
<SID>SelectBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>SelectBuffer g:xtabline_changing_buffer ? "\\<C-c>" : ":<C-u>call airline#extensions#tabline#xtabline#select_buffer(v:count)\\<cr>"$/;"	m
<SID>ToggleFiltering	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleFiltering :call airline#extensions#tabline#xtabline#toggle_buffers()<cr>$/;"	m
<SID>ToggleTabs	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleTabs :call airline#extensions#tabline#xtabline#toggle_tabs()<cr>$/;"	m
<TAB>	plugged/coc.nvim/doc/coc-example-config.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<c-@>	plugged/coc.nvim/doc/coc-example-config.vim	/^  inoremap <silent><expr> <c-@> coc#refresh()$/;"	m
<c-space>	plugged/coc.nvim/doc/coc-example-config.vim	/^  inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<down>	plugged/coc.nvim/plugin/coc.vim	/^  inoremap <silent><expr> <down> coc#pum#visible() ? coc#pum#next(0) : "\\<down>"$/;"	m
<leader>a	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <leader>ac  <Plug>(coc-codeaction-cursor)$/;"	m
<leader>as	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <leader>as  <Plug>(coc-codeaction-source)$/;"	m
<leader>cd2	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd2 <Plug>XTablineCdDown2$/;"	m
<leader>cd3	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd3 <Plug>XTablineCdDown3$/;"	m
<leader>cdc	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdc <Plug>XTablineCdCurrent$/;"	m
<leader>cdd	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdd <Plug>XTablineCdDown1$/;"	m
<leader>cdh	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdh <Plug>XTablineCdHome$/;"	m
<leader>cl	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <leader>cl  <Plug>(coc-codelens-action)$/;"	m
<leader>f	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>qf	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>r	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)$/;"	m
<leader>re	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)$/;"	m
<leader>rn	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<nowait>	plugged/coc.nvim/doc/coc-example-config.vim	/^nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<nowait>	plugged/coc.nvim/doc/coc-example-config.vim	/^nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>$/;"	m
<nowait>	plugged/coc.nvim/doc/coc-example-config.vim	/^nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<nowait>	plugged/coc.nvim/doc/coc-example-config.vim	/^nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>$/;"	m
<nowait>	plugged/coc.nvim/doc/coc-example-config.vim	/^nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>$/;"	m
<nowait>	plugged/coc.nvim/doc/coc-example-config.vim	/^nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>$/;"	m
<nowait>	plugged/coc.nvim/doc/coc-example-config.vim	/^nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>$/;"	m
<nowait>	plugged/coc.nvim/doc/coc-example-config.vim	/^nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
<nowait><expr>	plugged/coc.nvim/doc/coc-example-config.vim	/^  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\\<c-r>=coc#float#scroll(0)\\<cr>" : "\\<Left>"$/;"	m
<nowait><expr>	plugged/coc.nvim/doc/coc-example-config.vim	/^  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\\<c-r>=coc#float#scroll(1)\\<cr>" : "\\<Right>"$/;"	m
<nowait><expr>	plugged/coc.nvim/doc/coc-example-config.vim	/^  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\\<C-b>"$/;"	m
<nowait><expr>	plugged/coc.nvim/doc/coc-example-config.vim	/^  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\\<C-f>"$/;"	m
<nowait><expr>	plugged/coc.nvim/doc/coc-example-config.vim	/^  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\\<C-b>"$/;"	m
<nowait><expr>	plugged/coc.nvim/doc/coc-example-config.vim	/^  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\\<C-f>"$/;"	m
<up>	plugged/coc.nvim/plugin/coc.vim	/^  inoremap <silent><expr> <up> coc#pum#visible() ? coc#pum#prev(0) : "\\<up>"$/;"	m
=	plugged/vim-airline/autoload/airline/highlighter.vim	/^        cmd = substitute(cmd, clr, 'grey', 'g')$/;"	m
ALWAYS	plugged/vim-snippets/pythonx/javascript_snippets.py	/^ALWAYS = 'always'$/;"	v
AbsoluteVimPath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AbsoluteVimPath(...) abort$/;"	f
AddAnsiGroups	plugged/coc.nvim/plugin/coc.vim	/^function! s:AddAnsiGroups() abort$/;"	f
AddDiffSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddDiffSection(to, stat, label, files) abort$/;"	f
AddHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddHeader(to, key, value) abort$/;"	f
AddLeftDelim	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AddLeftDelim(delim, theLine) abort$/;"	f
AddLeftDelimAligned	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AddLeftDelimAligned(delim, theLine, alignIndx) abort$/;"	f
AddLogSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddLogSection(to, label, log) abort$/;"	f
AddRightDelim	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AddRightDelim(delim, theLine) abort$/;"	f
AddRightDelimAligned	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AddRightDelimAligned(delim, theLine, alignIndx) abort$/;"	f
AddSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddSection(to, label, lines, ...) abort$/;"	f
AerialFunctionIcon 	plugged/catppuccin/lua/catppuccin/groups/integrations/aerial.lua	/^		AerialFunctionIcon = { link = "@function" },$/;"	f
AirlineExtensions	plugged/vim-airline/plugin/airline.vim	/^command! AirlineExtensions   call s:airline_extensions()$/;"	c
AirlineRefresh	plugged/vim-airline/plugin/airline.vim	/^command! -bar -bang AirlineRefresh call s:airline_refresh(<q-bang>)$/;"	c
AirlineTheme	plugged/vim-airline/plugin/airline.vim	/^command! -bar -nargs=? -complete=customlist,<sid>get_airline_themes AirlineTheme call <sid>airline_theme(<f-args>)$/;"	c
AirlineToggle	plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggle  call s:airline_toggle()$/;"	c
AirlineToggleWhitespace	plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggleWhitespace call airline#extensions#whitespace#toggle()$/;"	c
Align	plugged/vim-gitgutter/test/runner.vim	/^function Align(left, right)$/;"	f
AltMultipart	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AltMultipart() abort$/;"	f
AltNested	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AltNested() abort$/;"	f
AppendCommentToLine	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:AppendCommentToLine() abort$/;"	f
ArgSplit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ArgSplit(string) abort$/;"	f
AskPassArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AskPassArgs(dir) abort$/;"	f
AsmFmt	plugged/vim-go/ftplugin/asm.vim	/^command! -nargs=0 AsmFmt call go#asmfmt#Format()$/;"	c
AsyncRequest	plugged/coc.nvim/plugin/coc.vim	/^function! s:AsyncRequest(name, args) abort$/;"	f
AutoUpdate	plugged/tagbar/autoload/tagbar.vim	/^function! s:AutoUpdate(fname, force, ...) abort$/;"	f
Autocmd	plugged/coc.nvim/plugin/coc.vim	/^function! s:Autocmd(...) abort$/;"	f
BOUNDARY_CHARS	plugged/unite.vim/autoload/unite/filters/sorter_selecta.py	/^BOUNDARY_CHARS = string.punctuation + string.whitespace$/;"	v
BUILD_INVERTED_INDEX	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
Base	plugged/unite.vim/rplugin/python3/denite/kind/unite.py	/^from .base import Base$/;"	i
Base	plugged/unite.vim/rplugin/python3/denite/source/unite.py	/^from .base import Base$/;"	i
Base	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^from .base import Base$/;"	i
BlameBufnr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameBufnr(...) abort$/;"	f
BlameCommit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommit(cmd, ...) abort$/;"	f
BlameCommitFileLnum	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommitFileLnum(...) abort$/;"	f
BlameCursorSync	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCursorSync(bufnr, line) abort$/;"	f
BlameJump	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameJump(suffix, ...) abort$/;"	f
BlameLeave	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameLeave() abort$/;"	f
BlameMaps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameMaps(is_ftplugin) abort$/;"	f
BlameQuit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameQuit() abort$/;"	f
BlameRehighlight	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameRehighlight() abort$/;"	f
BlameSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameSubcommand(line1, count, range, bang, mods, options) abort$/;"	f
BlobTemp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlobTemp(url) abort$/;"	f
BlurStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlurStatus() abort$/;"	f
Bookmark.AddBookmark	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.CompareBookmarksByName	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
Bookmark.Edit	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Edit()$/;"	f
Bookmark.GetNodeForName	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
Bookmark.GetSelected	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.SortBookmarksList	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
Bookmark.ToRoot	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
Bookmark.Write	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
Bookmark.delete	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.open	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
Bookmark.openInNewTab	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
Bookmark.validate	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
BranchCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BranchCfile(result) abort$/;"	f
BrowserOpen	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BrowserOpen(url, mods, echo_copy) abort$/;"	f
BufName	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BufName(var) abort$/;"	f
BufReadHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:BufReadHandler()$/;"	f
BufWinEnterHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:BufWinEnterHandler()$/;"	f
BuildEnvPrefix	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildEnvPrefix(env) abort$/;"	f
BuildShell	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildShell(dir, env, git, args) abort$/;"	f
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
Call	plugged/coc.nvim/autoload/coc/util.vim	/^function! s:Call(method, args)$/;"	f
CanCommentLine	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CanCommentLine(forceNested, lineNum) abort$/;"	f
CanPlaceCursor	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CanPlaceCursor(line, col) abort$/;"	f
CanSexyCommentLines	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CanSexyCommentLines(topline, bottomline) abort$/;"	f
CanToggleCommentLine	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CanToggleCommentLine(forceNested, lineNum) abort$/;"	f
CeilingDirectories	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:CeilingDirectories() abort$/;"	f
CfilePorcelain	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CfilePorcelain(...) abort$/;"	f
ChangeFoldLevel	plugged/tagbar/autoload/tagbar.vim	/^function! s:ChangeFoldLevel(diff, force) abort$/;"	f
CheckBackspace	plugged/coc.nvim/doc/coc-example-config.vim	/^function! CheckBackspace() abort$/;"	f
CheckBinaries	plugged/vim-go/plugin/go.vim	/^function! s:CheckBinaries()$/;"	f
CheckDefined	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:CheckDefined(colors) abort$/;"	f
CheckExCtagsVersion	plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckExCtagsVersion(output) abort$/;"	f
CheckFTCtags	plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckFTCtags(bin, ftype) abort$/;"	f
CheckForExCtags	plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckForExCtags(silent) abort$/;"	f
CheckMouseClick	plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckMouseClick() abort$/;"	f
ChompDefault	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompDefault(default, ...) abort$/;"	f
ChompStderr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompStderr(...) abort$/;"	f
CleanUp	plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
CloseFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseFold() abort$/;"	f
CloseIfOnlyNerdTreeLeft	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:CloseIfOnlyNerdTreeLeft()$/;"	f
CloseWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseWindow() abort$/;"	f
CocAction	plugged/coc.nvim/plugin/coc.vim	/^function! CocAction(name, ...) abort$/;"	f
CocActionAsync	plugged/coc.nvim/plugin/coc.vim	/^function! CocActionAsync(name, ...) abort$/;"	f
CocCommand	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -complete=custom,s:CommandList -range CocCommand :call coc#rpc#notify('runCommand', [<f-args>])$/;"	c
CocConfig	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocConfig       :call s:OpenConfig()$/;"	c
CocDiagnostics	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? CocDiagnostics  :call s:OpenDiagnostics(<f-args>)$/;"	c
CocDisable	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocDisable      :call s:Disable()$/;"	c
CocEnable	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocEnable       :call s:Enable(0)$/;"	c
CocFirst	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocFirst        :call coc#rpc#notify('listFirst', [<f-args>])$/;"	c
CocHasProvider	plugged/coc.nvim/plugin/coc.vim	/^function! CocHasProvider(name, ...) abort$/;"	f
CocInfo	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocInfo         :call s:ShowInfo()$/;"	c
CocInstall	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -bar -complete=custom,s:InstallOptions CocInstall   :call coc#util#install_extension([<f-args>])$/;"	c
CocLast	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocLast         :call coc#rpc#notify('listLast', [<f-args>])$/;"	c
CocList	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=* -complete=custom,coc#list#options CocList      :call coc#rpc#notify('openList',  [<f-args>])$/;"	c
CocListCancel	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocListCancel   :call coc#rpc#notify('listCancel', [])$/;"	c
CocListResume	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocListResume   :call coc#rpc#notify('listResume', [<f-args>])$/;"	c
CocLocalConfig	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocLocalConfig  :call coc#rpc#notify('openLocalConfig', [])$/;"	c
CocLocations	plugged/coc.nvim/plugin/coc.vim	/^function! CocLocations(id, method, ...) abort$/;"	f
CocLocationsAsync	plugged/coc.nvim/plugin/coc.vim	/^function! CocLocationsAsync(id, method, ...) abort$/;"	f
CocNext	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocNext         :call coc#rpc#notify('listNext', [<f-args>])$/;"	c
CocNotify	plugged/coc.nvim/plugin/coc.vim	/^function! CocNotify(...) abort$/;"	f
CocOpenLog	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocOpenLog      :call coc#rpc#notify('openLog',  [])$/;"	c
CocOutline	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocOutline      :call coc#rpc#notify('showOutline', [])$/;"	c
CocPopupCallback	plugged/coc.nvim/plugin/coc.vim	/^function! CocPopupCallback(bufnr, arglist) abort$/;"	f
CocPrev	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=? -complete=custom,coc#list#names CocPrev         :call coc#rpc#notify('listPrev', [<f-args>])$/;"	c
CocPrintErrors	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocPrintErrors  :call coc#rpc#show_errors()$/;"	c
CocRegistNotification	plugged/coc.nvim/plugin/coc.vim	/^function! CocRegistNotification(id, method, cb) abort$/;"	f
CocRegisterNotification	plugged/coc.nvim/plugin/coc.vim	/^function! CocRegisterNotification(id, method, cb) abort$/;"	f
CocRequest	plugged/coc.nvim/plugin/coc.vim	/^function! CocRequest(...) abort$/;"	f
CocRequestAsync	plugged/coc.nvim/plugin/coc.vim	/^function! CocRequestAsync(...)$/;"	f
CocRestart	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocRestart      :call coc#rpc#restart()$/;"	c
CocSearch	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=+ -complete=custom,s:SearchOptions  CocSearch    :call coc#rpc#notify('search', [<f-args>])$/;"	c
CocStart	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocStart        :call coc#rpc#start_server()$/;"	c
CocTagFunc	plugged/coc.nvim/plugin/coc.vim	/^function! CocTagFunc(pattern, flags, info) abort$/;"	f
CocUninstall	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=+ -complete=custom,s:ExtensionList  CocUninstall :call CocActionAsync('uninstallExtension', <f-args>)$/;"	c
CocUpdate	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 CocUpdate       :call coc#util#update_extensions(1)$/;"	c
CocUpdateSync	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=0 -bar CocUpdateSync   :call coc#util#update_extensions()$/;"	c
CocWatch	plugged/coc.nvim/plugin/coc.vim	/^command! -nargs=1 -complete=custom,s:LoadedExtensions  CocWatch    :call coc#rpc#notify('watchExtension', [<f-args>])$/;"	c
CodeActionFromSelected	plugged/coc.nvim/plugin/coc.vim	/^function! s:CodeActionFromSelected(type)$/;"	f
CodeActionRefactorFromSelected	plugged/coc.nvim/plugin/coc.vim	/^function! s:CodeActionRefactorFromSelected(type)$/;"	f
CommandList	plugged/coc.nvim/plugin/coc.vim	/^function! s:CommandList(...) abort$/;"	f
CommentBlock	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CommentBlock(top, bottom, lSide, rSide, forceNested) abort$/;"	f
CommentLines	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CommentLines(forceNested, align, firstLine, lastLine) abort$/;"	f
CommentLinesMinimal	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CommentLinesMinimal(firstLine, lastLine) abort$/;"	f
CommentLinesSexy	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CommentLinesSexy(topline, bottomline) abort$/;"	f
CommentLinesToggle	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CommentLinesToggle(forceNested, firstLine, lastLine) abort$/;"	f
CommentRegion	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CommentRegion(topLine, topCol, bottomLine, bottomCol, forceNested) abort$/;"	f
CommitInteractive	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitInteractive(line1, line2, range, bang, mods, options, patch) abort$/;"	f
CommitSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
CompilerSet	plugged/vim-go/compiler/go.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompletableSubcommands	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompletableSubcommands(dir) abort$/;"	f
CompleteBisect	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteBisect(A, L, P, ...) abort$/;"	f
CompleteHeads	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteHeads(dir) abort$/;"	f
CompletePush	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompletePush(A, L, P, ...) abort$/;"	f
CompleteRemote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRemote(A, L, P, ...) abort$/;"	f
CompleteRevision	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRevision(A, L, P, ...) abort$/;"	f
CompleteSub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteSub(subcommand, A, L, P, ...) abort$/;"	f
ConfigCallback	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigCallback(r, into) abort$/;"	f
ConfigLengthSort	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigLengthSort(i1, i2) abort$/;"	f
ConfigTimestamps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigTimestamps(dir, dict) abort$/;"	f
ContainingCommit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ContainingCommit() abort$/;"	f
ConvertLeadingSpacesToTabs	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:ConvertLeadingSpacesToTabs(line) abort$/;"	f
ConvertLeadingTabsToSpaces	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:ConvertLeadingTabsToSpaces(line) abort$/;"	f
ConvertLeadingWhiteSpace	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:ConvertLeadingWhiteSpace(line) abort$/;"	f
CorrectFocusOnStartup	plugged/tagbar/autoload/tagbar.vim	/^function! s:CorrectFocusOnStartup() abort$/;"	f
CountNonESCedOccurances	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CountNonESCedOccurances(str, searchstr, escChar) abort$/;"	f
CreateAutocommands	plugged/tagbar/autoload/tagbar.vim	/^function! s:CreateAutocommands() abort$/;"	f
CreateDelimMapFromCms	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:CreateDelimMapFromCms() abort$/;"	f
CreateHighlight	plugged/coc.nvim/plugin/coc.vim	/^function! s:CreateHighlight(group, fg, bg) abort$/;"	f
CreateMaps	plugged/nerdcommenter/plugin/nerdcommenter.vim	/^function! s:CreateMaps(modes, target, desc, combo)$/;"	f
CreateTabTreeVCS	plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:CreateTabTreeVCS(name)$/;"	f
Creator.BufNamePrefix	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
Creator.CreateExploreTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateExploreTree(dir)$/;"	f
Creator.CreateMirror	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
Creator.CreateTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
Creator.CreateWindowTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
Creator.New	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
Creator.ToggleTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
Creator._bindMappings	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
Creator._broadcastInitEvent	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
Creator._createNERDTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
Creator._createTreeWin	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
Creator._isBufHidden	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
Creator._nextBufferName	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName(...)$/;"	f
Creator._nextBufferNumber	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
Creator._pathForString	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
Creator._removeTreeBufForTab	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
Creator._setCommonBufOptions	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
Creator._setupStatusline	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
Creator._tabpagevar	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
Creator._uniq	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
Creator.createMirror	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
Creator.createTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
Creator.createWindowTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
Creator.toggleTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
CtagsErrMsg	plugged/tagbar/autoload/tagbar.vim	/^function! s:CtagsErrMsg(errmsg, infomsg, silent, ...) abort$/;"	f
CurlResponse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CurlResponse(result) abort$/;"	f
CursorRangeFromSelected	plugged/coc.nvim/plugin/coc.vim	/^function! s:CursorRangeFromSelected(type, ...) abort$/;"	f
CygwinPath	plugged/vim-go/autoload/go/path.vim	/^function! s:CygwinPath(path)$/;"	f
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DECLS_SYNTAX_HIGHLIGHT	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^DECLS_SYNTAX_HIGHLIGHT = [$/;"	v
DetectFiletype	plugged/tagbar/autoload/tagbar.vim	/^function! s:DetectFiletype(bufnr) abort$/;"	f
DiffModifier	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DiffModifier(count, default) abort$/;"	f
DifftoolSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DifftoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
Dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Dir(...) abort$/;"	f
DirCheck	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCheck(...) abort$/;"	f
DirCommitFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCommitFile(path) abort$/;"	f
DirRev	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirRev(url) abort$/;"	f
DirUrlPrefix	plugged/vim-fugitive/autoload/fugitive.vim	/^  function! s:DirUrlPrefix(dir) abort$/;"	f
Disable	plugged/coc.nvim/plugin/coc.vim	/^function! s:Disable() abort$/;"	f
Do	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:Do(action)$/;"	f
Do	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Do(action, visual) abort$/;"	f
DoAutocmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmd(...) abort$/;"	f
DoAutocmdChanged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmdChanged(dir) abort$/;"	f
DoStagePushHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStagePushHeader(value) abort$/;"	f
DoStageUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushed(record) abort$/;"	f
DoStageUnpushedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushedHeading(heading) abort$/;"	f
DoStageUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstaged(record) abort$/;"	f
DoStageUnstagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstagedHeading(heading) abort$/;"	f
DoStageUntracked	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntracked(record) abort$/;"	f
DoStageUntrackedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntrackedHeading(heading) abort$/;"	f
DoToggleHeadHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHeadHeader(value) abort$/;"	f
DoToggleHelpHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHelpHeader(value) abort$/;"	f
DoTogglePushHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoTogglePushHeader(value) abort$/;"	f
DoToggleStaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStaged(record) abort$/;"	f
DoToggleStagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStagedHeading(...) abort$/;"	f
DoToggleUnpulled	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulled(record) abort$/;"	f
DoToggleUnpulledHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulledHeading(heading) abort$/;"	f
DoToggleUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushed(record) abort$/;"	f
DoToggleUnpushedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushedHeading(heading) abort$/;"	f
DoToggleUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstaged(record) abort$/;"	f
DoToggleUnstagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstagedHeading(...) abort$/;"	f
DoToggleUntracked	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntracked(record) abort$/;"	f
DoToggleUntrackedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntrackedHeading(...) abort$/;"	f
DoUnstageStaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStaged(record) abort$/;"	f
DoUnstageStagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStagedHeading(heading) abort$/;"	f
DoUnstageUnpulled	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulled(record) abort$/;"	f
DoUnstageUnpulledHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulledHeading(heading) abort$/;"	f
DoUnstageUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpushed(record) abort$/;"	f
DoUnstageUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnstaged(record) abort$/;"	f
DoesBlockHaveDelim	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:DoesBlockHaveDelim(delim, top, bottom) abort$/;"	f
DoesBlockHaveMultipartDelim	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:DoesBlockHaveMultipartDelim(top, bottom) abort$/;"	f
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
DotRelative	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DotRelative(path, ...) abort$/;"	f
Enable	plugged/coc.nvim/plugin/coc.vim	/^function! s:Enable(initialize)$/;"	f
Error	plugged/vim-go/autoload/go/import.vim	/^function! s:Error(s) abort$/;"	f
Esc	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:Esc(str) abort$/;"	f
EscapeCtagsCmd	plugged/tagbar/autoload/tagbar.vim	/^function! s:EscapeCtagsCmd(ctags_bin, args, ...) abort$/;"	f
Event.New	plugged/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
Exception	plugged/vim-gitgutter/test/runner.vim	/^function Exception()$/;"	f
ExcludeOther	plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! s:ExcludeOther(nr, exclude_preview)$/;"	f
ExcludePaths	plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! s:ExcludePaths(nr, exclude_paths)$/;"	f
ExecPath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExecPath() abort$/;"	f
ExecuteCtags	plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtags(ctags_cmd) abort$/;"	f
ExecuteCtagsOnFile	plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtagsOnFile(fname, realfname, typeinfo) abort$/;"	f
Expand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Expand(rev, ...) abort$/;"	f
ExpandSnippet	plugged/vim-go/autoload/go/auto.vim	/^function! s:ExpandSnippet() abort$/;"	f
ExpandVar	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVar(other, var, flags, esc, ...) abort$/;"	f
ExpireStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpireStatus(bufnr) abort$/;"	f
ExtensionList	plugged/coc.nvim/plugin/coc.vim	/^function! s:ExtensionList(...) abort$/;"	f
FILESIZE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^	set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FetchSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FetchSubcommand(...) abort$/;"	f
FileIgnoreCase	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FileIgnoreCase(for_completion) abort$/;"	f
FilterEscape	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FilterEscape(items, ...) abort$/;"	f
FindBoundingLinesOfSexyCom	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:FindBoundingLinesOfSexyCom(lineNum) abort$/;"	f
FindDelimiterIndex	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:FindDelimiterIndex(delimiter, line) abort$/;"	f
FindParentVCSRoot	plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:FindParentVCSRoot(path)$/;"	f
FlagSet.New	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
FlagSet._flagsForScope	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
FlagSet.addFlag	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
FlagSet.clearFlags	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
FlagSet.removeFlag	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
FlagSet.renderToString	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
FocusGainedHandler	plugged/vim-airline/plugin/airline.vim	/^function! s:FocusGainedHandler(timer)$/;"	f
Fold	plugged/coc.nvim/doc/coc-example-config.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	plugged/coc.nvim/doc/coc-example-config.vim	/^command! -nargs=0 Format :call CocActionAsync('format')$/;"	c
Format	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Format(val) abort$/;"	f
FormatFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatFile(dict) abort$/;"	f
FormatFromSelected	plugged/coc.nvim/plugin/coc.vim	/^function! s:FormatFromSelected(type)$/;"	f
FormatLog	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatLog(dict) abort$/;"	f
FormatRebase	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatRebase(dict) abort$/;"	f
FriendlyName	plugged/vim-gitgutter/test/runner.vim	/^function FriendlyName(test_name)$/;"	f
FugitiveActualDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveActualDir(...) abort$/;"	f
FugitiveCommonDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveCommonDir(...) abort$/;"	f
FugitiveConfig	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfig(...) abort$/;"	f
FugitiveConfigGet	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGet(name, ...) abort$/;"	f
FugitiveConfigGetAll	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetAll(name, ...) abort$/;"	f
FugitiveConfigGetRegexp	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetRegexp(pattern, ...) abort$/;"	f
FugitiveDetect	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveDetect(...) abort$/;"	f
FugitiveDidChange	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveDidChange(...) abort$/;"	f
FugitiveExecute	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveExecute(args, ...) abort$/;"	f
FugitiveExtractGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveExtractGitDir(path) abort$/;"	f
FugitiveFind	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveFind(...) abort$/;"	f
FugitiveGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitDir(...) abort$/;"	f
FugitiveGitPath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitPath(path) abort$/;"	f
FugitiveGitVersion	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitVersion(...) abort$/;"	f
FugitiveHead	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveHead(...) abort$/;"	f
FugitiveIsGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveIsGitDir(...) abort$/;"	f
FugitiveParse	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveParse(...) abort$/;"	f
FugitivePath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePath(...) abort$/;"	f
FugitiveReal	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveReal(...) abort$/;"	f
FugitiveRemote	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveRemote(...) abort$/;"	f
FugitiveRemoteUrl	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveRemoteUrl(...) abort$/;"	f
FugitiveResult	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveResult(...) abort$/;"	f
FugitiveShellCommand	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveShellCommand(...) abort$/;"	f
FugitiveStatusline	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveStatusline(...) abort$/;"	f
FugitiveVimPath	plugged/vim-fugitive/plugin/fugitive.vim	/^    function! FugitiveVimPath(path) abort$/;"	f
FugitiveVimPath	plugged/vim-fugitive/plugin/fugitive.vim	/^  function FugitiveVimPath(path) abort$/;"	f
FugitiveWorkTree	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveWorkTree(...) abort$/;"	f
Function 	plugged/catppuccin/lua/catppuccin/groups/syntax.lua	/^		Function = { fg = C.blue, style = O.styles.functions or {} }, -- function name (also: methods for classes)$/;"	f
G	plugged/vim-fugitive/plugin/fugitive.vim	/^  command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)$/;"	c
GF	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
GTAGS_EXE	plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^	set GTAGS_EXE=%~2$/;"	v
Generate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Generate(object, ...) abort$/;"	f
GetAirlineSection	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! s:GetAirlineSection()$/;"	f
GetFileWinnr	plugged/tagbar/autoload/tagbar.vim	/^function! s:GetFileWinnr(fileinfo) abort$/;"	f
GetGoHTMLTmplIndent	plugged/vim-go/indent/gohtmltmpl.vim	/^function! GetGoHTMLTmplIndent(lnum)$/;"	f
GetHiCmd	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:GetHiCmd(list) abort$/;"	f
GetNearbyTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:GetNearbyTag(request, forcecurrent, ...) abort$/;"	f
GetSexyComLeft	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:GetSexyComLeft(space, esc) abort$/;"	f
GetSexyComMarker	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:GetSexyComMarker(space, esc) abort$/;"	f
GetSexyComRight	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:GetSexyComRight(space, esc) abort$/;"	f
GetSupportedFiletypes	plugged/tagbar/autoload/tagbar.vim	/^function! s:GetSupportedFiletypes() abort$/;"	f
GetTagInfo	plugged/tagbar/autoload/tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo) abort$/;"	f
Git	plugged/vim-fugitive/plugin/fugitive.vim	/^command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)$/;"	c
GitCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitCmd() abort$/;"	f
GitDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitDir(...) abort$/;"	f
GitGutter	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutter    call gitgutter#process_buffer(bufnr(''), 1)$/;"	c
GitGutterAll	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterAll call gitgutter#all(1)$/;"	c
GitGutterBufferDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferDisable call gitgutter#buffer_disable()$/;"	c
GitGutterBufferEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferEnable  call gitgutter#buffer_enable()$/;"	c
GitGutterBufferToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterBufferToggle  call gitgutter#buffer_toggle()$/;"	c
GitGutterDebug	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDebug call gitgutter#debug#debug()$/;"	c
GitGutterDiffOrig	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDiffOrig call gitgutter#difforig()$/;"	c
GitGutterDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterDisable call gitgutter#disable()$/;"	c
GitGutterEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterEnable  call gitgutter#enable()$/;"	c
GitGutterFold	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterFold call gitgutter#fold#toggle()$/;"	c
GitGutterGetHunkSummary	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunkSummary()$/;"	f
GitGutterGetHunks	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! GitGutterGetHunks()$/;"	f
GitGutterLineHighlightsDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsDisable call gitgutter#highlight#line_disable()$/;"	c
GitGutterLineHighlightsEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsEnable  call gitgutter#highlight#line_enable()$/;"	c
GitGutterLineHighlightsToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineHighlightsToggle  call gitgutter#highlight#line_toggle()$/;"	c
GitGutterLineNrHighlightsDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsDisable call gitgutter#highlight#linenr_disable()$/;"	c
GitGutterLineNrHighlightsEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsEnable  call gitgutter#highlight#linenr_enable()$/;"	c
GitGutterLineNrHighlightsToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterLineNrHighlightsToggle  call gitgutter#highlight#linenr_toggle()$/;"	c
GitGutterNextHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -count=1 GitGutterNextHunk call gitgutter#hunk#next_hunk(<count>)$/;"	c
GitGutterPrevHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -count=1 GitGutterPrevHunk call gitgutter#hunk#prev_hunk(<count>)$/;"	c
GitGutterPreviewHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterPreviewHunk call gitgutter#hunk#preview()$/;"	c
GitGutterQuickFix	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterQuickFix call gitgutter#quickfix(0)$/;"	c
GitGutterQuickFixCurrentFile	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterQuickFixCurrentFile call gitgutter#quickfix(1)$/;"	c
GitGutterSignsDisable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsDisable call gitgutter#sign#disable()$/;"	c
GitGutterSignsEnable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsEnable  call gitgutter#sign#enable()$/;"	c
GitGutterSignsToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterSignsToggle  call gitgutter#sign#toggle()$/;"	c
GitGutterStageHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar -range=% GitGutterStageHunk call gitgutter#hunk#stage(<line1>,<line2>)$/;"	c
GitGutterToggle	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterToggle  call gitgutter#toggle()$/;"	c
GitGutterUndoHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^command! -bar GitGutterUndoHunk    call gitgutter#hunk#undo()$/;"	c
GitIndexFileEnv	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitIndexFileEnv() abort$/;"	f
GitShellCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitShellCmd() abort$/;"	f
GlobComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GlobComplete(lead, pattern, ...) abort$/;"	f
GlobalChange	plugged/coc.nvim/autoload/coc.vim	/^function! s:GlobalChange(dict, key, val)$/;"	f
GoAddTags	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range GoAddTags call go#tags#Add(<line1>, <line2>, <count>, <f-args>)$/;"	c
GoAddWorkspace	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=+ -complete=dir GoAddWorkspace call go#lsp#AddWorkspaceDirectory(<f-args>)$/;"	c
GoAlternate	plugged/vim-go/ftplugin/go/commands.vim	/^command! -bang GoAlternate call go#alternate#Switch(<bang>0, '')$/;"	c
GoAsmFmtAutoSaveToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoAsmFmtAutoSaveToggle call go#asmfmt#ToggleAsmFmtAutoSave()$/;"	c
GoAutoTypeInfoToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoAutoTypeInfoToggle call go#complete#ToggleAutoTypeInfo()$/;"	c
GoBuild	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoBuild call go#cmd#Build(<bang>0,<f-args>)$/;"	c
GoBuildTags	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -bang GoBuildTags call go#cmd#BuildTags(<bang>0, <f-args>)$/;"	c
GoCallees	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoCallees call go#guru#Callees(<count>)$/;"	c
GoCallers	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoCallers call go#calls#Callers()$/;"	c
GoCallstack	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoCallstack call go#guru#Callstack(<count>)$/;"	c
GoChannelPeers	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoChannelPeers call go#guru#ChannelPeers(<count>)$/;"	c
GoCoverage	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoCoverage call go#coverage#Buffer(<bang>0, <f-args>)$/;"	c
GoCoverageBrowser	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoCoverageBrowser call go#coverage#Browser(<bang>0, <f-args>)$/;"	c
GoCoverageClear	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoCoverageClear call go#coverage#Clear()$/;"	c
GoCoverageToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoCoverageToggle call go#coverage#BufferToggle(<bang>0, <f-args>)$/;"	c
GoDebugAttach	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=1 GoDebugAttach call go#debug#Start('attach', <f-args>)$/;"	c
GoDebugBreakpoint	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=? GoDebugBreakpoint call go#debug#Breakpoint(<f-args>)$/;"	c
GoDebugConnect	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=? GoDebugConnect call go#debug#Start('connect', <f-args>)$/;"	c
GoDebugStart	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=* -complete=customlist,go#package#Complete GoDebugStart call go#debug#Start('debug', <f-args>)$/;"	c
GoDebugTest	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=* -complete=customlist,go#package#Complete GoDebugTest  call go#debug#Start('test', <f-args>)$/;"	c
GoDebugTestFunc	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=* GoDebugTestFunc  call go#debug#TestFunc(<f-args>)$/;"	c
GoDecls	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -complete=file GoDecls call go#decls#Decls(0, <q-args>)$/;"	c
GoDeclsDir	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -complete=dir GoDeclsDir call go#decls#Decls(1, <q-args>)$/;"	c
GoDef	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range GoDef :call go#def#Jump('', 0)$/;"	c
GoDefPop	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? GoDefPop :call go#def#StackPop(<f-args>)$/;"	c
GoDefStack	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? GoDefStack :call go#def#Stack(<f-args>)$/;"	c
GoDefStackClear	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? GoDefStackClear :call go#def#StackClear(<f-args>)$/;"	c
GoDefType	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range GoDefType :call go#def#Jump('', 1)$/;"	c
GoDeps	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoDeps echo go#tool#Deps()$/;"	c
GoDescribe	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoDescribe call go#guru#Describe(<count>)$/;"	c
GoDiagnostics	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoDiagnostics call go#lint#Diagnostics(<bang>0, <f-args>)$/;"	c
GoDoc	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range -complete=customlist,go#package#Complete GoDoc call go#doc#Open('new', 'split', <f-args>)$/;"	c
GoDocBrowser	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range -complete=customlist,go#package#Complete GoDocBrowser call go#doc#OpenBrowser(<f-args>)$/;"	c
GoDrop	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -complete=customlist,go#package#Complete GoDrop call go#import#SwitchImport(0, '', <f-args>, '')$/;"	c
GoErrCheck	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang -complete=customlist,go#package#Complete GoErrCheck call go#lint#Errcheck(<bang>0, <f-args>)$/;"	c
GoFiles	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -complete=customlist,go#tool#ValidFiles GoFiles echo go#tool#Files(<f-args>)$/;"	c
GoFillStruct	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoFillStruct call go#fillstruct#FillStruct()$/;"	c
GoFmt	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoFmt call go#fmt#Format(0)$/;"	c
GoFmtAutoSaveToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoFmtAutoSaveToggle call go#fmt#ToggleFmtAutoSave()$/;"	c
GoFreevars	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoFreevars call go#guru#Freevars(<count>)$/;"	c
GoGenerate	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoGenerate call go#cmd#Generate(<bang>0,<f-args>)$/;"	c
GoGuruScope	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=* -complete=customlist,go#package#Complete GoGuruScope call go#guru#Scope(<f-args>)$/;"	c
GoIfErr	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoIfErr call go#iferr#Generate()$/;"	c
GoImpl	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -complete=customlist,go#impl#Complete GoImpl call go#impl#Impl(<f-args>)$/;"	c
GoImplements	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=% GoImplements call go#implements#Implements(<count>)$/;"	c
GoImport	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=1 -bang -complete=customlist,go#package#Complete GoImport call go#import#SwitchImport(1, '', <f-args>, '<bang>')$/;"	c
GoImportAs	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang -complete=customlist,go#package#Complete GoImportAs call go#import#SwitchImport(1, <f-args>, '<bang>')$/;"	c
GoImports	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoImports call go#fmt#Format(1)$/;"	c
GoIndent	plugged/vim-go/indent/go.vim	/^function! GoIndent(lnum) abort$/;"	f
GoInfo	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoInfo call go#tool#Info(1)$/;"	c
GoInstall	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoInstall call go#cmd#Install(<bang>0, <f-args>)$/;"	c
GoInstallBinaries	plugged/vim-go/plugin/go.vim	/^command! -nargs=* -complete=customlist,s:complete GoInstallBinaries call s:GoInstallBinaries(-1, <f-args>)$/;"	c
GoInstallBinaries	plugged/vim-go/plugin/go.vim	/^function! s:GoInstallBinaries(updateBinaries, ...)$/;"	f
GoKeyify	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -nargs=0 GoKeyify call go#keyify#Keyify()$/;"	c
GoLSPDebugBrowser	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoLSPDebugBrowser call go#lsp#DebugBrowser()$/;"	c
GoLint	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoLint call go#lint#Golint(<bang>0, <f-args>)$/;"	c
GoMetaLinter	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoMetaLinter call go#lint#Gometa(<bang>0, 0, <f-args>)$/;"	c
GoMetaLinterAutoSaveToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoMetaLinterAutoSaveToggle call go#lint#ToggleMetaLinterAutoSave()$/;"	c
GoMinisnip	plugged/vim-go/ftplugin/go/snippets.vim	/^function! s:GoMinisnip() abort$/;"	f
GoModFmt	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 -range GoModFmt call go#mod#Format()$/;"	c
GoModFmt	plugged/vim-go/ftplugin/gomod/commands.vim	/^command! -nargs=0 -range GoModFmt call go#mod#Format()$/;"	c
GoModFmtAutoSaveToggle	plugged/vim-go/ftplugin/gomod/commands.vim	/^command! -nargs=0 GoModFmtAutoSaveToggle call go#mod#ToggleModFmtAutoSave()$/;"	c
GoModReload	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? GoModReload call go#lsp#ModReload()$/;"	c
GoNeosnippet	plugged/vim-go/ftplugin/go/snippets.vim	/^function! s:GoNeosnippet() abort$/;"	f
GoPath	plugged/vim-go/plugin/go.vim	/^command! -nargs=? -complete=dir GoPath call go#path#GoPath(<f-args>)$/;"	c
GoPlay	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 -range=% GoPlay call go#play#Share(<count>, <line1>, <line2>)$/;"	c
GoPointsTo	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoPointsTo call go#guru#PointsTo(<count>)$/;"	c
GoReferrers	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=% GoReferrers call go#referrers#Referrers(<count>)$/;"	c
GoRemoveTags	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -range GoRemoveTags call go#tags#Remove(<line1>, <line2>, <count>, <f-args>)$/;"	c
GoRename	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=? -complete=customlist,go#rename#Complete GoRename call go#rename#Rename(<bang>0, <f-args>)$/;"	c
GoReportGitHubIssue	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoReportGitHubIssue call go#issue#New()$/;"	c
GoRun	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang -complete=file GoRun call go#cmd#Run(<bang>0,<f-args>)$/;"	c
GoSameIds	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=0 GoSameIds call go#sameids#SameIds(1)$/;"	c
GoSameIdsAutoToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=0 GoSameIdsAutoToggle call go#sameids#AutoToggleSameIds()$/;"	c
GoSameIdsClear	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=0 GoSameIdsClear call go#sameids#ClearSameIds()$/;"	c
GoSameIdsToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -range=0 GoSameIdsToggle call go#sameids#ToggleSameIds()$/;"	c
GoTemplateAutoCreateToggle	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=0 GoTemplateAutoCreateToggle call go#template#ToggleAutoCreate()$/;"	c
GoTest	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoTest call go#test#Test(<bang>0, 0, <f-args>)$/;"	c
GoTestCompile	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoTestCompile call go#test#Test(<bang>0, 1, <f-args>)$/;"	c
GoTestFunc	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoTestFunc call go#test#Func(<bang>0, <f-args>)$/;"	c
GoToggleTermCloseOnExit	plugged/vim-go/ftplugin/go/commands.vim	/^command! GoToggleTermCloseOnExit call go#term#ToggleCloseOnExit()$/;"	c
GoUltiSnips	plugged/vim-go/ftplugin/go/snippets.vim	/^function! s:GoUltiSnips() abort$/;"	f
GoUpdateBinaries	plugged/vim-go/plugin/go.vim	/^command! -nargs=* -complete=customlist,s:complete GoUpdateBinaries  call s:GoInstallBinaries(1, <f-args>)$/;"	c
GoVet	plugged/vim-go/ftplugin/go/commands.vim	/^command! -nargs=* -bang GoVet call go#lint#Vet(<bang>0, <f-args>)$/;"	c
GoWhicherrs	plugged/vim-go/ftplugin/go/commands.vim	/^  command! -range=% GoWhicherrs call go#guru#Whicherrs(<count>)$/;"	c
Godef	plugged/vim-godef/plugin/godef.vim	/^command! -range -nargs=1 Godef :call Godef(<q-args>)$/;"	c
Godef	plugged/vim-godef/plugin/godef.vim	/^function! Godef(arg)$/;"	f
GodefUnderCursor	plugged/vim-godef/plugin/godef.vim	/^function! GodefUnderCursor()$/;"	f
GodocView	plugged/vim-go/autoload/go/doc.vim	/^function! s:GodocView(newposition, position, content) abort$/;"	f
GotoFileWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoFileWindow(fileinfo, ...) abort$/;"	f
GotoNextFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextFold() abort$/;"	f
GotoNextToplevelTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextToplevelTag(direction) abort$/;"	f
GotoPrevFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoPrevFold() abort$/;"	f
GrepCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepCfile(result) abort$/;"	f
GrepOptions	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepOptions(args, dir) abort$/;"	f
GrepParseLine	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepParseLine(options, quiet, dir, line) abort$/;"	f
GrepSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
GruvboxHlsHideCursor	colors/gruvbox.vim	/^function! GruvboxHlsHideCursor()$/;"	f
GruvboxHlsShowCursor	colors/gruvbox.vim	/^function! GruvboxHlsShowCursor()$/;"	f
GutentagsToggleEnabled	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
HL	colors/gruvbox.vim	/^function! s:HL(group, fg, ...)$/;"	f
HandleBufDelete	plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufDelete(bufname, bufnr) abort$/;"	f
HandleBufWrite	plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufWrite(fname) abort$/;"	f
HandleCharInsert	plugged/coc.nvim/plugin/coc.vim	/^function! s:HandleCharInsert(char, bufnr) abort$/;"	f
HandleInsertLeave	plugged/coc.nvim/plugin/coc.vim	/^function! s:HandleInsertLeave(bufnr) abort$/;"	f
HandleOnlyWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleOnlyWindow() abort$/;"	f
HandleTextChangedI	plugged/coc.nvim/plugin/coc.vim	/^function! s:HandleTextChangedI(bufnr) abort$/;"	f
HandleWinClosed	plugged/coc.nvim/plugin/coc.vim	/^function! s:HandleWinClosed(winid) abort$/;"	f
HandleWinScrolled	plugged/coc.nvim/plugin/coc.vim	/^function! s:HandleWinScrolled(winid) abort$/;"	f
HasCStyleComments	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:HasCStyleComments() abort$/;"	f
HasLeadingTabs	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:HasLeadingTabs(...) abort$/;"	f
HasMultipartDelims	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:HasMultipartDelims() abort$/;"	f
HasOpenFileWindows	plugged/tagbar/autoload/tagbar.vim	/^function! s:HasOpenFileWindows() abort$/;"	f
HasOpt	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:HasOpt(args, ...) abort$/;"	f
HasPath	plugged/vim-go/autoload/go/path.vim	/^function! s:HasPath(path) abort$/;"	f
Highlight	plugged/coc.nvim/plugin/coc.vim	/^function! s:Highlight() abort$/;"	f
HighlightTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:HighlightTag(openfolds, ...) abort$/;"	f
HunkPosition	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:HunkPosition(lnum) abort$/;"	f
INDEX_WHOLE_PROJECT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
IfFocusOnStartup	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:IfFocusOnStartup()$/;"	f
Init	plugged/tagbar/autoload/tagbar.vim	/^function! s:Init(silent) abort$/;"	f
InitCwds	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:InitCwds()$/;"	f
InitTypes	plugged/tagbar/autoload/tagbar.vim	/^function! s:InitTypes() abort$/;"	f
InitVariable	plugged/nerdcommenter/plugin/nerdcommenter.vim	/^function s:InitVariable(var, value)$/;"	f
InitWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:InitWindow(autoclose) abort$/;"	f
InitializeBuffer	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:InitializeBuffer(repo) abort$/;"	f
InstallOptions	plugged/coc.nvim/plugin/coc.vim	/^function! s:InstallOptions(...)abort$/;"	f
InvertComment	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:InvertComment(firstLine, lastLine) abort$/;"	f
IsCommented	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsCommented(left, right, line) abort$/;"	f
IsCommentedFromStartOfLine	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsCommentedFromStartOfLine(left, line) abort$/;"	f
IsCommentedNormOrSexy	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsCommentedNormOrSexy(lineNum) abort$/;"	f
IsCommentedOutermost	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsCommentedOutermost(left, right, leftAlt, rightAlt, line) abort$/;"	f
IsConflicted	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:IsConflicted() abort$/;"	f
IsCurrentWindowNERDTree	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:IsCurrentWindowNERDTree()$/;"	f
IsDelimValid	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsDelimValid(delimiter, delIndx, line) abort$/;"	f
IsEscaped	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsEscaped(str, indx, escChar) abort$/;"	f
IsInSexyComment	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsInSexyComment(line) abort$/;"	f
IsLineVisible	plugged/tagbar/autoload/tagbar.vim	/^function! s:IsLineVisible(line) abort$/;"	f
IsNERDTreeOpenInCurrentTab	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:IsNERDTreeOpenInCurrentTab()$/;"	f
IsNERDTreePresentInCurrentTab	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:IsNERDTreePresentInCurrentTab()$/;"	f
IsNumEven	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsNumEven(num) abort$/;"	f
IsSexyComment	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:IsSexyComment(topline, bottomline) abort$/;"	f
IsValidFile	plugged/tagbar/autoload/tagbar.vim	/^function! s:IsValidFile(fname, ftype) abort$/;"	f
Job.onExitCB	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onExitCB() abort$/;"	f
Job.onFailed	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onFailed() abort$/;"	f
Job.onStderrCB	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onStderrCB(data) abort$/;"	f
Job.onStdoutCB	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onStdoutCB(data) abort$/;"	f
Job.onSuccess	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:Job.onSuccess() abort$/;"	f
Job.run	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^    function! s:Job.run(cmd) abort$/;"	f
JobExecute	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobExecute(argv, jopts, stdin, callback, ...) abort$/;"	f
JobNvimCallback	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobNvimCallback(lines, job, data, type) abort$/;"	f
JobNvimExit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobNvimExit(dict, callback, job, data, type) dict abort$/;"	f
JobOpts	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobOpts(cmd, env) abort$/;"	f
JobVimExit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobVimExit(dict, callback, temp, job, status) abort$/;"	f
JoinChomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JoinChomp(list) abort$/;"	f
JumpToNearbyTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:JumpToNearbyTag(direction, request, flags) abort$/;"	f
JumpToTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar, ...) abort$/;"	f
K	plugged/coc.nvim/doc/coc-example-config.vim	/^nnoremap <silent> K :call ShowDocumentation()<CR>$/;"	m
K	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> K :GoDoc<cr>$/;"	m
KeyMap.Add	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
KeyMap.All	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Compare	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Compare(keyMap1, keyMap2)$/;"	f
KeyMap.Create	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.FindFor	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
KeyMap.Invoke	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
KeyMap.Remove	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
KeyMap.bind	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
KeyMap.invoke	plugged/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
Keywordprg	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Keywordprg() abort$/;"	f
Kind	plugged/unite.vim/rplugin/python3/denite/kind/unite.py	/^class Kind(Base):$/;"	c
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
LastIndexOfDelim	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:LastIndexOfDelim(delim, str) abort$/;"	f
Left	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:Left(...) abort$/;"	f
LeftMostIndx	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:LeftMostIndx(countCommentedLines, countEmptyLines, topline, bottomline) abort$/;"	f
LinesError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LinesError(...) abort$/;"	f
Listener.HasPath	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.HasPath(path_str) abort$/;"	f
Listener.OnInit	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.OnInit(event) abort$/;"	f
Listener.OnRefresh	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.OnRefresh(event) abort$/;"	f
Listener.OnRefreshFlags	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.OnRefreshFlags(event) abort$/;"	f
Listener.SetNext	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.SetNext(cache) abort$/;"	f
Listener.TryUpdateNERDTreeUI	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.TryUpdateNERDTreeUI() abort$/;"	f
Listener.callback	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.callback(event) abort$/;"	f
Listener.changed	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.changed() abort$/;"	f
Listener.getOption	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.getOption(name, default) abort$/;"	f
Listener.update	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! s:Listener.update() abort$/;"	f
LoadPlugin	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:LoadPlugin()$/;"	f
LoadUserTypeDefs	plugged/tagbar/autoload/tagbar.vim	/^function! s:LoadUserTypeDefs(...) abort$/;"	f
LoadedExtensions	plugged/coc.nvim/plugin/coc.vim	/^function! s:LoadedExtensions(...) abort$/;"	f
Log	plugged/vim-gitgutter/test/runner.vim	/^function Log(msg)$/;"	f
LogFlushQueue	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogFlushQueue(state, dir) abort$/;"	f
LogParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogParse(state, dir, prefix, line) abort$/;"	f
Logger.debug	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.debug(msg) abort$/;"	f
Logger.error	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.error(msg) abort$/;"	f
Logger.info	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.info(msg) abort$/;"	f
Logger.output	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.output(level, msg) abort$/;"	f
Logger.warning	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! s:Logger.warning(msg) abort$/;"	f
LoopParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
M.apply	plugged/catppuccin/lua/catppuccin/lib/mapper.lua	/^function M.apply(flavour)$/;"	f
M.assert_brightness	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^function M.assert_brightness(color)$/;"	f
M.blend	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^function M.blend(fg, bg, alpha)$/;"	f
M.brighten	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^function M.brighten(color, percentage)$/;"	f
M.color_is_bright	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^function M.color_is_bright(r, g, b)$/;"	f
M.compile	plugged/catppuccin/lua/catppuccin/init.lua	/^function M.compile()$/;"	f
M.compile	plugged/catppuccin/lua/catppuccin/lib/compiler.lua	/^function M.compile(flavour)$/;"	f
M.compile	plugged/catppuccin/lua/catppuccin/lib/vim/compiler.lua	/^function M.compile(flavour)$/;"	f
M.cursor	plugged/catppuccin/lua/catppuccin/utils/reactive.lua	/^function M.cursor(name, palette)$/;"	f
M.cursorline	plugged/catppuccin/lua/catppuccin/utils/reactive.lua	/^function M.cursorline(name, palette)$/;"	f
M.custom_colors	plugged/catppuccin/lua/catppuccin/groups/integrations/lsp_saga.lua	/^function M.custom_colors()$/;"	f
M.custom_kind	plugged/catppuccin/lua/catppuccin/groups/integrations/lsp_saga.lua	/^function M.custom_kind()$/;"	f
M.darken	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^function M.darken(hex, amount, bg) return M.blend(hex, bg or M.bg, math.abs(amount)) end$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/editor.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/NormalNvim.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/aerial.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/alpha.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/barbar.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/beacon.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/bufferline.lua	/^function M.get(user_config)$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/cmp.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/coc_nvim.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/dap.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/dap_ui.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/dashboard.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/dropbar.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/fern.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/fidget.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/flash.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/gitgutter.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/gitsigns.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/harpoon.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/headlines.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/hop.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/illuminate.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/indent_blankline.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/leap.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/lightspeed.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/lsp_saga.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/lsp_trouble.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/markdown.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/mason.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/mini.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/native_lsp.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/navic.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/neogit.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/neotest.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/neotree.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/noice.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/notifier.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/notify.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/nvimtree.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/octo.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/overseer.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/pounce.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/rainbow_delimiters.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/sandwich.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/semantic_tokens.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/symbols_outline.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/telekasten.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/telescope.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter_context.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/ts_rainbow.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/ts_rainbow2.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/vim_sneak.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/vimwiki.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/which_key.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/integrations/window_picker.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/syntax.lua	/^function M.get()$/;"	f
M.get	plugged/catppuccin/lua/catppuccin/groups/terminal.lua	/^function M.get()$/;"	f
M.get 	plugged/catppuccin/lua/catppuccin/groups/integrations/ufo.lua	/^M.get = function()$/;"	f
M.getHighlights	plugged/coc.nvim/lua/coc/highlight.lua	/^function M.getHighlights(bufnr, key, s, e)$/;"	f
M.get_palette	plugged/catppuccin/lua/catppuccin/palettes/init.lua	/^function M.get_palette(flavour)$/;"	f
M.hash	plugged/catppuccin/lua/catppuccin/lib/hashing.lua	/^function M.hash(v) -- Xor hashing: https:\/\/codeforces.com\/blog\/entry\/85900$/;"	f
M.hex2rgb	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^function M.hex2rgb(hex)$/;"	f
M.highlight	plugged/catppuccin/lua/catppuccin/lib/highlighter.lua	/^function M.highlight(group, color)$/;"	f
M.increase_saturation	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^function M.increase_saturation(hex, percentage)$/;"	f
M.invertColor	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^function M.invertColor(color)$/;"	f
M.lighten	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^function M.lighten(hex, amount, fg) return M.blend(hex, fg or M.fg, math.abs(amount)) end$/;"	f
M.load	plugged/catppuccin/lua/catppuccin/init.lua	/^function M.load(flavour)$/;"	f
M.set	plugged/coc.nvim/lua/coc/highlight.lua	/^function M.set(bufnr, ns, highlights, priority)$/;"	f
M.setup	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^function M.setup(opts)$/;"	f
M.setup	plugged/catppuccin/lua/catppuccin/init.lua	/^function M.setup(user_conf)$/;"	f
M.string_to_color	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^function M.string_to_color(colors, value, default)$/;"	f
M.syntax	plugged/catppuccin/lua/catppuccin/lib/highlighter.lua	/^function M.syntax(tbl)$/;"	f
M.vary_color	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^function M.vary_color(palettes, default)$/;"	f
Map	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
Map	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Map(mode, lhs, rhs, flags) abort$/;"	f
MapGitOps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MapGitOps(is_ftplugin) abort$/;"	f
MapKeys	plugged/tagbar/autoload/tagbar.vim	/^function! s:MapKeys() abort$/;"	f
MapMotion	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MapMotion(lhs, rhs) abort$/;"	f
MapStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MapStatus() abort$/;"	f
MenuController.New	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.isMinimal	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.isMinimal()$/;"	f
MenuController.showMenu	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
MergeHead	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeHead(dir) abort$/;"	f
MergeSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
MergetoolSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergetoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
MinimizeMaxFoldLevel	plugged/tagbar/autoload/tagbar.vim	/^function! s:MinimizeMaxFoldLevel(fileinfo, tags) abort$/;"	f
Mods	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Mods(mods, ...) abort$/;"	f
Move	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Move(force, rename, destination) abort$/;"	f
Multipart	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:Multipart() abort$/;"	f
NERDComment	plugged/nerdcommenter/plugin/nerdcommenter.vim	/^function! NERDComment(mode, type) range$/;"	f
NERDCommentIsCharCommented	plugged/nerdcommenter/plugin/nerdcommenter.vim	/^function! NERDCommentIsCharCommented(line, col)$/;"	f
NERDCommentIsLineCommented	plugged/nerdcommenter/plugin/nerdcommenter.vim	/^function! NERDCommentIsLineCommented(lineNo)$/;"	f
NERDTree	plugged/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree.AddPathFilter	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
NERDTree.Close	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
NERDTree.CursorToBookmarkTable	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
NERDTree.CursorToTreeWin	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin(...)$/;"	f
NERDTree.ExistsForBuf	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
NERDTree.ExistsForTab	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
NERDTree.ForCurrentBuf	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
NERDTree.ForCurrentTab	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
NERDTree.GetWinNum	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
NERDTree.IsOpen	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
NERDTree.MustBeOpen	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
NERDTree.New	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
NERDTree.PathFilters	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
NERDTree.changeRoot	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
NERDTree.getRoot	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
NERDTree.isTabTree	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
NERDTree.isWinTree	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
NERDTree.previousBuf	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
NERDTree.render	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
NERDTree.setPreviousBuf	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
NERDTreeAddKeyMap	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeCWD	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeChDirOnTabSwitch	plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeChDirOnTabSwitch$/;"	a
NERDTreeChangePermissions	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeChangePermissions()$/;"	f
NERDTreeCloseAllTabs	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeCloseAllTabs()$/;"	f
NERDTreeCopyNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeCopyPath	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyPath()$/;"	f
NERDTreeDeleteNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeExecuteFileLinux	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeExecuteFileWindows	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileWindows()$/;"	f
NERDTreeFindFile	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeFindFile()$/;"	f
NERDTreeFocus	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeFocus	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeFocus()$/;"	f
NERDTreeFocusToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeFocusToggle  call <SID>NERDTreeFocusToggle()$/;"	c
NERDTreeFocusToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeFocusToggle()$/;"	f
NERDTreeHijackNetrw	plugged/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeListNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMirrorOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeMirrorOpen   call <SID>NERDTreeMirrorOrCreate()$/;"	c
NERDTreeMirrorOrCreate	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeMirrorOrCreate()$/;"	f
NERDTreeMirrorToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeMirrorToggle call <SID>NERDTreeMirrorToggle()$/;"	c
NERDTreeMirrorToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeMirrorToggle()$/;"	f
NERDTreeMoveNode	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeOpenAllTabs	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeOpenAllTabs()$/;"	f
NERDTreeQuickLook	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRender	plugged/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRestoreFocus	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeRestoreFocus()$/;"	f
NERDTreeRevealFileLinux	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeRevealInExplorer	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInExplorer()$/;"	f
NERDTreeRevealInFinder	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeSteppedClose	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeSteppedClose call <SID>NERDTreeSteppedClose()$/;"	c
NERDTreeSteppedClose	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeSteppedClose()$/;"	f
NERDTreeSteppedOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeSteppedOpen  call <SID>NERDTreeSteppedOpen()$/;"	c
NERDTreeSteppedOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeSteppedOpen()$/;"	f
NERDTreeSystemCommand	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeSystemCommand()$/;"	f
NERDTreeTabsClose	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeTabsClose    call <SID>NERDTreeCloseAllTabs()$/;"	c
NERDTreeTabsFind	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeTabsFind     call <SID>NERDTreeFindFile()$/;"	c
NERDTreeTabsOpen	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeTabsOpen     call <SID>NERDTreeOpenAllTabs()$/;"	c
NERDTreeTabsToggle	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^command! NERDTreeTabsToggle   call <SID>NERDTreeToggleAllTabs()$/;"	c
NERDTreeToggleAllTabs	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeToggleAllTabs()$/;"	f
NERDTreeToggleVCS	plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeToggleVCS :call <SID>ToggleTabTreeVCS('<args>')$/;"	c
NERDTreeUnfocus	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NERDTreeUnfocus()$/;"	f
NERDTreeVCS	plugged/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeVCS :call <SID>CreateTabTreeVCS('<args>')$/;"	c
NEVER	plugged/vim-snippets/pythonx/javascript_snippets.py	/^NEVER = 'never'$/;"	v
NavigateUp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NavigateUp(count) abort$/;"	f
NerdEcho	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:NerdEcho(msg, typeOfMsg) abort$/;"	f
Nested	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:Nested() abort$/;"	f
NextExpandedHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextExpandedHunk(count) abort$/;"	f
NextFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextFile(count) abort$/;"	f
NextHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextHunk(count) abort$/;"	f
NextItem	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextItem(count) abort$/;"	f
NextNormalWindow	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:NextNormalWindow()$/;"	f
NextSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSection(count) abort$/;"	f
NextSectionEnd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSectionEnd(count) abort$/;"	f
Nfe.Hp	plugged/coc.nvim/build/index.js	/^`)},r.push(async()=>{let x=this.documents.getDocument(d);!x||!x.attached||x.version!==m||(await x.applyEdits([f]),c.version=x.version)})}}else qr.is(u)?await this.createFile(cC(u.uri),u.options,r):vr.is(u)?await this.deleteFile(cC(u.uri),u.options,r):Yr.is(u)&&await this.renameFile(cC(u.oldUri),cC(u.newUri),u.options,r);if(r.length===0)return!0;t||(this.editState={edit:{documentChanges:i,changeAnnotations:e.changeAnnotations},changes:a,recovers:r,applied:!0}),this.nvim.redrawVim()}catch(s){return yfe.error("Error on applyEdits:",e,s),t||this.window.showErrorMessage(`Error on applyEdits: ${s}`),await this.undoChanges(r),!1}return t||o||this.window.showInformationMessage("Use ':wa' to save changes or ':CocCommand workspace.inspectEdit' to inspect."),!0}async undoChanges(e){for(;e.length>0;){let t=e.pop();await Promise.resolve(t())}}async inspectEdit(){if(!this.editState){this.window.showWarningMessage("No workspace edit to inspect");return}await new Ep(this.nvim,this.keymaps).show(this.editState)}async undoWorkspaceEdit(){let{editState:e}=this;if(!e||!e.applied){this.window.showWarningMessage("No workspace edit to undo");return}e.applied=!1,await this.undoChanges(e.recovers)}async redoWorkspaceEdit(){let{editState:e}=this;if(!e||e.applied){this.window.showWarningMessage("No workspace edit to redo");return}this.editState=void 0,await this.applyEdit(e.edit)}validateChanges(e){let{documents:t}=this;for(let i of e)if(xi.is(i)){let{uri:r,version:o}=i.textDocument,s=t.getDocument(r);if(typeof o=="number"&&o>0){if(!s)throw A4(r);if(s.version!=o)throw new Error(`${r} changed before apply edit`)}else if(!s&&!Kg(r))throw Pv(r)}else if(qr.is(i)||vr.is(i)){if(!Kg(i.uri))throw Pv(i.uri)}else if(Yr.is(i)&&(!Kg(i.oldUri)||!Kg(i.newUri)))throw Pv(i.oldUri)}async findFiles(e,t,i,r){let o=this.workspaceFolderControl.workspaceFolders;if(r?.isCancellationRequested||!o.length||i===0)return[];i=i??1\/0;let s=o.map(h=>Y.parse(h.uri).fsPath),a;typeof e!="string"?(a=e.pattern,s=[e.baseUri.fsPath]):a=e;let l=[],u=!1,c=new AbortController;r&&r.onCancellationRequested(()=>{c.abort()});for(let h of s){let d=await Zy.glob(a,{signal:c.signal,dot:!0,cwd:h,nodir:!0,absolute:!1});if(r?.isCancellationRequested)break;for(let g of d)if(!(t&&vfe(h,g,t))&&(l.push(Y.file(E.join(h,g))),l.length===i)){u=!0;break}if(u)break}return l}async fireWaitUntilEvent(e,t,i){let r=!0,o=[];e.fire({...t,waitUntil:s=>{if(!r)throw H4("waitUntil");let a=new Promise(u=>{setTimeout(u,this.operationTimeout)}),l=Promise.race([s,a]).then(u=>{if(u&&Hl.is(u))return this.applyEdit(u,!0)});o.push(l)}}),r=!1,await Promise.all(o)}}});function Ip(){return hC>dC.length-16&&(OX.default.randomFillSync(dC),hC=0),dC.slice(hC,hC+=16)}var OX,dC,hC,vE=k(()=>{OX=co(require("crypto")),dC=new Uint8Array(256),hC=dC.length});function gC(n,e=0){return mn[n[e+0]]+mn[n[e+1]]+mn[n[e+2]]+mn[n[e+3]]+"-"+mn[n[e+4]]+mn[n[e+5]]+"-"+mn[n[e+6]]+mn[n[e+7]]+"-"+mn[n[e+8]]+mn[n[e+9]]+"-"+mn[n[e+10]]+mn[n[e+11]]+mn[n[e+12]]+mn[n[e+13]]+mn[n[e+14]]+mn[n[e+15]]}var mn,wE=k(()=>{mn=[];for(let n=0;n<256;++n)mn.push((n+256).toString(16).slice(1))});function wfe(n,e,t){let i=e&&t||0,r=e||new Array(16);n=n||{};let o=n.node||AX,s=n.clockseq!==void 0?n.clockseq:xE;if(o==null||s==null){let d=n.random||(n.rng||Ip)();o==null&&(o=AX=[d[0]|1,d[1],d[2],d[3],d[4],d[5]]),s==null&&(s=xE=(d[6]<<8|d[7])&16383)}let a=n.msecs!==void 0?n.msecs:Date.now(),l=n.nsecs!==void 0?n.nsecs:SE+1,u=a-CE+(l-SE)\/1e4;if(u<0&&n.clockseq===void 0&&(s=s+1&16383),(u<0||a>CE)&&n.nsecs===void 0&&(l=0),l>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids\/sec");CE=a,SE=l,xE=s,a+=122192928e5;let c=((a&268435455)*1e4+l)%4294967296;r[i++]=c>>>24&255,r[i++]=c>>>16&255,r[i++]=c>>>8&255,r[i++]=c&255;let h=a\/4294967296*1e4&268435455;r[i++]=h>>>8&255,r[i++]=h&255,r[i++]=h>>>24&15|16,r[i++]=h>>>16&255,r[i++]=s>>>8|128,r[i++]=s&255;for(let d=0;d<6;++d)r[i+d]=o[d];return e||gC(r)}var AX,xE,CE,SE,mu,NX=k(()=>{vE();wE();CE=0,SE=0;mu=wfe});var HX,DE,BX=k(()=>{HX=co(require("crypto")),DE={randomUUID:HX.default.randomUUID}});function xfe(n,e,t){if(DE.randomUUID&&!e&&!n)return DE.randomUUID();n=n||{};let i=n.random||(n.rng||Ip)();if(i[6]=i[6]&15|64,i[8]=i[8]&63|128,e){t=t||0;for(let r=0;r<16;++r)e[t+r]=i[r];return e}return gC(i)}var Te,WX=k(()=>{BX();vE();wE();Te=xfe});var gt=k(()=>{NX();WX()});var UX=v((NNe,YX)=>{var TE=4294967296,qX=[];for(Lh=0;Lh<256;Lh++)qX[Lh]=(Lh>15?"":"0")+Lh.toString(16);var Lh,Fp=YX.exports=function(n,e){n instanceof Buffer?(this.buffer=n,this.offset=e||0):Object.prototype.toString.call(n)=="[object Uint8Array]"?(this.buffer=new Buffer(n),this.offset=e||0):(this.buffer=this.buffer||new Buffer(8),this.offset=0,this.setValue.apply(this,arguments))};Fp.MAX_INT=Math.pow(2,53);Fp.MIN_INT=-Math.pow(2,53);Fp.prototype={constructor:Fp,_2scomp:function(){for(var n=this.buffer,e=this.offset,t=1,i=e+7;i>=e;i--){var r=(n[i]^255)+t;n[i]=r&255,t=r>>8}},setValue:function(n,e){var t=!1;if(arguments.length==1)if(typeof n=="number"){if(t=n<0,n=Math.abs(n),e=n%TE,n=n\/TE,n>TE)throw new RangeError(n+" is outside Int64 range");n=n|0}else if(typeof n=="string")n=(n+"").replace(\/^0x\/,""),e=n.substr(-8),n=n.length>8?n.substr(0,n.length-8):"",n=parseInt(n,16),e=parseInt(e,16);else throw new Error(n+" must be a Number or String");for(var i=this.buffer,r=this.offset,o=7;o>=0;o--)i[r+o]=e&255,e=o==4?n:e>>>8;t&&this._2scomp()},toNumber:function(n){for(var e=this.buffer,t=this.offset,i=e[t]&128,r=0,o=1,s=7,a=1;s>=0;s--,a*=256){var l=e[t+s];i&&(l=(l^255)+o,o=l>>8,l=l&255),r+=l*a}return!n&&r>=Fp.MAX_INT?i?-1\/0:1\/0:i?-r:r},valueOf:function(){return this.toNumber(!1)},toString:function(n){return this.valueOf().toString(n||10)},toOctetString:function(n){for(var e=new Array(8),t=this.buffer,i=this.offset,r=0;r<8;r++)e[r]=qX[t[i+r]];return e.join(n||"")},toBuffer:function(n){if(n&&this.offset===0)return this.buffer;var e=new Buffer(8);return this.buffer.copy(e,0,this.offset,this.offset+8),e},copy:function(n,e){this.buffer.copy(n,e||0,this.offset,this.offset+8)},compare:function(n){if((this.buffer[this.offset]&128)!=(n.buffer[n.offset]&128))return n.buffer[n.offset]-this.buffer[this.offset];for(var e=0;e<8;e++)if(this.buffer[this.offset+e]!==n.buffer[n.offset+e])return this.buffer[this.offset+e]-n.buffer[n.offset+e];return 0},equals:function(n){return this.compare(n)===0},inspect:function(){return"[Int64 value:"+this+" octets:"+this.toOctetString(" ")+"]"}}});var tG=v(jp=>{var JX=require("events").EventEmitter,Cfe=require("util"),Sfe=require("os"),HNe=require("assert"),Mp=UX(),Xa=Sfe.endianness()=="BE";function $X(n){return Math.pow(2,Math.ceil(Math.log(n)\/Math.LN2))}function tn(n){this.buf=Buffer.alloc($X(n||8192)),this.readOffset=0,this.writeOffset=0}jp.Accumulator=tn;tn.prototype.writeAvail=function(){return this.buf.length-this.writeOffset};tn.prototype.readAvail=function(){return this.writeOffset-this.readOffset};tn.prototype.reserve=function(n){if(!(n<this.writeAvail())&&(this.readOffset>0&&(this.buf.copy(this.buf,0,this.readOffset,this.writeOffset),this.writeOffset-=this.readOffset,this.readOffset=0),!(n<this.writeAvail()))){var e=Buffer.alloc($X(this.buf.length+n-this.writeAvail()));this.buf.copy(e),this.buf=e}};tn.prototype.append=function(n){if(Buffer.isBuffer(n))this.reserve(n.length),n.copy(this.buf,this.writeOffset,0,n.length),this.writeOffset+=n.length;else{var e=Buffer.byteLength(n);this.reserve(e),this.buf.write(n,this.writeOffset),this.writeOffset+=e}};tn.prototype.assertReadableSize=function(n){if(this.readAvail()<n)throw new Error("wanted to read "+n+" bytes but only have "+this.readAvail())};tn.prototype.peekString=function(n){return this.assertReadableSize(n),this.buf.toString("utf-8",this.readOffset,this.readOffset+n)};tn.prototype.readString=function(n){var e=this.peekString(n);return this.readOffset+=n,e};tn.prototype.peekInt=function(n){switch(this.assertReadableSize(n),n){case 1:return this.buf.readInt8(this.readOffset,n);case 2:return Xa?this.buf.readInt16BE(this.readOffset,n):this.buf.readInt16LE(this.readOffset,n);case 4:return Xa?this.buf.readInt32BE(this.readOffset,n):this.buf.readInt32LE(this.readOffset,n);case 8:var e=this.buf.slice(this.readOffset,this.readOffset+8);return Xa?new Mp(e):new Mp(VX(e));default:throw new Error("invalid integer size "+n)}};tn.prototype.readInt=function(n){var e=this.peekInt(n);return e instanceof Mp&&isFinite(e.valueOf())&&(e=e.valueOf()),this.readOffset+=n,e};tn.prototype.peekDouble=function(){return this.assertReadableSize(8),Xa?this.buf.readDoubleBE(this.readOffset):this.buf.readDoubleLE(this.readOffset)};tn.prototype.readDouble=function(){var n=this.peekDouble();return this.readOffset+=8,n};tn.prototype.readAdvance=function(n){if(n>0)this.assertReadableSize(n);else if(n<0&&this.readOffset+n<0)throw new Error("advance with negative offset "+n+" would seek off the start of the buffer");this.readOffset+=n};tn.prototype.writeByte=function(n){this.reserve(1),this.buf.writeInt8(n,this.writeOffset),++this.writeOffset};tn.prototype.writeInt=function(n,e){switch(this.reserve(e),e){case 1:this.buf.writeInt8(n,this.writeOffset);break;case 2:Xa?this.buf.writeInt16BE(n,this.writeOffset):this.buf.writeInt16LE(n,this.writeOffset);break;case 4:Xa?this.buf.writeInt32BE(n,this.writeOffset):this.buf.writeInt32LE(n,this.writeOffset);break;default:throw new Error("unsupported integer size "+e)}this.writeOffset+=e};tn.prototype.writeDouble=function(n){this.reserve(8),Xa?this.buf.writeDoubleBE(n,this.writeOffset):this.buf.writeDoubleLE(n,this.writeOffset),this.writeOffset+=8};var PE=0,_E=1,RE=2,EE=3,LE=4,bC=5,mC=6,XX=7,GX=8,zX=9,KX=10,QX=11,Dfe=12,kE=0,ZX=1,Tfe=127,kfe=32767,Pfe=2147483647;function sr(){JX.call(this),this.buf=new tn,this.state=kE}Cfe.inherits(sr,JX);jp.BunserBuf=sr;sr.prototype.append=function(n,e){if(e)return this.buf.append(n),this.process(e);try{this.buf.append(n)}catch(t){this.emit("error",t);return}this.processLater()};sr.prototype.processLater=function(){var n=this;process.nextTick(function(){try{n.process(!1)}catch(e){n.emit("error",e)}})};sr.prototype.process=function(n){if(this.state==kE){if(this.buf.readAvail()<2)return;if(this.expectCode(0),this.expectCode(1),this.pduLen=this.decodeInt(!0),this.pduLen===!1){this.buf.readAdvance(-2);return}this.buf.reserve(this.pduLen),this.state=ZX}if(this.state==ZX){if(this.buf.readAvail()<this.pduLen)return;var e=this.decodeAny();if(n)return e;this.emit("value",e),this.state=kE}!n&&this.buf.readAvail()>0&&this.processLater()};sr.prototype.raise=function(n){throw new Error(n+", in Buffer of length "+this.buf.buf.length+" ("+this.buf.readAvail()+" readable) at offset "+this.buf.readOffset+" buffer: "+JSON.stringify(this.buf.buf.slice(this.buf.readOffset,this.buf.readOffset+32).toJSON()))};sr.prototype.expectCode=function(n){var e=this.buf.readInt(1);e!=n&&this.raise("expected bser opcode "+n+" but got "+e)};sr.prototype.decodeAny=function(){var n=this.buf.peekInt(1);switch(n){case EE:case LE:case bC:case mC:return this.decodeInt();case XX:return this.buf.readAdvance(1),this.buf.readDouble();case GX:return this.buf.readAdvance(1),!0;case zX:return this.buf.readAdvance(1),!1;case KX:return this.buf.readAdvance(1),null;case RE:return this.decodeString();case PE:return this.decodeArray();case _E:return this.decodeObject();case QX:return this.decodeTemplate();default:this.raise("unhandled bser opcode "+n)}};sr.prototype.decodeArray=function(){this.expectCode(PE);for(var n=this.decodeInt(),e=[],t=0;t<n;++t)e.push(this.decodeAny());return e};sr.prototype.decodeObject=function(){this.expectCode(_E);for(var n=this.decodeInt(),e={},t=0;t<n;++t){var i=this.decodeString(),r=this.decodeAny();e[i]=r}return e};sr.prototype.decodeTemplate=function(){this.expectCode(QX);for(var n=this.decodeArray(),e=this.decodeInt(),t=[],i=0;i<e;++i){for(var r={},o=0;o<n.length;++o){if(this.buf.peekInt(1)==Dfe){this.buf.readAdvance(1);continue}var s=this.decodeAny();r[n[o]]=s}t.push(r)}return t};sr.prototype.decodeString=function(){this.expectCode(RE);var n=this.decodeInt();return this.buf.readString(n)};sr.prototype.decodeInt=function(n){if(n&&this.buf.readAvail()<1)return!1;this.buf.assertReadableSize(1);var e=this.buf.peekInt(1),t=0;switch(e){case EE:t=1;break;case LE:t=2;break;case bC:t=4;break;case mC:t=8;break;default:this.raise("invalid bser int encoding "+e)}return n&&this.buf.readAvail()<1+t?!1:(this.buf.readAdvance(1),this.buf.readInt(t))};function _fe(n){var e=new sr,t=e.append(n,!0);if(e.buf.readAvail())throw Error("excess data found after input buffer, use BunserBuf instead");if(typeof t>"u")throw Error("no bser found in string and no error raised!?");return t}jp.loadFromBuffer=_fe;function VX(n){for(var e=Buffer.alloc(n.length),t=0;t<n.length;t++)e[t]=n[n.length-1-t];return e}function eG(n,e){var t=e.toBuffer();if(Xa){n.writeByte(mC),n.append(t);return}var i=VX(t);n.writeByte(mC),n.append(i)}function pC(n,e){var t=Math.abs(e);t<=Tfe?(n.writeByte(EE),n.writeInt(e,1)):t<=kfe?(n.writeByte(LE),n.writeInt(e,2)):t<=Pfe?(n.writeByte(bC),n.writeInt(e,4)):eG(n,new Mp(e))}function fC(n,e){switch(typeof e){case"number":isFinite(e)&&Math.floor(e)===e?pC(n,e):(n.writeByte(XX),n.writeDouble(e));return;case"string":n.writeByte(RE),pC(n,Buffer.byteLength(e)),n.append(e);return;case"boolean":n.writeByte(e?GX:zX);return;case"object":if(e===null){n.writeByte(KX);return}if(e instanceof Mp){eG(n,e);return}if(Array.isArray(e)){n.writeByte(PE),pC(n,e.length);for(var t=0;t<e.length;++t)fC(n,e[t]);return}n.writeByte(_E);for(var i=Object.keys(e),r=i.length,t=0;t<i.length;++t){var o=i[t],s=e[o];typeof s>"u"&&r--}pC(n,r);for(var t=0;t<i.length;++t){var o=i[t],s=e[o];if(!(typeof s>"u")){fC(n,o);try{fC(n,s)}catch(c){throw new Error(c.message+" (while serializing object property with name `"+o+"')")}}}return;default:throw new Error("cannot serialize type "+typeof e+" to BSER")}}function Rfe(n){var e=new tn;e.writeByte(0),e.writeByte(1),e.writeByte(bC),e.writeInt(0,4),fC(e,n);var t=e.writeOffset,i=t-7;return e.writeOffset=3,e.writeInt(i,4),e.writeOffset=t,e.buf.slice(0,t)}jp.dumpToBuffer=Rfe});var lG=v((WNe,aG)=>{"use strict";var Efe=require("net"),oG=require("events").EventEmitter,Lfe=require("util"),Ife=require("child_process"),sG=tG(),iG=["subscription","log"];function Hs(n){var e=this;oG.call(this),this.watchmanBinaryPath="watchman",n&&n.watchmanBinaryPath&&(this.watchmanBinaryPath=n.watchmanBinaryPath.trim()),this.commands=[]}Lfe.inherits(Hs,oG);aG.exports.Client=Hs;Hs.prototype.sendNextCommand=function(){this.currentCommand||(this.currentCommand=this.commands.shift(),this.currentCommand&&this.socket.write(sG.dumpToBuffer(this.currentCommand.cmd)))};Hs.prototype.cancelCommands=function(n){var e=new Error(n),t=this.commands;this.commands=[],this.currentCommand&&(t.unshift(this.currentCommand),this.currentCommand=null),t.forEach(function(i){i.cb(e)})};Hs.prototype.connect=function(){var n=this;function e(l){n.bunser=new sG.BunserBuf,n.bunser.on("value",function(u){for(var c=!1,h=0;h<iG.length;h++){var d=iG[h];d in u&&(c=d)}if(c)n.emit(c,u);else if(n.currentCommand){var g=n.currentCommand;if(n.currentCommand=null,"error"in u){var f=new Error(u.error);f.watchmanResponse=u,g.cb(f)}else g.cb(null,u)}n.sendNextCommand()}),n.bunser.on("error",function(u){n.emit("error",u)}),n.socket=Efe.createConnection(l),n.socket.on("connect",function(){n.connecting=!1,n.emit("connect"),n.sendNextCommand()}),n.socket.on("error",function(u){n.connecting=!1,n.emit("error",u)}),n.socket.on("data",function(u){n.bunser&&n.bunser.append(u)}),n.socket.on("end",function(){n.socket=null,n.bunser=null,n.cancelCommands("The watchman connection was closed"),n.emit("end")})}if(process.env.WATCHMAN_SOCK){e(process.env.WATCHMAN_SOCK);return}var t=["--no-pretty","get-sockname"],i=null,r=!1;function o(l){r||(r=!0,l.code==="EACCES"||l.errno==="EACCES"?l.message="The Watchman CLI is installed but cannot be spawned because of a permission problem":(l.code==="ENOENT"||l.errno==="ENOENT")&&(l.message="Watchman was not found in PATH.  See https:\/\/facebook.github.io\/watchman\/docs\/install.html for installation instructions"),console.error("Watchman: ",l.message),n.emit("error",l))}try{i=Ife.spawn(this.watchmanBinaryPath,t,{stdio:["ignore","pipe","pipe"],windowsHide:!0})}catch(l){o(l);return}var s=[],a=[];i.stdout.on("data",function(l){s.push(l)}),i.stderr.on("data",function(l){l=l.toString("utf8"),a.push(l),console.error(l)}),i.on("error",function(l){o(l)}),i.on("close",function(l,u){if(l!==0){o(new Error(n.watchmanBinaryPath+" "+t.join(" ")+" returned with exit code="+l+", signal="+u+", stderr= "+a.join("")));return}try{var c=JSON.parse(s.join(""));if("error"in c){var h=new Error(c.error);h.watchmanResponse=c,n.emit("error",h);return}e(c.sockname)}catch(d){n.emit("error",d)}})};Hs.prototype.command=function(n,e){if(e=e||function(){},this.commands.push({cmd:n,cb:e}),!this.socket){if(!this.connecting){this.connecting=!0,this.connect();return}return}this.sendNextCommand()};var nG={"cmd-watch-del-all":"3.1.1","cmd-watch-project":"3.1",relative_root:"3.3","term-dirname":"3.1","term-idirname":"3.1",wildmatch:"3.7"};function Ffe(n,e){n=n.split("."),e=e.split(".");for(var t=0;t<3;t++){var i=parseInt(n[t]||"0")-parseInt(e[t]||"0");if(i!=0)return i}return 0}function rG(n,e){return e in nG?Ffe(n,nG[e])>=0:!1}Hs.prototype._synthesizeCapabilityCheck=function(n,e,t){n.capabilities={};var i=n.version;return e.forEach(function(r){n.capabilities[r]=rG(i,r)}),t.forEach(function(r){var o=rG(i,r);n.capabilities[r]=o,o||(n.error="client required capability `"+r+"` is not supported by this server")}),n};Hs.prototype.capabilityCheck=function(n,e){var t=n.optional||[],i=n.required||[],r=this;this.command(["version",{optional:t,required:i}],function(o,s){if(o){e(o);return}if(!("capabilities"in s)&&(s=r._synthesizeCapabilityCheck(s,t,i),s.error)){o=new Error(s.error),o.watchmanResponse=s,e(o);return}e(null,s)})};Hs.prototype.end=function(){this.cancelCommands("The client was ended"),this.socket&&(this.socket.end(),this.socket=null),this.bunser=null}});function jfe(n){return!(n=="\/"||n=="\/tmp"||n=="\/private\/tmp"||n==Bt.tmpdir()||St(n,Bt.homedir(),!0)||E.parse(n).base==n)}var IE,Mfe,bu,FE=k(()=>{"use strict";gt();Ee();pt();fe();IE=te("core-watchman"),Mfe=["relative_root","cmd-watch-project","wildmatch","field-new"],bu=class n{constructor(e,t){this.channel=t;this._disposed=!1;let i=lG();this.client=new i.Client({watchmanBinaryPath:e}),this.client.setMaxListeners(300)}checkCapability(){let{client:e}=this;return new Promise((t,i)=>{e.capabilityCheck({optional:[],required:Mfe},(r,o)=>{if(r)return t(!1);let{capabilities:s}=o;for(let a of Object.keys(s))if(!s[a])return t(!1);t(!0)})})}async watchProject(e){let t=await this.command(["watch-project",e]),{watch:i,warning:r,relative_path:o}=t;return i?(r&&IE.warn(r),this.watch=i,this.relative_path=o,IE.info(`watchman watching project: ${e}`),this.appendOutput(`watchman watching project: ${e}`),!0):!1}command(e){return new Promise((t,i)=>{this.client.command(e,(r,o)=>{if(r)return i(r);t(o)})})}async subscribe(e,t){let{watch:i,relative_path:r}=this;if(!i)throw new Error("watchman not watching");let{clock:o}=await this.command(["clock",i]),s=mu(),a={expression:["allof",["match","**\/*","wholename"]],fields:["name","size","new","exists","type","mtime_ms","ctime_ms"],since:o},l=i;if(r&&(a.relative_root=r,l=E.join(i,r)),!this.client)return;let{subscribe:u}=await this.command(["subscribe",i,s,a]);return this.appendOutput(`subscribing "${e}" in ${l}`),this.client.on("subscription",c=>{if(!c||c.subscription!=s)return;let{files:h}=c;if(!h||(h=h.filter(g=>g.type=="f"&&wi(g.name,e,{dot:!0})),!h.length))return;let d=Object.assign({},c);this.relative_path&&(d.root=E.resolve(c.root,this.relative_path)),this.appendOutput(`file change detected: ${JSON.stringify(d,null,2)}`),t(d)}),{dispose:()=>{this.unsubscribe(u)},subscribe:u}}unsubscribe(e){if(this._disposed)return Promise.resolve();let{watch:t}=this;if(t)return this.appendOutput(`unsubscribe "${e}" in: ${t}`),this.command(["unsubscribe",t,e]).catch(i=>{i.message?.includes("The client was ended")&&IE.error(i)})}dispose(){this._disposed||(this._disposed=!0,this.client&&(this.client.end(),this.client=void 0))}appendOutput(e,t="Info"){this.channel&&this.channel.appendLine(`[${t}  - ${new Date().toLocaleTimeString()}] ${e}`)}static async createClient(e,t,i){if(!jfe(t))throw new Error(`Watch for ${t} is ignored`);let r;try{if(r=new n(e,i),!await r.checkCapability())throw new Error("required capabilities do not exist.");if(!await r.watchProject(t))throw new Error("unable to watch");return r}catch(o){throw r&&r.dispose(),o}}}});var Ofe,Op,ME,uG=k(()=>{"use strict";$e();Ee();se();Le();pt();fe();ie();FE();Ofe=te("fileSystemWatcher"),Op=class n{constructor(e,t){this.workspaceFolder=e;this.watchmanPath=t;this.clientsMap=new Map;this.disposables=[];this.creating=new Set;this._onDidCreateClient=new p.Emitter;this.disabled=!1;this.onDidCreateClient=this._onDidCreateClient.event}static{this.watchers=new Set}attach(e){this.channel=e;let t=i=>{let r=Y.parse(i.uri).fsPath;this.createClient(r)};this.workspaceFolder.workspaceFolders.forEach(i=>{t(i)}),this.workspaceFolder.onDidChangeWorkspaceFolders(i=>{i.added.forEach(r=>{t(r)}),i.removed.forEach(r=>{let o=Y.parse(r.uri).fsPath,s=this.clientsMap.get(o);s&&(this.clientsMap.delete(o),s.dispose())})},null,this.disposables)}waitClient(e){return this.clientsMap.has(e)?Promise.resolve():new Promise(t=>{let i=this.onDidCreateClient(r=>{r==e&&(i.dispose(),t())})})}async createClient(e){if(!(this.watchmanPath==null||this.has(e)||this.disabled))try{let t=await this.getWatchmanPath();this.creating.add(e);let i=await bu.createClient(t,e,this.channel);this.creating.delete(e),this.clientsMap.set(e,i);for(let r of n.watchers)r.listen(e,i);this._onDidCreateClient.fire(e)}catch(t){this.creating.delete(e),this.channel&&this.channel.appendLine(`Error on create watchman client: ${t}`)}}async getWatchmanPath(){let e=this.watchmanPath;return process.env.WATCHMAN_SOCK||(e=await Wo(this.watchmanPath,{all:!1})),e}has(e){let t=Array.from(this.clientsMap.keys());return t.push(...this.creating),t.some(i=>Di(i,e))}createFileSystemWatcher(e,t,i,r){let o=new ME(e,t,i,r),s=typeof e=="string"?void 0:e.baseUri.fsPath;for(let[a,l]of this.clientsMap.entries())s&&St(a,s,!0)&&(s=void 0),o.listen(a,l);return s&&this.createClient(s),n.watchers.add(o),o}dispose(){this._onDidCreateClient.dispose();for(let e of this.clientsMap.values())e&&e.dispose();this.clientsMap.clear(),n.watchers.clear(),z(this.disposables)}},ME=class{constructor(e,t,i,r){this.globPattern=e;this.ignoreCreateEvents=t;this.ignoreChangeEvents=i;this.ignoreDeleteEvents=r;this._onDidCreate=new p.Emitter;this._onDidChange=new p.Emitter;this._onDidDelete=new p.Emitter;this._onDidRename=new p.Emitter;this.disposables=[];this._disposed=!1;this.onDidCreate=this._onDidCreate.event;this.onDidChange=this._onDidChange.event;this.onDidDelete=this._onDidDelete.event;this.onDidRename=this._onDidRename.event;this._onDidListen=new p.Emitter;this.onDidListen=this._onDidListen.event}listen(e,t){let{globPattern:i,ignoreCreateEvents:r,ignoreChangeEvents:o,ignoreDeleteEvents:s}=this,a,l;if(typeof i=="string")a=i;else if(a=i.pattern,l=i.baseUri.fsPath,!St(e,l,!0))return;let u=c=>{let{root:h,files:d}=c;l&&!Di(h,l)?d=d.filter(g=>{if(g.type!="f")return!1;let f=E.join(h,g.name);return St(l,f)?wi(E.relative(l,f),a,{dot:!0}):!1}):d=d.filter(g=>g.type=="f"&&wi(g.name,a,{dot:!0}));for(let g of d){let f=Y.file(E.join(h,g.name));g.exists?g.new===!0?r||this._onDidCreate.fire(f):o||this._onDidChange.fire(f):s||this._onDidDelete.fire(f)}if(d.length==2&&d[0].exists!==d[1].exists){let g=d.find(m=>m.exists!==!0),f=d.find(m=>m.exists===!0);g.size==f.size&&this._onDidRename.fire({oldUri:Y.file(E.join(h,g.name)),newUri:Y.file(E.join(h,f.name))})}if(d.length>2&&d.length%2==0){let[g,f]=Gw(d,m=>m.exists===!1);if(g.length==f.length)for(let m of g){let b=f.find(w=>w.size==m.size&&w.mtime_ms==m.mtime_ms);b&&this._onDidRename.fire({oldUri:Y.file(E.join(h,m.name)),newUri:Y.file(E.join(h,b.name))})}}};t.subscribe(a,u).then(c=>{if(c){if(this._onDidListen.fire(),this.subscribe=c.subscribe,this._disposed)return c.dispose();this.disposables.push(c)}},c=>{c instanceof Error&&c.message.includes("client was ended")||Ofe.error(`Error on subscribe ${a}`,c)})}dispose(){this._disposed=!0,Op.watchers.delete(this),this._onDidRename.dispose(),this._onDidCreate.dispose(),this._onDidChange.dispose(),z(this.disposables)}}});function cG(n){return n=="n"||n=="o"||n=="x"||n=="v"?"<C-U>":n=="i"?"<C-o>":n=="s"?"<Esc>":""}function Nfe(n){return typeof n=="number"?n:F.bufnr}var Afe,Ap,hG=k(()=>{"use strict";je();Ee();ie();Ce();Afe=te("core-keymaps");Ap=class{constructor(){this.keymaps=new Map}attach(e){this.nvim=e}async doKeymap(e,t){let i=this.keymaps.get(e)??this.keymaps.get("coc-"+e);if(!i)return Afe.error(`keymap for ${e} not found`),t;let[r,o]=i,s=await Promise.resolve(r());return o&&await this.nvim.command(`silent! call repeat#set("\\\\<Plug>(coc-${e})", -1)`),s??t}registerKeymap(e,t,i,r={}){if(!t)throw new Error(`Invalid key ${t} of registerKeymap`);let o=`coc-${t}`;if(this.keymaps.has(o))throw new Error(`${t} already exists.`);let s=`<Plug>(${o})`;r=Object.assign({sync:!0,cancel:!0,silent:!0,repeat:!1},r);let{nvim:a}=this;this.keymaps.set(o,[i,!!r.repeat]);let l=r.sync?"request":"notify",u=r.cancel?1:0;for(let c of e)c=="i"?a.setKeymap(c,s,`coc#_insert_key('${l}', '${o}', ${u})`,{expr:!0,noremap:!0,silent:r.silent}):a.setKeymap(c,s,`:${cG(c)}call coc#rpc#${l}('doKeymap', ['${o}'])<cr>`,{noremap:!0,silent:r.silent});return p.Disposable.create(()=>{this.keymaps.delete(o);for(let c of e)a.deleteKeymap(c,s)})}registerExprKeymap(e,t,i,r=!1,o=!0){let s=Nfe(r),a=`${e}-${b_(t)}${r?`-${s}`:""}`,{nvim:l}=this,u;e=="i"?u=`coc#_insert_key('request', '${a}', ${o?"1":"0"})`:u=`coc#rpc#request('doKeymap', ['${a}'])`;let c={noremap:!0,silent:!0,expr:!0,nowait:!0};return r?l.createBuffer(s).setKeymap(e,t,u,c):l.setKeymap(e,t,u,c),this.keymaps.set(a,[i,!1]),p.Disposable.create(()=>{this.keymaps.delete(a),r?l.createBuffer(s).deleteKeymap(e,t):l.deleteKeymap(e,t)})}registerLocalKeymap(e,t,i,r,o){let{nvim:s}=this,a=s.createBuffer(e),l=`local-${e}-${t}-${b_(i)}`;this.keymaps.set(l,[r,!1]);let u=o?"notify":"request",c=cG(t);return a.setKeymap(t,i,`:${c}call coc#rpc#${u}('doKeymap', ['${l}'])<CR>`,{silent:!0,nowait:!0,noremap:!0}),p.Disposable.create(()=>{this.keymaps.delete(l),a.deleteKeymap(t,i)})}}});var dG,Np,gG=k(()=>{"use strict";je();Ee();se();ie();Ce();dG=te("watchers"),Np=class{constructor(){this.optionCallbacks=new Map;this.globalCallbacks=new Map;this.disposables=[];this._onDidRuntimePathChange=new p.Emitter;this.onDidRuntimePathChange=this._onDidRuntimePathChange.event;F.on("OptionSet",async(e,t,i)=>{let r=Array.from(this.optionCallbacks.get(e)??[]);await Promise.allSettled(r.map(o=>(async()=>{try{await Promise.resolve(o(t,i))}catch(s){this.nvim.errWriteLine(`Error on OptionSet '${e}': ${Jr(s)}`),dG.error("Error on OptionSet callback:",s)}})()))},null,this.disposables),F.on("GlobalChange",async(e,t,i)=>{let r=Array.from(this.globalCallbacks.get(e)??[]);await Promise.allSettled(r.map(o=>(async()=>{try{await Promise.resolve(o(t,i))}catch(s){this.nvim.errWriteLine(`Error on GlobalChange '${e}': ${Jr(s)}`),dG.error("Error on GlobalChange callback:",s)}})()))},null,this.disposables)}get options(){return Array.from(this.optionCallbacks.keys())}attach(e,t){this.nvim=e,this.env=t,this.watchOption("runtimepath",(i,r)=>{let o=i.split(","),a=r.split(",").filter(l=>!o.includes(l));a.length>0&&this._onDidRuntimePathChange.fire(a),this.env.runtimepath=r},this.disposables)}watchOption(e,t,i){let r=this.optionCallbacks.get(e);r||(r=new Set,this.optionCallbacks.set(e,r)),r.add(t);let o=`autocmd! coc_dynamic_option OptionSet ${e} call coc#rpc#notify('OptionSet',[expand('<amatch>'), v:option_old, v:option_new])`;this.nvim.command(o,!0);let s=p.Disposable.create(()=>{let a=this.optionCallbacks.get(e);a.delete(t),a.size===0&&this.nvim.command(`autocmd! coc_dynamic_option OptionSet ${e}`,!0)});return i&&i.push(s),s}watchGlobal(e,t,i){let{nvim:r}=this,o=this.globalCallbacks.get(e);o||(o=new Set,this.globalCallbacks.set(e,o)),o.add(t),r.call("coc#_watch",e,!0);let s=p.Disposable.create(()=>{let a=this.globalCallbacks.get(e);a.delete(t),a.size===0&&r.call("coc#_unwatch",e,!0)});return i&&i.push(s),s}dispose(){z(this.disposables),this._onDidRuntimePathChange.dispose()}}});function Hp(n){if(!(!n||!E.isAbsolute(n)))return{name:E.basename(n),uri:Y.file(n).toString()}}var yC,Hfe,Bfe,Wfe,qfe,Bp,vC=k(()=>{"use strict";$e();je();Ee();se();Le();qi();Is();pt();fe();Ye();ie();Xo();yC=(i=>(i[i.Buffer=0]="Buffer",i[i.LanguageServer=1]="LanguageServer",i[i.Global=2]="Global",i))(yC||{}),Hfe=te("core-workspaceFolder"),Bfe=[0,1,2],Wfe=ve(5e3,50);qfe=Pi.as(Ls.ExtensionContribution),Bp=class{constructor(e){this.configurations=e;this._onDidChangeWorkspaceFolders=new p.Emitter;this.onDidChangeWorkspaceFolders=this._onDidChangeWorkspaceFolders.event;this.rootPatterns=new Map;this._workspaceFolders=[];this._tokenSources=new Set;F.on("VimLeavePre",this.cancelAll,this),this.updateConfiguration(!0),this.configurations.onDidChange(t=>{(t.affectsConfiguration("workspace")||t.affectsConfiguration("coc.preferences"))&&this.updateConfiguration(!1)})}updateConfiguration(e){let t=this.configurations.initialConfiguration,i=t.get("workspace"),r=t.get("coc.preferences.rootPatterns");if(this.config={rootPatterns:le(r)?pe(i.rootPatterns):r,ignoredFiletypes:pe(i.ignoredFiletypes),bottomUpFiletypes:pe(i.bottomUpFiletypes),ignoredFolders:pe(i.ignoredFolders),workspaceFolderCheckCwd:!!i.workspaceFolderCheckCwd,workspaceFolderFallbackCwd:!!i.workspaceFolderFallbackCwd},e){let o=t.get("languageserver",{});this.addServerRootPatterns(o)}}addServerRootPatterns(e){for(let t of Object.keys(Ke(e))){let i=e[t],{filetypes:r,rootPatterns:o}=i;Array.isArray(r)&&!le(o)&&r.filter(s=>typeof s=="string").forEach(s=>{this.addRootPattern(s,o)})}}cancelAll(){for(let e of this._tokenSources)e.cancel()}setWorkspaceFolders(e){if(!e||!Array.isArray(e))return;let t=e.map(i=>Hp(i));this._workspaceFolders=t.filter(i=>i!=null)}getWorkspaceFolder(e){if(e.scheme!=="file")return;let t=Array.from(this._workspaceFolders).map(o=>Y.parse(o.uri).fsPath);t.sort((o,s)=>s.length-o.length);let i=e.fsPath,r=t.find(o=>St(o,i,!0));return Hp(r)}getRelativePath(e,t){let i,r="";if(typeof e=="string"?(i=Y.file(e),r=e):typeof e<"u"&&(i=e,r=e.fsPath),!i)return r;let o=this.getWorkspaceFolder(i);if(!o)return r;typeof t>"u"&&this._workspaceFolders&&(t=this._workspaceFolders.length>1);let s=E.relative(Y.parse(o.uri).fsPath,i.fsPath);return s=s==""?i.fsPath:s,t&&o.name&&(s=`${o.name}\/${s}`),s}get workspaceFolders(){return this._workspaceFolders}addRootPattern(e,t){let i=this.rootPatterns.get(e)??[];for(let r of t)i.includes(r)||i.push(r);this.rootPatterns.set(e,i)}resolveRoot(e,t,i,r){if(e.buftype!==""||e.schema!=="file")return null;let o=Y.parse(e.uri),s=La(o.fsPath)?E.normalize(o.fsPath):E.dirname(o.fsPath),{ignoredFiletypes:a,ignoredFolders:l,workspaceFolderCheckCwd:u,workspaceFolderFallbackCwd:c,bottomUpFiletypes:h}=this.config;if(a?.includes(e.filetype))return null;l=Array.isArray(l)?l.filter(g=>g&&g.length>0).map(g=>r(g)):[];let d=null;for(let g of Bfe){let f=this.getRootPatterns(e,g);if(f&&f.length){let m=h.includes("*")||h.includes(e.filetype),b=Xg(s,f,t,m,u,l);if(b){d=b;break}}}return!d&&c&&!$g(t,l)&&St(t,s,!0)&&(d=t),d&&this.addWorkspaceFolder(d,i),d}addWorkspaceFolder(e,t){let i=Hp(e);if(i)return this._workspaceFolders.findIndex(r=>r.uri==i.uri)==-1&&(this._workspaceFolders.push(i),t&&this._onDidChangeWorkspaceFolders.fire({added:[i],removed:[]})),i}renameWorkspaceFolder(e,t){let i=Hp(t);if(!i)return;let r=this._workspaceFolders.findIndex(s=>Y.parse(s.uri).fsPath==e);if(r==-1)return;let o=this.workspaceFolders[r];this._workspaceFolders.splice(r,1,i),this._onDidChangeWorkspaceFolders.fire({removed:[o],added:[i]})}removeWorkspaceFolder(e){let t=Hp(e);if(!t)return;let i=this._workspaceFolders.findIndex(r=>r.uri==t.uri);i!=-1&&(this._workspaceFolders.splice(i,1),this._onDidChangeWorkspaceFolders.fire({removed:[t],added:[]}))}getRootPatterns(e,t){return t==0?e.getVar("root_patterns",[])||[]:t==1?this.getServerRootPatterns(e.languageId):this.config.rootPatterns}reset(){this.rootPatterns.clear(),this._workspaceFolders=[]}getServerRootPatterns(e){let t=qfe.getRootPatternsByFiletype(e);return t=t.concat(pe(this.rootPatterns.get(e))),Oi(t)}checkFolder(e,t,i){return rJ(e,t,i)}async checkPatterns(e,t){if(le(e))return!1;let i=e.map(u=>Y.parse(u.uri).fsPath),r=!1,o=new p.CancellationTokenSource;this._tokenSources.add(o);let s=o.token,a=setTimeout(()=>{o.cancel()},Wfe),l=await Promise.allSettled(i.map(u=>this.checkFolder(u,t,s).then(c=>{this._tokenSources.delete(o),c&&(r=!0,clearTimeout(a),o.cancel())})));return clearTimeout(a),l.forEach(u=>{u.status==="rejected"&&!Lc(u.reason)&&Hfe.error("checkPatterns error:",t,u.reason)}),r}}});var Wp,pG=k(()=>{"use strict";je();se();Wp=class{constructor(e,t){this._create=e;this.disposables=[];this.itemsMap=new Map;let{disposables:i}=this;for(let r of t.attached())this.create(r);t.onDidOpenTextDocument(r=>{this.create(t.getDocument(r.bufnr))},null,i),t.onDidChangeDocument(r=>{this.onChange(r)},null,i),t.onDidCloseDocument(r=>{this.delete(r.bufnr)},null,i),F.on("LinesChanged",this.onTextChange,this,i)}onTextChange(e){let t=this.itemsMap.get(e);t&&typeof t.item.onTextChange=="function"&&t.item.onTextChange()}get items(){return Array.from(this.itemsMap.values()).map(e=>e.item)}getItem(e){if(typeof e=="number")return this.itemsMap.get(e)?.item;let t=Array.from(this.itemsMap.values()).find(i=>i.uri==e);return t?t.item:void 0}create(e){let t=this.itemsMap.get(e.bufnr);t&&t.item.dispose();let i=this._create(e);i&&this.itemsMap.set(e.bufnr,{uri:e.uri,item:i})}onChange(e){let t=this.itemsMap.get(e.bufnr);t&&typeof t.item.onChange=="function"&&t.item.onChange(e)}delete(e){let t=this.itemsMap.get(e);t&&(t.item.dispose(),this.itemsMap.delete(e))}reset(){for(let e of this.itemsMap.values())e.item.dispose();this.itemsMap.clear()}dispose(){z(this.disposables);for(let e of this.itemsMap.values())e.item.dispose();this._create=void 0,this.itemsMap.clear()}}});var qp,fG=k(()=>{"use strict";fe();Ye();qp=class{constructor(e){this.filepath=e}fetch(e){let t=this.load();if(!e)return t;let i=e.split(".");for(let r of i){if(typeof t[r]>"u")return;t=t[r]}return t}exists(e){let t=this.load(),i=e.split(".");for(let r of i){if(typeof t[r]>"u")return!1;t=t[r]}return!0}delete(e){let t=this.load(),i=t,r=e.split("."),o=r.length;for(let s=0;s<o&&!(typeof t[r[s]]>"u");s++){if(s==o-1){delete t[r[s]],B.writeFileSync(this.filepath,JSON.stringify(i,null,2),"utf8");break}t=t[r[s]]}}push(e,t){let i=Ke(this.load()),r=i,o=e.split("."),s=o.length;for(let a=0;a<s;a++){let l=o[a];if(a==s-1){r[l]=t;let u=E.dirname(this.filepath);B.mkdirSync(u,{recursive:!0}),B.writeFileSync(this.filepath,JSON.stringify(i,null,2));break}typeof r[l]>"u"&&(r[l]={}),r=r[l]}}load(){let e=E.dirname(this.filepath);if(!B.existsSync(e))return B.mkdirSync(e,{recursive:!0}),B.writeFileSync(this.filepath,"{}","utf8"),{};try{let i=B.readFileSync(this.filepath,"utf8");return JSON.parse(i.trim())}catch{return B.writeFileSync(this.filepath,"{}","utf8"),{}}}clear(){B.existsSync(this.filepath)&&B.writeFileSync(this.filepath,"{}","utf8")}destroy(){B.existsSync(this.filepath)&&B.unlinkSync(this.filepath)}}});var jE,Yp,OE=k(()=>{"use strict";gt();jE=["\\u280B","\\u2819","\\u2839","\\u2838","\\u283C","\\u2834","\\u2826","\\u2827","\\u2807","\\u280F"],Yp=class{constructor(){this.items=new Map;this.shownIds=new Set;this._text="";this.interval=setInterval(()=>{this.setStatusText()},100).unref()}dispose(){this.items.clear(),this.shownIds.clear(),clearInterval(this.interval)}reset(){this.items.clear(),this.shownIds.clear()}createStatusBarItem(e,t=!1){let i=mu(),r={text:"",priority:e,isProgress:t,show:()=>{this.shownIds.add(i),this.setStatusText()},hide:()=>{this.shownIds.delete(i),this.setStatusText()},dispose:()=>{this.shownIds.delete(i),this.items.delete(i),this.setStatusText()}};return this.items.set(i,r),r}getText(){if(this.shownIds.size==0)return"";let t=Math.floor(new Date().getMilliseconds()\/100),i="",r=[];for(let[o,s]of this.items)this.shownIds.has(o)&&r.push(s);r.sort((o,s)=>o.priority-s.priority);for(let o of r)o.isProgress?i=`${i} ${jE[t]} ${o.text}`:i=`${i} ${o.text}`;return i}setStatusText(){let e=this.getText(),{nvim:t}=this;e!=this._text&&t&&(this._text=e,t.pauseNotification(),this.nvim.setVar("coc_status",e,!0),this.nvim.call("coc#util#do_autocmd",["CocStatusChange"],!0),t.resumeNotification(!1,!0))}}});var Up,mG=k(()=>{"use strict";je();se();ie();Up=class{constructor(e,t){this.nvim=e;this.id=t;this.disposables=[];this._onExit=new p.Emitter;this._onStderr=new p.Emitter;this._onStdout=new p.Emitter;this.onExit=this._onExit.event;this.onStdout=this._onStdout.event;this.onStderr=this._onStderr.event;F.on("TaskExit",(i,r)=>{i==this.id&&this._onExit.fire(r)},null,this.disposables),F.on("TaskStderr",(i,r)=>{i==this.id&&this._onStderr.fire(r)},null,this.disposables),F.on("TaskStdout",(i,r)=>{i==this.id&&this._onStdout.fire(r)},null,this.disposables)}async start(e){let{nvim:t}=this;return await t.call("coc#task#start",[this.id,e])}async stop(){let{nvim:e}=this;await e.call("coc#task#stop",[this.id])}get running(){let{nvim:e}=this;return e.call("coc#task#running",[this.id])}dispose(){let{nvim:e}=this;e.call("coc#task#stop",[this.id],!0),this._onStdout.dispose(),this._onStderr.dispose(),this._onExit.dispose(),z(this.disposables)}}});var AE,Yfe,NE,y,be=k(()=>{"use strict";$e();Q5();V5();iX();U_();rX();IX();FX();jX();uG();jR();hG();uu();gG();vC();je();Ee();pG();fG();np();Qg();OE();X_();mG();oi();Is();fe();Ye();ru();AE=te("workspace"),Yfe=["showMessage","runTerminalCommand","openTerminal","showQuickpick","menuPick","openLocalConfig","showPrompt","createStatusBarItem","createOutputChannel","showOutputChannel","requestInput","echoLines","getCursorPosition","moveTo","getOffset","getSelectedRange","selectRange","createTerminal"],NE=class{constructor(){this.statusLine=new Yp;yJ().then(o=>{this.fuzzyExports=o}),dh.create().then(o=>{this.strWdith=o}),F.on("VimResized",(o,s)=>{Object.assign(Ke(this.env),{columns:o,lines:s})}),Object.defineProperty(this.statusLine,"nvim",{get:()=>this.nvim});let e=this.configurations=new Sp(BZ,new Dp(this));this.workspaceFolderControl=new Bp(this.configurations);let t=this.documentsManager=new _p(this.configurations,this.workspaceFolderControl);this.contentProvider=new kp(t),this.watchers=new Np,this.autocmds=new Tp,this.keymaps=new Ap,this.files=new Lp(t,this.configurations,this.workspaceFolderControl,this.keymaps),this.editors=new Rp(t),this.onDidRuntimePathChange=this.watchers.onDidRuntimePathChange,this.onDidChangeWorkspaceFolders=this.workspaceFolderControl.onDidChangeWorkspaceFolders,this.onDidChangeConfiguration=this.configurations.onDidChange,this.onDidOpenTextDocument=t.onDidOpenTextDocument,this.onDidChangeTextDocument=t.onDidChangeDocument,this.onDidCloseTextDocument=t.onDidCloseDocument,this.onDidSaveTextDocument=t.onDidSaveTextDocument,this.onWillSaveTextDocument=t.onWillSaveTextDocument,this.onDidCreateFiles=this.files.onDidCreateFiles,this.onDidRenameFiles=this.files.onDidRenameFiles,this.onDidDeleteFiles=this.files.onDidDeleteFiles,this.onWillCreateFiles=this.files.onWillCreateFiles,this.onWillRenameFiles=this.files.onWillRenameFiles,this.onWillDeleteFiles=this.files.onWillDeleteFiles;let r=e.initialConfiguration.get("coc.preferences").watchmanPath??WZ;this.fileSystemWatchers=new Op(this.workspaceFolderControl,r)}get initialConfiguration(){return this.configurations.initialConfiguration}async init(e){let{nvim:t}=this;for(let o of Yfe)Object.defineProperty(this,o,{get:()=>(...s)=>{let a=`$/;"	f
NotEnoughBuffers	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:NotEnoughBuffers()$/;"	f
Notifier.AddListener	plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
Notifier.GetListenersForEvent	plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
Notifier.GetListenersMap	plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
Notifier.NotifyListeners	plugged/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
NumLinesInBuf	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:NumLinesInBuf() abort$/;"	f
NumberOfLeadingTabs	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:NumberOfLeadingTabs(s) abort$/;"	f
OR	plugged/coc.nvim/doc/coc-example-config.vim	/^command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')$/;"	c
OpenConfig	plugged/coc.nvim/plugin/coc.vim	/^function! s:OpenConfig()$/;"	f
OpenDiagnostics	plugged/coc.nvim/plugin/coc.vim	/^function! s:OpenDiagnostics(...) abort$/;"	f
OpenExpand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenExpand(dir, file, wants_cmd) abort$/;"	f
OpenFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenFold() abort$/;"	f
OpenParents	plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenParents(...) abort$/;"	f
OpenParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenParse(string, wants_cmd, wants_multiple) abort$/;"	f
OpenWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenWindow(flags) abort$/;"	f
Opener.New	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
Opener._bufInWindows	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
Opener._checkToCloseTree	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
Opener._firstUsableWindow	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
Opener._gotoTargetWin	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
Opener._isWindowUsable	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
Opener._newSplit	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
Opener._newVSplit	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
Opener._openDirectory	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
Opener._openFile	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
Opener._previousWindow	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
Opener._restoreCursorPos	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
Opener._reuseWindow	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
Opener._saveCursorPos	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
Opener.open	plugged/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
OriginBufnr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OriginBufnr(...) abort$/;"	f
Owner	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Owner(path, ...) abort$/;"	f
PAUSE_BEFORE_EXIT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
POST_PROCESS_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PaperColor	colors/PaperColor.vim	/^command! -nargs=0 PaperColor :call g:PaperColor()$/;"	c
PaperColor	colors/PaperColor.vim	/^fun! g:PaperColor()$/;"	f
ParseArgs	plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^:ParseArgs$/;"	l
ParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseDiffHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ParseDiffHeader(str) abort$/;"	f
ParseTagline	plugged/tagbar/autoload/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo) abort$/;"	f
PatchSearchExpr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PatchSearchExpr(reverse) abort$/;"	f
Path.AbsolutePathFor	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
Path.CopyingSupported	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
Path.Resolve	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
Path.WinToUnixPath	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._escChars	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
Path._ignorePatternMatches	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
Path._splitChunks	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
Path._str	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
Path.addDelimiter	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.addDelimiter(line)$/;"	f
Path.bookmarkNames	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
Path.changeToDir	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
Path.copy	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.createParentDirectories	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
Path.delete	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
Path.edit	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
Path.equals	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortKey	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
Path.getSortOrderIndex	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
Path.isAncestor	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(child)$/;"	f
Path.isHiddenUnder	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
Path.isUnder	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(parent)$/;"	f
Path.isUnixHiddenFile	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
Path.isUnixHiddenPath	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
Path.readInfoFromDisk	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
Path.refreshFlags	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
Path.rename	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
Path.tabnr	plugged/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
PathInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PathInfo(url) abort$/;"	f
PathJoin	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PathJoin(prefix, str) abort$/;"	f
PathUrlEncode	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PathUrlEncode(str) abort$/;"	f
PlaceDelimitersAndInsBetween	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:PlaceDelimitersAndInsBetween() abort$/;"	f
PlusEscape	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PlusEscape(string) abort$/;"	f
PrepareEnv	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PrepareEnv(env, dir) abort$/;"	f
PrepareJob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PrepareJob(opts) abort$/;"	f
PreparePathArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreparePathArgs(cmd, dir, literal, explicit) abort$/;"	f
PreviousFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousFile(count) abort$/;"	f
PreviousHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousHunk(count) abort$/;"	f
PreviousItem	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousItem(count) abort$/;"	f
PreviousSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSection(count) abort$/;"	f
PreviousSectionEnd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSectionEnd(count) abort$/;"	f
PrintHelp	plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintHelp() abort$/;"	f
PrintKinds	plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo) abort$/;"	f
PrintTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintTag(tag, depth, output, fileinfo, typeinfo) abort$/;"	f
ProcessFile	plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessFile(fname, ftype) abort$/;"	f
ProcessTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessTag(name, filename, pattern, fields, is_split, typeinfo, fileinfo) abort$/;"	f
ProjectionistDetect	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ProjectionistDetect() abort$/;"	f
PushSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PushSubcommand(...) abort$/;"	f
Python2or3	plugged/unite.vim/autoload/unite/filters/sorter_selecta.vim	/^    command! -nargs=1 Python2or3 python <args>$/;"	c
Python2or3	plugged/unite.vim/autoload/unite/filters/sorter_selecta.vim	/^    command! -nargs=1 Python2or3 python3 <args>$/;"	c
QueryLog	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QueryLog(refspec, limit, dir) abort$/;"	f
QueryLogRange	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QueryLogRange(old, new, dir) abort$/;"	f
QuickfixCreate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixCreate(nr, opts) abort$/;"	f
QuickfixGet	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixGet(nr, ...) abort$/;"	f
QuickfixOpen	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixOpen(nr, mods) abort$/;"	f
QuickfixSet	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixSet(nr, ...) abort$/;"	f
QuickfixStream	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixStream(nr, event, title, cmd, first, mods, callback, ...) abort$/;"	f
QuickpickFilter	plugged/coc.nvim/autoload/coc/ui.vim	/^    function! s:QuickpickFilter(id, key) closure$/;"	f
Quote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Quote(string) abort$/;"	f
Random	plugged/vim-gitgutter/test/runner.vim	/^function Random(min, max)$/;"	f
ReadFile	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ReadFile(path, line_count) abort$/;"	f
ReadPrepare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReadPrepare(line1, count, range, mods) abort$/;"	f
RebaseArgument	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseArgument() abort$/;"	f
RebaseSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
RecoverStateAfterLineComment	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:RecoverStateAfterLineComment(state) abort$/;"	f
RefreshTabline	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:RefreshTabline()$/;"	f
Relative	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Relative(...) abort$/;"	f
ReloadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatus() abort$/;"	f
ReloadStatusBuffer	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatusBuffer() abort$/;"	f
ReloadTabStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadTabStatus() abort$/;"	f
ReloadWinStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadWinStatus(...) abort$/;"	f
Remote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remote(dir, remote, flags, cb) abort$/;"	f
RemoteCallback	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteCallback(config, into, flags, cb) abort$/;"	f
RemoteDefault	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteDefault(dir) abort$/;"	f
RemoteParseArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteParseArgs(args) abort$/;"	f
RemoteRefToLocalRef	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteRefToLocalRef(repo, remote_url, ref_path) abort$/;"	f
RemoteResolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteResolve(url, flags) abort$/;"	f
RemoteUrlCallback	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteUrlCallback(remote, callback) abort$/;"	f
Remove	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remove(after, force) abort$/;"	f
RemoveDelimiters	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:RemoveDelimiters(left, right, line) abort$/;"	f
RenderContent	plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderContent(...) abort$/;"	f
RenderKeepView	plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderKeepView(...) abort$/;"	f
ReopenWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:ReopenWindow(delbufname) abort$/;"	f
ReplaceCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReplaceCmd(cmd) abort$/;"	f
ReplaceDelims	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:ReplaceDelims(toReplace1, toReplace2, replacor1, replacor2, str) abort$/;"	f
ReplaceLeftMostDelim	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:ReplaceLeftMostDelim(toReplace, replacor, str) abort$/;"	f
ReplaceRightMostDelim	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:ReplaceRightMostDelim(toReplace, replacor, str) abort$/;"	f
Resolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Resolve(path) abort$/;"	f
ResolveGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ResolveGitDir(git_dir) abort$/;"	f
ResolveUrl	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ResolveUrl(target, ...) abort$/;"	f
RestoreNERDTreeViewIfPossible	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:RestoreNERDTreeViewIfPossible()$/;"	f
RestoreSession	plugged/tagbar/autoload/tagbar.vim	/^function! s:RestoreSession() abort$/;"	f
RevertSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RevertSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
Right	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:Right(...) abort$/;"	f
RightMostIndx	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:RightMostIndx(countCommentedLines, countEmptyLines, topline, bottomline) abort$/;"	f
RunBufDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunBufDelete(bufnr) abort$/;"	f
RunClose	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunClose(state, tmp, job, ...) abort$/;"	f
RunCloseIn	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunCloseIn(job) abort$/;"	f
RunEcho	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunEcho(tmp) abort$/;"	f
RunEdit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunEdit(state, tmp, job) abort$/;"	f
RunExit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunExit(state, tmp, job, exit_status) abort$/;"	f
RunFinished	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunFinished(state, ...) abort$/;"	f
RunReceive	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunReceive(state, tmp, type, job, data, ...) abort$/;"	f
RunSave	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunSave(state) abort$/;"	f
RunSend	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunSend(job, str) abort$/;"	f
RunTest	plugged/vim-gitgutter/test/runner.vim	/^function RunTest(test)$/;"	f
RunTick	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunTick(job) abort$/;"	f
RunWait	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunWait(state, tmp, job, ...) abort$/;"	f
SID	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function s:SID()$/;"	f
SID	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:SID() abort$/;"	f
SID_PREFIX	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^function! s:SID_PREFIX() abort$/;"	f
SID_PREFIX	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:SID_PREFIX() abort$/;"	f
SameRepo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SameRepo(one, two) abort$/;"	f
SaveGlobalFocus	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:SaveGlobalFocus()$/;"	f
SaveNERDTreeViewIfPossible	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:SaveNERDTreeViewIfPossible()$/;"	f
SearchOptions	plugged/coc.nvim/plugin/coc.vim	/^function! s:SearchOptions(...) abort$/;"	f
Selection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Selection(arg1, ...) abort$/;"	f
SetDefault	plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! s:SetDefault(var, val)$/;"	f
SetFoldLevel	plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevel(level, force) abort$/;"	f
SetFoldLevelRecursive	plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level) abort$/;"	f
SetStatusLine	plugged/tagbar/autoload/tagbar.vim	/^function! s:SetStatusLine() abort$/;"	f
SetTagbar	plugged/vim-go/ftplugin/go/tagbar.vim	/^function! s:SetTagbar()$/;"	f
SetUp	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function SetUp()$/;"	f
SetupStateBeforeLineComment	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:SetupStateBeforeLineComment(topLine, bottomLine) abort$/;"	f
SexyNested	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:SexyNested() abort$/;"	f
ShowDocumentation	plugged/coc.nvim/doc/coc-example-config.vim	/^function! ShowDocumentation()$/;"	f
ShowInPreviewWin	plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowInPreviewWin() abort$/;"	f
ShowInfo	plugged/coc.nvim/plugin/coc.vim	/^function! s:ShowInfo()$/;"	f
ShowPrototype	plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowPrototype(short) abort$/;"	f
ShowUsage	plugged/vim-gutentags/plat/unix/update_gtags.sh	/^ShowUsage() {$/;"	f
ShowUsage	plugged/vim-gutentags/plat/unix/update_pyscopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
ShrinkIfExpanded	plugged/tagbar/autoload/tagbar.vim	/^function! s:ShrinkIfExpanded() abort$/;"	f
Shuffle	plugged/vim-gitgutter/test/runner.vim	/^function Shuffle(list)$/;"	f
Slash	plugged/vim-fugitive/autoload/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
Slash	plugged/vim-fugitive/plugin/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
Source	plugged/unite.vim/rplugin/python3/denite/source/unite.py	/^class Source(Base):$/;"	c
Source	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^class Source(Base):$/;"	c
SplitExpandChain	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SplitExpandChain(string, ...) abort$/;"	f
SquashArgument	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SquashArgument(...) abort$/;"	f
SshParseConfig	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SshParseConfig(into, root, file) abort$/;"	f
SshParseHost	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SshParseHost(value) abort$/;"	f
StageApply	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageApply(info, reverse, extra) abort$/;"	f
StageArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageArgs(visual) abort$/;"	f
StageDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDelete(lnum1, lnum2, count) abort$/;"	f
StageDiff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
StageDiffEdit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
StageIgnore	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageIgnore(lnum1, lnum2, count) abort$/;"	f
StageInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInfo(...) abort$/;"	f
StageInline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInline(mode, ...) abort$/;"	f
StageInlineGetDiff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInlineGetDiff(diff_section, info) abort$/;"	f
StageJump	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageJump(offset, section, ...) abort$/;"	f
StagePatch	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
StageReveal	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageReveal() abort$/;"	f
StageSeek	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageSeek(info, fallback) abort$/;"	f
State.New	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.New() abort dict$/;"	f
State.getCurrent	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.getCurrent(force_current) abort dict$/;"	f
State.setCurrentFile	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setCurrentFile(fileinfo) abort dict$/;"	f
State.setPaused	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setPaused() abort dict$/;"	f
StaticHighlight	plugged/coc.nvim/plugin/coc.vim	/^function! s:StaticHighlight() abort$/;"	f
StatusCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCfile(...) abort$/;"	f
StatusCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCommand(line1, line2, range, count, bang, mods, reg, arg, args, ...) abort$/;"	f
StatusSectionFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusSectionFile(heading, filename) abort$/;"	f
StdoutToFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StdoutToFile(out, cmd, ...) abort$/;"	f
SwapOuterMultiPartDelimsForPlaceHolders	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:SwapOuterMultiPartDelimsForPlaceHolders(line) abort$/;"	f
SwapOuterPlaceHoldersForMultiPartDelims	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:SwapOuterPlaceHoldersForMultiPartDelims(line) abort$/;"	f
SyncAutocmd	plugged/coc.nvim/plugin/coc.vim	/^function! s:SyncAutocmd(...)$/;"	f
SystemError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SystemError(cmd, ...) abort$/;"	f
SystemList	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SystemList(cmd) abort$/;"	f
TAGS_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
TEST_FLAGS	plugged/vim-go/Makefile	/^TEST_FLAGS ?=$/;"	m
TabBuffers	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! s:TabBuffers()$/;"	f
TabEnterHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:TabEnterHandler()$/;"	f
TabLeaveHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:TabLeaveHandler()$/;"	f
TabSpace	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:TabSpace() abort$/;"	f
Tagbar	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? Tagbar              call tagbar#ToggleWindow(<f-args>)$/;"	c
TagbarBalloonExpr	plugged/tagbar/autoload/tagbar.vim	/^function! TagbarBalloonExpr() abort$/;"	f
TagbarBufName	plugged/tagbar/autoload/tagbar.vim	/^function! s:TagbarBufName() abort$/;"	f
TagbarClose	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call tagbar#CloseWindow()$/;"	c
TagbarCurrentTag	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=* TagbarCurrentTag    echo tagbar#currenttag('%s', 'No current tag', <f-args>)$/;"	c
TagbarDebug	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarDebug         call tagbar#debug#start_debug(<f-args>)$/;"	c
TagbarDebugEnd	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarDebugEnd      call tagbar#debug#stop_debug()$/;"	c
TagbarForceUpdate	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarForceUpdate   call tagbar#ForceUpdate()$/;"	c
TagbarGetTypeConfig	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 TagbarGetTypeConfig call tagbar#gettypeconfig(<f-args>)$/;"	c
TagbarJump	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJump   call tagbar#jump()$/;"	c
TagbarJumpNext	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJumpNext      call tagbar#jumpToNearbyTag(1)$/;"	c
TagbarJumpPrev	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJumpPrev      call tagbar#jumpToNearbyTag(-1)$/;"	c
TagbarOpen	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarOpen          call tagbar#OpenWindow(<f-args>)$/;"	c
TagbarOpenAutoClose	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call tagbar#OpenWindow('fcj')$/;"	c
TagbarSession	plugged/tagbar/plugin/tagbar.vim	/^augroup TagbarSession$/;"	a
TagbarSetFoldlevel	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)$/;"	c
TagbarShowTag	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarShowTag       call tagbar#highlighttag(1, 1)$/;"	c
TagbarToggle	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarToggle        call tagbar#ToggleWindow(<f-args>)$/;"	c
TagbarTogglePause	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarTogglePause   call tagbar#toggle_pause()$/;"	c
TearDown	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function TearDown()$/;"	f
TempDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempDelete(file) abort$/;"	f
TempDotMap	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempDotMap() abort$/;"	f
TempReadPost	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPost(file) abort$/;"	f
TempReadPre	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPre(file) abort$/;"	f
TempScript	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempScript(...) abort$/;"	f
TempState	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempState(...) abort$/;"	f
TestAddTags	plugged/vim-go/autoload/go/tags_test.vim	/^func! TestAddTags() abort$/;"	f
TestAddTags_AddOptions	plugged/vim-go/autoload/go/tags_test.vim	/^func! TestAddTags_AddOptions() abort$/;"	f
TestAddTags_WithOptions	plugged/vim-go/autoload/go/tags_test.vim	/^func! TestAddTags_WithOptions() abort$/;"	f
Test_Callers	plugged/vim-go/autoload/go/calls_test.vim	/^func! Test_Callers() abort$/;"	f
Test_Complete_GOPATH_baronly	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_GOPATH_baronly() abort$/;"	f
Test_Complete_GOPATH_simple	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_GOPATH_simple() abort$/;"	f
Test_Complete_GOPATH_subdirs	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_GOPATH_subdirs() abort$/;"	f
Test_Complete_GOPATH_vendor	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_GOPATH_vendor() abort$/;"	f
Test_Complete_Module_baronly	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_Module_baronly() abort$/;"	f
Test_Complete_Module_simple	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_Module_simple() abort$/;"	f
Test_Complete_Module_subdirs	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_Module_subdirs() abort$/;"	f
Test_Complete_Module_vendor	plugged/vim-go/autoload/go/package_test.vim	/^func! Test_Complete_Module_vendor() abort$/;"	f
Test_Decode_multibyte	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_Decode_multibyte() abort$/;"	f
Test_Decode_simple	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_Decode_simple() abort$/;"	f
Test_DefJump_gopls_MultipleCodeUnit_first	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_DefJump_gopls_MultipleCodeUnit_first() abort$/;"	f
Test_DefJump_gopls_MultipleCodeUnit_last	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_DefJump_gopls_MultipleCodeUnit_last() abort$/;"	f
Test_DefJump_gopls_simple_first	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_DefJump_gopls_simple_first() abort$/;"	f
Test_DefJump_gopls_simple_last	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_DefJump_gopls_simple_last() abort$/;"	f
Test_EncodePath_multibyte	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_EncodePath_multibyte() abort$/;"	f
Test_EncodePath_simple	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_EncodePath_simple() abort$/;"	f
Test_Errcheck	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Errcheck() abort$/;"	f
Test_Errcheck_compilererror	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Errcheck_compilererror() abort$/;"	f
Test_Errcheck_options	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Errcheck_options() abort$/;"	f
Test_ExecuteInDir	plugged/vim-go/autoload/go/tool_test.vim	/^func! Test_ExecuteInDir() abort$/;"	f
Test_ExecuteInDir_nodir	plugged/vim-go/autoload/go/tool_test.vim	/^func! Test_ExecuteInDir_nodir() abort$/;"	f
Test_Format	plugged/vim-go/autoload/go/lsp_test.vim	/^func! Test_Format() abort$/;"	f
Test_Format_SingleNewline	plugged/vim-go/autoload/go/lsp_test.vim	/^func! Test_Format_SingleNewline() abort$/;"	f
Test_GetInfo_gopls	plugged/vim-go/autoload/go/complete_test.vim	/^func! Test_GetInfo_gopls()$/;"	f
Test_GetMultiByteTextPosition	plugged/vim-go/autoload/go/lsp_test.vim	/^function! Test_GetMultiByteTextPosition()$/;"	f
Test_GetMultipleCodeUnitTextPosition	plugged/vim-go/autoload/go/lsp_test.vim	/^function! Test_GetMultipleCodeUnitTextPosition()$/;"	f
Test_GetSimpleTextPosition	plugged/vim-go/autoload/go/lsp_test.vim	/^function! Test_GetSimpleTextPosition()$/;"	f
Test_GoBuildErrors	plugged/vim-go/autoload/go/cmd_test.vim	/^func! Test_GoBuildErrors()$/;"	f
Test_GoDebugModeRemapsAndRestoresKeys	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugModeRemapsAndRestoresKeys() abort$/;"	f
Test_GoDebugStart_Empty	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_Empty() abort$/;"	f
Test_GoDebugStart_Errors	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_Errors() abort$/;"	f
Test_GoDebugStart_Package	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_Package() abort$/;"	f
Test_GoDebugStart_RelativePackage	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_RelativePackage() abort$/;"	f
Test_GoDebugStart_RelativePackage_NullModule	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStart_RelativePackage_NullModule() abort$/;"	f
Test_GoDebugStopRemovesPlugMappings	plugged/vim-go/autoload/go/debug_test.vim	/^function! Test_GoDebugStopRemovesPlugMappings() abort$/;"	f
Test_GoTermNewMode	plugged/vim-go/autoload/go/term_test.vim	/^func! Test_GoTermNewMode()$/;"	f
Test_GoTermNewMode_SplitRight	plugged/vim-go/autoload/go/term_test.vim	/^func! Test_GoTermNewMode_SplitRight()$/;"	f
Test_GoTermReuse	plugged/vim-go/autoload/go/term_test.vim	/^func! Test_GoTermReuse()$/;"	f
Test_GoTest	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTest() abort$/;"	f
Test_GoTestCompilerError	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestCompilerError() abort$/;"	f
Test_GoTestConcurrentPanic	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestConcurrentPanic()$/;"	f
Test_GoTestExample	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestExample() abort$/;"	f
Test_GoTestShowName	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestShowName() abort$/;"	f
Test_GoTestTestCompilerError	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestTestCompilerError() abort$/;"	f
Test_GoTestTimeout	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestTimeout() abort$/;"	f
Test_GoTestVerbose	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestVerbose() abort$/;"	f
Test_GoTestVet	plugged/vim-go/autoload/go/test_test.vim	/^func! Test_GoTestVet() abort$/;"	f
Test_GoTypeHighlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_GoTypeHighlight() abort$/;"	f
Test_GometaAutoSaveGolangciLint	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveGolangciLint() abort$/;"	f
Test_GometaAutoSaveGolangciLintKeepsErrors	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveGolangciLintKeepsErrors() abort$/;"	f
Test_GometaAutoSaveGolangciLint_multiple	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveGolangciLint_multiple() abort$/;"	f
Test_GometaAutoSaveGopls	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveGopls() abort$/;"	f
Test_GometaAutoSaveStaticcheck	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveStaticcheck() abort$/;"	f
Test_GometaAutoSaveStaticcheckKeepsErrors	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaAutoSaveStaticcheckKeepsErrors() abort$/;"	f
Test_GometaGolangciLint	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaGolangciLint() abort$/;"	f
Test_GometaStaticcheck	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_GometaStaticcheck() abort$/;"	f
Test_GoplsEnabled_Clear	plugged/vim-go/autoload/go/config_test.vim	/^func! Test_GoplsEnabled_Clear() abort$/;"	f
Test_GuruScope_Set	plugged/vim-go/autoload/go/guru_test.vim	/^function Test_GuruScope_Set() abort$/;"	f
Test_Imports	plugged/vim-go/autoload/go/lsp_test.vim	/^func! Test_Imports() abort$/;"	f
Test_JobDirWithSpaces	plugged/vim-go/autoload/go/job_test.vim	/^func! Test_JobDirWithSpaces()$/;"	f
Test_Jump_leaves_lists	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_Jump_leaves_lists() abort$/;"	f
Test_Lint_GOPATH	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Lint_GOPATH() abort$/;"	f
Test_Lint_NullModule	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Lint_NullModule() abort$/;"	f
Test_PositionOf_MultiByte	plugged/vim-go/autoload/go/lsp/lsp_test.vim	/^function! Test_PositionOf_MultiByte()$/;"	f
Test_PositionOf_MultipleCodeUnit	plugged/vim-go/autoload/go/lsp/lsp_test.vim	/^function! Test_PositionOf_MultipleCodeUnit()$/;"	f
Test_PositionOf_Simple	plugged/vim-go/autoload/go/lsp/lsp_test.vim	/^function! Test_PositionOf_Simple()$/;"	f
Test_PromiseAwait	plugged/vim-go/autoload/go/promise_test.vim	/^func! Test_PromiseAwait() abort$/;"	f
Test_PromiseAwait_Timeout	plugged/vim-go/autoload/go/promise_test.vim	/^func! Test_PromiseAwait_Timeout() abort$/;"	f
Test_PromiseNew	plugged/vim-go/autoload/go/promise_test.vim	/^func! Test_PromiseNew() abort$/;"	f
Test_Roundtrip_multibyte	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_Roundtrip_multibyte() abort$/;"	f
Test_Roundtrip_simple	plugged/vim-go/autoload/go/uri_test.vim	/^func! Test_Roundtrip_simple() abort$/;"	f
Test_SetBuildTags	plugged/vim-go/autoload/go/config_test.vim	/^func! Test_SetBuildTags() abort$/;"	f
Test_SwitchImportAddIgnoresCommented	plugged/vim-go/autoload/go/import_test.vim	/^func! Test_SwitchImportAddIgnoresCommented()$/;"	f
Test_TemplateCreate	plugged/vim-go/autoload/go/template_test.vim	/^func! Test_TemplateCreate() abort$/;"	f
Test_TemplateCreate_PackageExists	plugged/vim-go/autoload/go/template_test.vim	/^func! Test_TemplateCreate_PackageExists() abort$/;"	f
Test_TemplateCreate_UsePkg	plugged/vim-go/autoload/go/template_test.vim	/^func! Test_TemplateCreate_UsePkg() abort$/;"	f
Test_Vet	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Vet() abort$/;"	f
Test_Vet_compilererror	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Vet_compilererror() abort$/;"	f
Test_Vet_subdir	plugged/vim-go/autoload/go/lint_test.vim	/^func! Test_Vet_subdir() abort$/;"	f
Test_add_lines	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines()$/;"	f
Test_add_lines_fish	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_add_lines_fish()$/;"	f
Test_around_text_object	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_around_text_object()$/;"	f
Test_assume_unchanged	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_assume_unchanged()$/;"	f
Test_clean_smudge_filter	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_clean_smudge_filter()$/;"	f
Test_common_prefix	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_common_prefix()$/;"	f
Test_common_suffix	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_common_suffix()$/;"	f
Test_diagnostic_after_fmt	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_diagnostic_after_fmt() abort$/;"	f
Test_diagnostic_after_fmt_change	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_diagnostic_after_fmt_change() abort$/;"	f
Test_diagnostic_after_fmt_cleared	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_diagnostic_after_fmt_cleared() abort$/;"	f
Test_diagnostic_after_reload	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_diagnostic_after_reload() abort$/;"	f
Test_diff_highlight	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_diff_highlight()$/;"	f
Test_dos_noeol	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_dos_noeol()$/;"	f
Test_edit_file_with_same_name_as_a_branch	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_edit_file_with_same_name_as_a_branch()$/;"	f
Test_empty_file	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_empty_file()$/;"	f
Test_encoding	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_encoding()$/;"	f
Test_file_added_to_git	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_file_added_to_git()$/;"	f
Test_file_cmd	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_file_cmd()$/;"	f
Test_file_mv	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_file_mv()$/;"	f
Test_file_unknown_in_base	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_file_unknown_in_base()$/;"	f
Test_filename_leading_dash	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_leading_dash()$/;"	f
Test_filename_umlaut	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_umlaut()$/;"	f
Test_filename_with_colon	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_colon()$/;"	f
Test_filename_with_equals	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_equals()$/;"	f
Test_filename_with_space	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_space()$/;"	f
Test_filename_with_square_brackets	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_filename_with_square_brackets()$/;"	f
Test_fillstruct	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_fillstruct() abort$/;"	f
Test_fillstruct_line	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_fillstruct_line() abort$/;"	f
Test_fillstruct_two_cursor	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_fillstruct_two_cursor() abort$/;"	f
Test_fillstruct_two_line	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_fillstruct_two_line() abort$/;"	f
Test_fix_file_references	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_fix_file_references()$/;"	f
Test_foldtext	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_foldtext()$/;"	f
Test_follow_symlink	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_follow_symlink()$/;"	f
Test_goFunction	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_goFunction() abort$/;"	f
Test_goFunctionCall	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_goFunctionCall() abort$/;"	f
Test_goImportStringHighlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_goImportStringHighlight() abort$/;"	f
Test_goReceiverHighlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_goReceiverHighlight() abort$/;"	f
Test_goStringHighlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_goStringHighlight() abort$/;"	f
Test_goimports	plugged/vim-go/autoload/go/fmt_test.vim	/^func! Test_goimports() abort$/;"	f
Test_gomodVersion_highlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_gomodVersion_highlight() abort$/;"	f
Test_gomodVersion_incompatible_highlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_gomodVersion_incompatible_highlight() abort$/;"	f
Test_gopls_fillstruct	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_gopls_fillstruct() abort$/;"	f
Test_gopls_fillstruct_line	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_gopls_fillstruct_line() abort$/;"	f
Test_gopls_fillstruct_two_cursor	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_gopls_fillstruct_two_cursor() abort$/;"	f
Test_gopls_fillstruct_two_line	plugged/vim-go/autoload/go/fillstruct_test.vim	/^func! Test_gopls_fillstruct_two_line() abort$/;"	f
Test_hunk_outside_noop	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_outside_noop()$/;"	f
Test_hunk_stage	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage()$/;"	f
Test_hunk_stage_nearby_hunk	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_nearby_hunk()$/;"	f
Test_hunk_stage_partial_cmd_added	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_cmd_added()$/;"	f
Test_hunk_stage_partial_preview_added	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_preview_added()$/;"	f
Test_hunk_stage_partial_preview_added_removed	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_preview_added_removed()$/;"	f
Test_hunk_stage_partial_visual_added	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_partial_visual_added()$/;"	f
Test_hunk_stage_preview_write	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_stage_preview_write()$/;"	f
Test_hunk_undo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo()$/;"	f
Test_hunk_undo_dos	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_hunk_undo_dos()$/;"	f
Test_impl	plugged/vim-go/autoload/go/impl_test.vim	/^func! Test_impl() abort$/;"	f
Test_impl_get	plugged/vim-go/autoload/go/impl_test.vim	/^func! Test_impl_get() abort$/;"	f
Test_indent_raw_string	plugged/vim-go/autoload/go/indent_test.vim	/^func! Test_indent_raw_string() abort$/;"	f
Test_inner_text_object	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_inner_text_object()$/;"	f
Test_jump_to_declaration_godef	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_jump_to_declaration_godef() abort$/;"	f
Test_jump_to_declaration_guru	plugged/vim-go/autoload/go/def_test.vim	/^func! Test_jump_to_declaration_guru() abort$/;"	f
Test_keep_alt	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_alt()$/;"	f
Test_keep_modified	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_modified()$/;"	f
Test_keep_op_marks	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_keep_op_marks()$/;"	f
Test_lcs	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_lcs()$/;"	f
Test_modify_lines	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_modify_lines()$/;"	f
Test_no_modifications	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_no_modifications()$/;"	f
Test_numeric_literal_highlight	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_numeric_literal_highlight() abort$/;"	f
Test_orphaned_signs	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_orphaned_signs()$/;"	f
Test_overlapping_hunk_op	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_overlapping_hunk_op()$/;"	f
Test_overlapping_hunks	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_overlapping_hunks()$/;"	f
Test_preview	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_preview()$/;"	f
Test_preview_dos	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_preview_dos()$/;"	f
Test_priority	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_priority()$/;"	f
Test_quickfix	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_quickfix()$/;"	f
Test_remove_first_lines	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_first_lines()$/;"	f
Test_remove_lines	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_remove_lines()$/;"	f
Test_remove_tags	plugged/vim-go/autoload/go/tags_test.vim	/^func! Test_remove_tags() abort$/;"	f
Test_run_fmt	plugged/vim-go/autoload/go/fmt_test.vim	/^func! Test_run_fmt() abort$/;"	f
Test_saveas	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_saveas()$/;"	f
Test_split	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_split()$/;"	f
Test_undo_nearby_hunk	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_undo_nearby_hunk()$/;"	f
Test_untracked_file_outside_repo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_outside_repo()$/;"	f
Test_untracked_file_square_brackets_within_repo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_square_brackets_within_repo()$/;"	f
Test_untracked_file_within_repo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_untracked_file_within_repo()$/;"	f
Test_update_file	plugged/vim-go/autoload/go/fmt_test.vim	/^func! Test_update_file() abort$/;"	f
Test_user_autocmd	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_user_autocmd()$/;"	f
Test_v_shell_error_not_clobbered	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_v_shell_error_not_clobbered()$/;"	f
Test_write_option	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function Test_write_option()$/;"	f
Test_zero_as_index_element	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_zero_as_index_element() abort$/;"	f
Test_zero_as_slice_index	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_zero_as_slice_index() abort$/;"	f
Test_zero_as_start_slicing_slice	plugged/vim-go/autoload/go/highlight_test.vim	/^function! Test_zero_as_start_slicing_slice() abort$/;"	f
ToggleAutoclose	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleAutoclose() abort$/;"	f
ToggleCaseInsensitive	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleCaseInsensitive() abort$/;"	f
ToggleFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleFold() abort$/;"	f
ToggleHelp	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHelp() abort$/;"	f
ToggleHideNonPublicTags	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHideNonPublicTags() abort$/;"	f
TogglePause	plugged/tagbar/autoload/tagbar.vim	/^function! s:TogglePause() abort$/;"	f
ToggleSort	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleSort() abort$/;"	f
ToggleTabTreeVCS	plugged/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:ToggleTabTreeVCS(name)$/;"	f
ToggleWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleWindow(flags) abort$/;"	f
ToolItems	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolItems(state, from, to, offsets, text, ...) abort$/;"	f
ToolParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolParse(state, line) abort$/;"	f
ToolStream	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolStream(line1, line2, range, bang, mods, options, args, state) abort$/;"	f
ToolToFrom	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolToFrom(str) abort$/;"	f
TransformUserTypeDef	plugged/tagbar/autoload/tagbar.vim	/^function! s:TransformUserTypeDef(def) abort$/;"	f
Tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Tree(...) abort$/;"	f
Tree	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Tree(path) abort$/;"	f
TreeChomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeChomp(...) abort$/;"	f
TreeDirNode.AbsoluteTreeRoot	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
TreeDirNode._glob	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
TreeDirNode._initChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openInNewTab	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
TreeDirNode.activate	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
TreeDirNode.addChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.displayString	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
TreeDirNode.findNode	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getCascade	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
TreeDirNode.getCascadeRoot	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascadeRoot()$/;"	f
TreeDirNode.getChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getDirChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getDirChildren()$/;"	f
TreeDirNode.getVisibleChildCount	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.isCascadable	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
TreeDirNode.open	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
TreeDirNode.openAlong	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
TreeDirNode.openExplorer	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.refreshDirFlags	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
TreeDirNode.refreshFlags	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
TreeDirNode.removeChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
TreeDirNode.sortChildren	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
TreeDirNode.transplantChild	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetSelected	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
TreeFileNode._renderToString	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
TreeFileNode.activate	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
TreeFileNode.bookmark	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBookmarks	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
TreeFileNode.copy	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findSibling	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getNerdtree	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
TreeFileNode.isRoot	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.open	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
TreeFileNode.openExplorer	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openExplorer()$/;"	f
TreeFileNode.openInNewTab	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.refreshFlags	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
TreeFileNode.rename	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TreeInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeInfo(dir, commit) abort$/;"	f
TrimTrailingWhitespace	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:TrimTrailingWhitespace(line) abort$/;"	f
UI.IndentWid	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
UI.MarkupReg	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
UI.New	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
UI.UpDirLine	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
UI._dumpHelp	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
UI._indentLevelFor	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
UI._renderBookmarks	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
UI._stripMarkup	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
UI.centerView	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
UI.getLineNum	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(node)$/;"	f
UI.getPath	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
UI.getRootLineNum	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
UI.getShowBookmarks	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
UI.getShowFileLines	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFileLines()$/;"	f
UI.getShowFiles	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
UI.getShowHelp	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
UI.getShowHidden	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
UI.isIgnoreFilterEnabled	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
UI.isMinimal	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
UI.render	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
UI.renderViewSavingPosition	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
UI.restoreScreenState	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
UI.saveScreenState	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
UI.setShowHidden	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
UI.toggleHelp	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
UI.toggleIgnoreFilter	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
UI.toggleShowBookmarks	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
UI.toggleShowFileLines	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFileLines()$/;"	f
UI.toggleShowFiles	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
UI.toggleShowHidden	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
UI.toggleZoom	plugged/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
UPDATED_SOURCE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
UnEsc	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:UnEsc(str, escChar) abort$/;"	f
UncommentLineNormal	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:UncommentLineNormal(line) abort$/;"	f
UncommentLines	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:UncommentLines(topLine, bottomLine) abort$/;"	f
UncommentLinesNormal	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:UncommentLinesNormal(topline, bottomline) abort$/;"	f
UncommentLinesSexy	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! s:UncommentLinesSexy(topline, bottomline) abort$/;"	f
Uniq	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Uniq(list) abort$/;"	f
Unite	plugged/unite.vim/plugin/unite.vim	/^      \\ Unite$/;"	c
UniteBookmarkAdd	plugged/unite.vim/plugin/unite/bookmark.vim	/^command! -nargs=? -complete=file UniteBookmarkAdd$/;"	c
UniteClose	plugged/unite.vim/plugin/unite.vim	/^      \\ UniteClose call unite#view#_close(<q-args>)$/;"	c
UniteDo	plugged/unite.vim/plugin/unite.vim	/^      \\ UniteDo call unite#start#_do_command(<q-args>)$/;"	c
UniteFirst	plugged/unite.vim/plugin/unite.vim	/^      \\ UniteFirst call unite#start#_pos(<q-args>, 'first', 1)$/;"	c
UniteLast	plugged/unite.vim/plugin/unite.vim	/^      \\ UniteLast call unite#start#_pos(<q-args>, 'last', 1)$/;"	c
UniteNext	plugged/unite.vim/plugin/unite.vim	/^      \\ UniteNext call unite#start#_pos(<q-args>, 'next', expand('<count>'))$/;"	c
UnitePrevious	plugged/unite.vim/plugin/unite.vim	/^      \\ UnitePrevious call unite#start#_pos(<q-args>, 'previous', expand('<count>'))$/;"	c
UniteResume	plugged/unite.vim/plugin/unite.vim	/^      \\ UniteResume$/;"	c
UniteWithBufferDir	plugged/unite.vim/plugin/unite.vim	/^      \\ UniteWithBufferDir$/;"	c
UniteWithCurrentDir	plugged/unite.vim/plugin/unite.vim	/^      \\ UniteWithCurrentDir$/;"	c
UniteWithCursorWord	plugged/unite.vim/plugin/unite.vim	/^      \\ UniteWithCursorWord$/;"	c
UniteWithInput	plugged/unite.vim/plugin/unite.vim	/^      \\ UniteWithInput$/;"	c
UniteWithInputDirectory	plugged/unite.vim/plugin/unite.vim	/^      \\ UniteWithInputDirectory$/;"	c
UniteWithProjectDir	plugged/unite.vim/plugin/unite.vim	/^      \\ UniteWithProjectDir$/;"	c
Unlock	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
UpdateIndex	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UpdateIndex(dir, info) abort$/;"	f
UrlEncode	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UrlEncode(str) abort$/;"	f
UrlParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UrlParse(url) abort$/;"	f
UrlPopulate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UrlPopulate(string, into) abort$/;"	f
UsableWin	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UsableWin(nr) abort$/;"	f
Usage	plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^:Usage$/;"	l
Usage	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
UserCommandCwd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandCwd(dir) abort$/;"	f
UserCommandList	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandList(...) abort$/;"	f
VIMS	plugged/vim-go/Makefile	/^VIMS ?= vim-8.0 vim-8.2 nvim$/;"	m
VersionCheck	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:VersionCheck() abort$/;"	f
VimEnter	plugged/coc.nvim/plugin/coc.vim	/^function! s:VimEnter() abort$/;"	f
VimEnterHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:VimEnterHandler()$/;"	f
VimExecPath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:VimExecPath() abort$/;"	f
VimLeavePre	plugged/coc.nvim/plugin/coc.vim	/^function! s:VimLeavePre() abort$/;"	f
VimSlash	plugged/vim-fugitive/autoload/fugitive.vim	/^  function! s:VimSlash(path) abort$/;"	f
VimSlash	plugged/vim-fugitive/plugin/fugitive.vim	/^  function! s:VimSlash(path) abort$/;"	f
WD	plugged/coc.nvim/build/index.js	/^"use strict";var nne=Object.create;var Gb=Object.defineProperty;var rne=Object.getOwnPropertyDescriptor;var one=Object.getOwnPropertyNames;var sne=Object.getPrototypeOf,ane=Object.prototype.hasOwnProperty;var k=(n,e)=>()=>(n&&(e=n(n=0)),e);var v=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),Sl=(n,e)=>{for(var t in e)Gb(n,t,{get:e[t],enumerable:!0})},sM=(n,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of one(e))!ane.call(n,r)&&r!==t&&Gb(n,r,{get:()=>e[r],enumerable:!(i=rne(e,r))||i.enumerable});return n};var co=(n,e,t)=>(t=n!=null?nne(sne(n)):{},sM(e||!n||!n.__esModule?Gb(t,"default",{value:n,enumerable:!0}):t,n)),ic=n=>sM(Gb({},"__esModule",{value:!0}),n);var cM=v((a0e,uM)=>{"use strict";var aM=(n=0)=>e=>`\\x1B[${38+n};5;${e}m`,lM=(n=0)=>(e,t,i)=>`\\x1B[${38+n};2;${e};${t};${i}m`;function lne(){let n=new Map,e={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};e.color.gray=e.color.blackBright,e.bgColor.bgGray=e.bgColor.bgBlackBright,e.color.grey=e.color.blackBright,e.bgColor.bgGrey=e.bgColor.bgBlackBright;for(let[t,i]of Object.entries(e)){for(let[r,o]of Object.entries(i))e[r]={open:`\\x1B[${o[0]}m`,close:`\\x1B[${o[1]}m`},i[r]=e[r],n.set(o[0],o[1]);Object.defineProperty(e,t,{value:i,enumerable:!1})}return Object.defineProperty(e,"codes",{value:n,enumerable:!1}),e.color.close="\\x1B[39m",e.bgColor.close="\\x1B[49m",e.color.ansi256=aM(),e.color.ansi16m=lM(),e.bgColor.ansi256=aM(10),e.bgColor.ansi16m=lM(10),Object.defineProperties(e,{rgbToAnsi256:{value:(t,i,r)=>t===i&&i===r?t<8?16:t>248?231:Math.round((t-8)\/247*24)+232:16+36*Math.round(t\/255*5)+6*Math.round(i\/255*5)+Math.round(r\/255*5),enumerable:!1},hexToRgb:{value:t=>{let i=\/(?<colorString>[a-f\\d]{6}|[a-f\\d]{3})\/i.exec(t.toString(16));if(!i)return[0,0,0];let{colorString:r}=i.groups;r.length===3&&(r=r.split("").map(s=>s+s).join(""));let o=Number.parseInt(r,16);return[o>>16&255,o>>8&255,o&255]},enumerable:!1},hexToAnsi256:{value:t=>e.rgbToAnsi256(...e.hexToRgb(t)),enumerable:!1}}),e}Object.defineProperty(uM,"exports",{enumerable:!0,get:lne})});var jD=v((l0e,hM)=>{function MD(n,e,t){var i,r,o,s,a;e==null&&(e=100);function l(){var c=Date.now()-s;c<e&&c>=0?i=setTimeout(l,e-c):(i=null,t||(a=n.apply(o,r),o=r=null))}var u=function(){o=this,r=arguments,s=Date.now();var c=t&&!i;return i||(i=setTimeout(l,e)),c&&(a=n.apply(o,r),o=r=null),a};return u.clear=function(){i&&(clearTimeout(i),i=null)},u.flush=function(){i&&(a=n.apply(o,r),o=r=null,clearTimeout(i),i=null)},u}MD.debounce=MD;hM.exports=MD});var mM=v((u0e,fM)=>{"use strict";fM.exports=gM;function gM(n,e,t){n instanceof RegExp&&(n=dM(n,t)),e instanceof RegExp&&(e=dM(e,t));var i=pM(n,e,t);return i&&{start:i[0],end:i[1],pre:t.slice(0,i[0]),body:t.slice(i[0]+n.length,i[1]),post:t.slice(i[1]+e.length)}}function dM(n,e){var t=e.match(n);return t?t[0]:null}gM.range=pM;function pM(n,e,t){var i,r,o,s,a,l=t.indexOf(n),u=t.indexOf(e,l+1),c=l;if(l>=0&&u>0){if(n===e)return[l,u];for(i=[],o=t.length;c>=0&&!a;)c==l?(i.push(c),l=t.indexOf(n,c+1)):i.length==1?a=[i.pop(),u]:(r=i.pop(),r<o&&(o=r,s=u),u=t.indexOf(e,c+1)),c=l<u&&l>=0?l:u;i.length&&(a=[o,s])}return a}});var DM=v((c0e,SM)=>{var bM=mM();SM.exports=hne;var yM="\\0SLASH"+Math.random()+"\\0",vM="\\0OPEN"+Math.random()+"\\0",AD="\\0CLOSE"+Math.random()+"\\0",wM="\\0COMMA"+Math.random()+"\\0",xM="\\0PERIOD"+Math.random()+"\\0";function OD(n){return parseInt(n,10)==n?parseInt(n,10):n.charCodeAt(0)}function une(n){return n.split("\\\\\\\\").join(yM).split("\\\\{").join(vM).split("\\\\}").join(AD).split("\\\\,").join(wM).split("\\\\.").join(xM)}function cne(n){return n.split(yM).join("\\\\").split(vM).join("{").split(AD).join("}").split(wM).join(",").split(xM).join(".")}function CM(n){if(!n)return[""];var e=[],t=bM("{","}",n);if(!t)return n.split(",");var i=t.pre,r=t.body,o=t.post,s=i.split(",");s[s.length-1]+="{"+r+"}";var a=CM(o);return o.length&&(s[s.length-1]+=a.shift(),s.push.apply(s,a)),e.push.apply(e,s),e}function hne(n){return n?(n.substr(0,2)==="{}"&&(n="\\\\{\\\\}"+n.substr(2)),_d(une(n),!0).map(cne)):[]}function dne(n){return"{"+n+"}"}function gne(n){return\/^-?0\\d\/.test(n)}function pne(n,e){return n<=e}function fne(n,e){return n>=e}function _d(n,e){var t=[],i=bM("{","}",n);if(!i)return[n];var r=i.pre,o=i.post.length?_d(i.post,!1):[""];if(\/\\$$\/.test(i.pre))for(var s=0;s<o.length;s++){var a=r+"{"+i.body+"}"+o[s];t.push(a)}else{var l=\/^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$\/.test(i.body),u=\/^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$\/.test(i.body),c=l||u,h=i.body.indexOf(",")>=0;if(!c&&!h)return i.post.match(\/,.*\\}\/)?(n=i.pre+"{"+i.body+AD+i.post,_d(n)):[n];var d;if(c)d=i.body.split(\/\\.\\.\/);else if(d=CM(i.body),d.length===1&&(d=_d(d[0],!1).map(dne),d.length===1))return o.map(function(re){return i.pre+d[0]+re});var g;if(c){var f=OD(d[0]),m=OD(d[1]),b=Math.max(d[0].length,d[1].length),w=d.length==3?Math.abs(OD(d[2])):1,x=pne,D=m<f;D&&(w*=-1,x=fne);var M=d.some(gne);g=[];for(var L=f;x(L,m);L+=w){var W;if(u)W=String.fromCharCode(L),W==="\\\\"&&(W="");else if(W=String(L),M){var N=b-W.length;if(N>0){var V=new Array(N+1).join("0");L<0?W="-"+V+W.slice(1):W=V+W}}g.push(W)}}else{g=[];for(var he=0;he<d.length;he++)g.push.apply(g,_d(d[he],!1))}for(var he=0;he<g.length;he++)for(var s=0;s<o.length;s++){var a=r+g[he]+o[s];(!e||c||a)&&t.push(a)}}return t}});var TM=v(zb=>{"use strict";Object.defineProperty(zb,"__esModule",{value:!0});zb.assertValidPattern=void 0;var mne=1024*64,bne=n=>{if(typeof n!="string")throw new TypeError("invalid pattern");if(n.length>mne)throw new TypeError("pattern is too long")};zb.assertValidPattern=bne});var PM=v(Kb=>{"use strict";Object.defineProperty(Kb,"__esModule",{value:!0});Kb.parseClass=void 0;var yne={"[:alnum:]":["\\\\p{L}\\\\p{Nl}\\\\p{Nd}",!0],"[:alpha:]":["\\\\p{L}\\\\p{Nl}",!0],"[:ascii:]":["\\\\x00-\\\\x7f",!1],"[:blank:]":["\\\\p{Zs}\\\\t",!0],"[:cntrl:]":["\\\\p{Cc}",!0],"[:digit:]":["\\\\p{Nd}",!0],"[:graph:]":["\\\\p{Z}\\\\p{C}",!0,!0],"[:lower:]":["\\\\p{Ll}",!0],"[:print:]":["\\\\p{C}",!0],"[:punct:]":["\\\\p{P}",!0],"[:space:]":["\\\\p{Z}\\\\t\\\\r\\\\n\\\\v\\\\f",!0],"[:upper:]":["\\\\p{Lu}",!0],"[:word:]":["\\\\p{L}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}",!0],"[:xdigit:]":["A-Fa-f0-9",!1]},Rd=n=>n.replace(\/[[\\]\\\\-]\/g,"\\\\$&"),vne=n=>n.replace(\/[-[\\]{}()*+?.,\\\\^$|#\\s]\/g,"\\\\$&"),kM=n=>n.join(""),wne=(n,e)=>{let t=e;if(n.charAt(t)!=="[")throw new Error("not in a brace expression");let i=[],r=[],o=t+1,s=!1,a=!1,l=!1,u=!1,c=t,h="";e:for(;o<n.length;){let m=n.charAt(o);if((m==="!"||m==="^")&&o===t+1){u=!0,o++;continue}if(m==="]"&&s&&!l){c=o+1;break}if(s=!0,m==="\\\\"&&!l){l=!0,o++;continue}if(m==="["&&!l){for(let[b,[w,x,D]]of Object.entries(yne))if(n.startsWith(b,o)){if(h)return["$.",!1,n.length-t,!0];o+=b.length,D?r.push(w):i.push(w),a=a||x;continue e}}if(l=!1,h){m>h?i.push(Rd(h)+"-"+Rd(m)):m===h&&i.push(Rd(m)),h="",o++;continue}if(n.startsWith("-]",o+1)){i.push(Rd(m+"-")),o+=2;continue}if(n.startsWith("-",o+1)){h=m,o+=2;continue}i.push(Rd(m)),o++}if(c<o)return["",!1,0,!1];if(!i.length&&!r.length)return["$.",!1,n.length-t,!0];if(r.length===0&&i.length===1&&\/^\\\\?.$\/.test(i[0])&&!u){let m=i[0].length===2?i[0].slice(-1):i[0];return[vne(m),!1,c-t,!1]}let d="["+(u?"^":"")+kM(i)+"]",g="["+(u?"":"^")+kM(r)+"]";return[i.length&&r.length?"("+d+"|"+g+")":i.length?d:g,a,c-t,!0]};Kb.parseClass=wne});var Vb=v(Qb=>{"use strict";Object.defineProperty(Qb,"__esModule",{value:!0});Qb.unescape=void 0;var xne=(n,{windowsPathsNoEscape:e=!1}={})=>e?n.replace(\/\\[([^\\\/\\\\])\\]\/g,"$1"):n.replace(\/((?!\\\\).|^)\\[([^\\\/\\\\])\\]\/g,"$1$2").replace(\/\\\\([^\\\/])\/g,"$1");Qb.unescape=xne});var BD=v(iy=>{"use strict";Object.defineProperty(iy,"__esModule",{value:!0});iy.AST=void 0;var Cne=PM(),ey=Vb(),Sne=new Set(["!","?","+","*","@"]),_M=n=>Sne.has(n),Dne="(?!(?:^|\/)\\\\.\\\\.?(?:$|\/))",ty="(?!\\\\.)",Tne=new Set(["[","."]),kne=new Set(["..","."]),Pne=new Set("().*{}+?[]^$\\\\!"),_ne=n=>n.replace(\/[-[\\]{}()*+?.,\\\\^$|#\\s]\/g,"\\\\$&"),HD="[^\/]",RM=HD+"*?",EM=HD+"+?",ND=class n{type;#e;#i;#o=!1;#n=[];#a;#u;#h;#l=!1;#s;#t;#f=!1;constructor(e,t,i={}){this.type=e,e&&(this.#i=!0),this.#a=t,this.#e=this.#a?this.#a.#e:this,this.#s=this.#e===this?i:this.#e.#s,this.#h=this.#e===this?[]:this.#e.#h,e==="!"&&!this.#e.#l&&this.#h.push(this),this.#u=this.#a?this.#a.#n.length:0}get hasMagic(){if(this.#i!==void 0)return this.#i;for(let e of this.#n)if(typeof e!="string"&&(e.type||e.hasMagic))return this.#i=!0;return this.#i}toString(){return this.#t!==void 0?this.#t:this.type?this.#t=this.type+"("+this.#n.map(e=>String(e)).join("|")+")":this.#t=this.#n.map(e=>String(e)).join("")}#b(){if(this!==this.#e)throw new Error("should only call on root");if(this.#l)return this;this.toString(),this.#l=!0;let e;for(;e=this.#h.pop();){if(e.type!=="!")continue;let t=e,i=t.#a;for(;i;){for(let r=t.#u+1;!i.type&&r<i.#n.length;r++)for(let o of e.#n){if(typeof o=="string")throw new Error("string part in extglob AST??");o.copyIn(i.#n[r])}t=i,i=t.#a}}return this}push(...e){for(let t of e)if(t!==""){if(typeof t!="string"&&!(t instanceof n&&t.#a===this))throw new Error("invalid part: "+t);this.#n.push(t)}}toJSON(){let e=this.type===null?this.#n.slice().map(t=>typeof t=="string"?t:t.toJSON()):[this.type,...this.#n.map(t=>t.toJSON())];return this.isStart()&&!this.type&&e.unshift([]),this.isEnd()&&(this===this.#e||this.#e.#l&&this.#a?.type==="!")&&e.push({}),e}isStart(){if(this.#e===this)return!0;if(!this.#a?.isStart())return!1;if(this.#u===0)return!0;let e=this.#a;for(let t=0;t<this.#u;t++){let i=e.#n[t];if(!(i instanceof n&&i.type==="!"))return!1}return!0}isEnd(){if(this.#e===this||this.#a?.type==="!")return!0;if(!this.#a?.isEnd())return!1;if(!this.type)return this.#a?.isEnd();let e=this.#a?this.#a.#n.length:0;return this.#u===e-1}copyIn(e){typeof e=="string"?this.push(e):this.push(e.clone(this))}clone(e){let t=new n(this.type,e);for(let i of this.#n)t.copyIn(i);return t}static#g(e,t,i,r){let o=!1,s=!1,a=-1,l=!1;if(t.type===null){let g=i,f="";for(;g<e.length;){let m=e.charAt(g++);if(o||m==="\\\\"){o=!o,f+=m;continue}if(s){g===a+1?(m==="^"||m==="!")&&(l=!0):m==="]"&&!(g===a+2&&l)&&(s=!1),f+=m;continue}else if(m==="["){s=!0,a=g,l=!1,f+=m;continue}if(!r.noext&&_M(m)&&e.charAt(g)==="("){t.push(f),f="";let b=new n(m,t);g=n.#g(e,b,g,r),t.push(b);continue}f+=m}return t.push(f),g}let u=i+1,c=new n(null,t),h=[],d="";for(;u<e.length;){let g=e.charAt(u++);if(o||g==="\\\\"){o=!o,d+=g;continue}if(s){u===a+1?(g==="^"||g==="!")&&(l=!0):g==="]"&&!(u===a+2&&l)&&(s=!1),d+=g;continue}else if(g==="["){s=!0,a=u,l=!1,d+=g;continue}if(_M(g)&&e.charAt(u)==="("){c.push(d),d="";let f=new n(g,c);c.push(f),u=n.#g(e,f,u,r);continue}if(g==="|"){c.push(d),d="",h.push(c),c=new n(null,t);continue}if(g===")")return d===""&&t.#n.length===0&&(t.#f=!0),c.push(d),d="",t.push(...h,c),u;d+=g}return t.type=null,t.#i=void 0,t.#n=[e.substring(i-1)],u}static fromGlob(e,t={}){let i=new n(null,void 0,t);return n.#g(e,i,0,t),i}toMMPattern(){if(this!==this.#e)return this.#e.toMMPattern();let e=this.toString(),[t,i,r,o]=this.toRegExpSource();if(!(r||this.#i||this.#s.nocase&&!this.#s.nocaseMagicOnly&&e.toUpperCase()!==e.toLowerCase()))return i;let a=(this.#s.nocase?"i":"")+(o?"u":"");return Object.assign(new RegExp(`^${t}$`,a),{_src:t,_glob:e})}get options(){return this.#s}toRegExpSource(e){let t=e??!!this.#s.dot;if(this.#e===this&&this.#b(),!this.type){let l=this.isStart()&&this.isEnd(),u=this.#n.map(g=>{let[f,m,b,w]=typeof g=="string"?n.#w(g,this.#i,l):g.toRegExpSource(e);return this.#i=this.#i||b,this.#o=this.#o||w,f}).join(""),c="";if(this.isStart()&&typeof this.#n[0]=="string"&&!(this.#n.length===1&&kne.has(this.#n[0]))){let f=Tne,m=t&&f.has(u.charAt(0))||u.startsWith("\\\\.")&&f.has(u.charAt(2))||u.startsWith("\\\\.\\\\.")&&f.has(u.charAt(4)),b=!t&&!e&&f.has(u.charAt(0));c=m?Dne:b?ty:""}let h="";return this.isEnd()&&this.#e.#l&&this.#a?.type==="!"&&(h="(?:$|\\\\\/)"),[c+u+h,(0,ey.unescape)(u),this.#i=!!this.#i,this.#o]}let i=this.type==="*"||this.type==="+",r=this.type==="!"?"(?:(?!(?:":"(?:",o=this.#d(t);if(this.isStart()&&this.isEnd()&&!o&&this.type!=="!"){let l=this.toString();return this.#n=[l],this.type=null,this.#i=void 0,[l,(0,ey.unescape)(this.toString()),!1,!1]}let s=!i||e||t||!ty?"":this.#d(!0);s===o&&(s=""),s&&(o=`(?:${o})(?:${s})*?`);let a="";if(this.type==="!"&&this.#f)a=(this.isStart()&&!t?ty:"")+EM;else{let l=this.type==="!"?"))"+(this.isStart()&&!t&&!e?ty:"")+RM+")":this.type==="@"?")":this.type==="?"?")?":this.type==="+"&&s?")":this.type==="*"&&s?")?":`)${this.type}`;a=r+o+l}return[a,(0,ey.unescape)(o),this.#i=!!this.#i,this.#o]}#d(e){return this.#n.map(t=>{if(typeof t=="string")throw new Error("string type in extglob ast??");let[i,r,o,s]=t.toRegExpSource(e);return this.#o=this.#o||s,i}).filter(t=>!(this.isStart()&&this.isEnd())||!!t).join("|")}static#w(e,t,i=!1){let r=!1,o="",s=!1;for(let a=0;a<e.length;a++){let l=e.charAt(a);if(r){r=!1,o+=(Pne.has(l)?"\\\\":"")+l;continue}if(l==="\\\\"){a===e.length-1?o+="\\\\\\\\":r=!0;continue}if(l==="["){let[u,c,h,d]=(0,Cne.parseClass)(e,a);if(h){o+=u,s=s||c,a+=h-1,t=t||d;continue}}if(l==="*"){i&&e==="*"?o+=EM:o+=RM,t=!0;continue}if(l==="?"){o+=HD,t=!0;continue}o+=_ne(l)}return[o,(0,ey.unescape)(e),!!t,s]}};iy.AST=ND});var WD=v(ny=>{"use strict";Object.defineProperty(ny,"__esModule",{value:!0});ny.escape=void 0;var Rne=(n,{windowsPathsNoEscape:e=!1}={})=>e?n.replace(\/[?*()[\\]]\/g,"[$&]"):n.replace(\/[?*()[\\]\\\\]\/g,"\\\\$&");ny.escape=Rne});var ys=v(Re=>{"use strict";var Ene=Re&&Re.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(Re,"__esModule",{value:!0});Re.unescape=Re.escape=Re.AST=Re.Minimatch=Re.match=Re.makeRe=Re.braceExpand=Re.defaults=Re.filter=Re.GLOBSTAR=Re.sep=Re.minimatch=void 0;var Lne=Ene(DM()),ry=TM(),FM=BD(),Ine=WD(),Fne=Vb(),Mne=(n,e,t={})=>((0,ry.assertValidPattern)(e),!t.nocomment&&e.charAt(0)==="#"?!1:new Dl(e,t).match(n));Re.minimatch=Mne;var jne=\/^\\*+([^+@!?\\*\\[\\(]*)$\/,One=n=>e=>!e.startsWith(".")&&e.endsWith(n),Ane=n=>e=>e.endsWith(n),Nne=n=>(n=n.toLowerCase(),e=>!e.startsWith(".")&&e.toLowerCase().endsWith(n)),Hne=n=>(n=n.toLowerCase(),e=>e.toLowerCase().endsWith(n)),Bne=\/^\\*+\\.\\*+$\/,Wne=n=>!n.startsWith(".")&&n.includes("."),qne=n=>n!=="."&&n!==".."&&n.includes("."),Yne=\/^\\.\\*+$\/,Une=n=>n!=="."&&n!==".."&&n.startsWith("."),Zne=\/^\\*+$\/,Jne=n=>n.length!==0&&!n.startsWith("."),$ne=n=>n.length!==0&&n!=="."&&n!=="..",Xne=\/^\\?+([^+@!?\\*\\[\\(]*)?$\/,Gne=([n,e=""])=>{let t=MM([n]);return e?(e=e.toLowerCase(),i=>t(i)&&i.toLowerCase().endsWith(e)):t},zne=([n,e=""])=>{let t=jM([n]);return e?(e=e.toLowerCase(),i=>t(i)&&i.toLowerCase().endsWith(e)):t},Kne=([n,e=""])=>{let t=jM([n]);return e?i=>t(i)&&i.endsWith(e):t},Qne=([n,e=""])=>{let t=MM([n]);return e?i=>t(i)&&i.endsWith(e):t},MM=([n])=>{let e=n.length;return t=>t.length===e&&!t.startsWith(".")},jM=([n])=>{let e=n.length;return t=>t.length===e&&t!=="."&&t!==".."},OM=typeof process=="object"&&process?typeof process.env=="object"&&process.env&&process.env.__MINIMATCH_TESTING_PLATFORM__||process.platform:"posix",LM={win32:{sep:"\\\\"},posix:{sep:"\/"}};Re.sep=OM==="win32"?LM.win32.sep:LM.posix.sep;Re.minimatch.sep=Re.sep;Re.GLOBSTAR=Symbol("globstar **");Re.minimatch.GLOBSTAR=Re.GLOBSTAR;var Vne="[^\/]",ere=Vne+"*?",tre="(?:(?!(?:\\\\\/|^)(?:\\\\.{1,2})($|\\\\\/)).)*?",ire="(?:(?!(?:\\\\\/|^)\\\\.).)*?",nre=(n,e={})=>t=>(0,Re.minimatch)(t,n,e);Re.filter=nre;Re.minimatch.filter=Re.filter;var Rr=(n,e={})=>Object.assign({},n,e),rre=n=>{if(!n||typeof n!="object"||!Object.keys(n).length)return Re.minimatch;let e=Re.minimatch;return Object.assign((i,r,o={})=>e(i,r,Rr(n,o)),{Minimatch:class extends e.Minimatch{constructor(r,o={}){super(r,Rr(n,o))}static defaults(r){return e.defaults(Rr(n,r)).Minimatch}},AST:class extends e.AST{constructor(r,o,s={}){super(r,o,Rr(n,s))}static fromGlob(r,o={}){return e.AST.fromGlob(r,Rr(n,o))}},unescape:(i,r={})=>e.unescape(i,Rr(n,r)),escape:(i,r={})=>e.escape(i,Rr(n,r)),filter:(i,r={})=>e.filter(i,Rr(n,r)),defaults:i=>e.defaults(Rr(n,i)),makeRe:(i,r={})=>e.makeRe(i,Rr(n,r)),braceExpand:(i,r={})=>e.braceExpand(i,Rr(n,r)),match:(i,r,o={})=>e.match(i,r,Rr(n,o)),sep:e.sep,GLOBSTAR:Re.GLOBSTAR})};Re.defaults=rre;Re.minimatch.defaults=Re.defaults;var ore=(n,e={})=>((0,ry.assertValidPattern)(n),e.nobrace||!\/\\{(?:(?!\\{).)*\\}\/.test(n)?[n]:(0,Lne.default)(n));Re.braceExpand=ore;Re.minimatch.braceExpand=Re.braceExpand;var sre=(n,e={})=>new Dl(n,e).makeRe();Re.makeRe=sre;Re.minimatch.makeRe=Re.makeRe;var are=(n,e,t={})=>{let i=new Dl(e,t);return n=n.filter(r=>i.match(r)),i.options.nonull&&!n.length&&n.push(e),n};Re.match=are;Re.minimatch.match=Re.match;var IM=\/[?*]|[+@!]\\(.*?\\)|\\[|\\]\/,lre=n=>n.replace(\/[-[\\]{}()*+?.,\\\\^$|#\\s]\/g,"\\\\$&"),Dl=class{options;set;pattern;windowsPathsNoEscape;nonegate;negate;comment;empty;preserveMultipleSlashes;partial;globSet;globParts;nocase;isWindows;platform;windowsNoMagicRoot;regexp;constructor(e,t={}){(0,ry.assertValidPattern)(e),t=t||{},this.options=t,this.pattern=e,this.platform=t.platform||OM,this.isWindows=this.platform==="win32",this.windowsPathsNoEscape=!!t.windowsPathsNoEscape||t.allowWindowsEscape===!1,this.windowsPathsNoEscape&&(this.pattern=this.pattern.replace(\/\\\\\/g,"\/")),this.preserveMultipleSlashes=!!t.preserveMultipleSlashes,this.regexp=null,this.negate=!1,this.nonegate=!!t.nonegate,this.comment=!1,this.empty=!1,this.partial=!!t.partial,this.nocase=!!this.options.nocase,this.windowsNoMagicRoot=t.windowsNoMagicRoot!==void 0?t.windowsNoMagicRoot:!!(this.isWindows&&this.nocase),this.globSet=[],this.globParts=[],this.set=[],this.make()}hasMagic(){if(this.options.magicalBraces&&this.set.length>1)return!0;for(let e of this.set)for(let t of e)if(typeof t!="string")return!0;return!1}debug(...e){}make(){let e=this.pattern,t=this.options;if(!t.nocomment&&e.charAt(0)==="#"){this.comment=!0;return}if(!e){this.empty=!0;return}this.parseNegate(),this.globSet=[...new Set(this.braceExpand())],t.debug&&(this.debug=(...o)=>console.error(...o)),this.debug(this.pattern,this.globSet);let i=this.globSet.map(o=>this.slashSplit(o));this.globParts=this.preprocess(i),this.debug(this.pattern,this.globParts);let r=this.globParts.map((o,s,a)=>{if(this.isWindows&&this.windowsNoMagicRoot){let l=o[0]===""&&o[1]===""&&(o[2]==="?"||!IM.test(o[2]))&&!IM.test(o[3]),u=\/^[a-z]:\/i.test(o[0]);if(l)return[...o.slice(0,4),...o.slice(4).map(c=>this.parse(c))];if(u)return[o[0],...o.slice(1).map(c=>this.parse(c))]}return o.map(l=>this.parse(l))});if(this.debug(this.pattern,r),this.set=r.filter(o=>o.indexOf(!1)===-1),this.isWindows)for(let o=0;o<this.set.length;o++){let s=this.set[o];s[0]===""&&s[1]===""&&this.globParts[o][2]==="?"&&typeof s[3]=="string"&&\/^[a-z]:$\/i.test(s[3])&&(s[2]="?")}this.debug(this.pattern,this.set)}preprocess(e){if(this.options.noglobstar)for(let i=0;i<e.length;i++)for(let r=0;r<e[i].length;r++)e[i][r]==="**"&&(e[i][r]="*");let{optimizationLevel:t=1}=this.options;return t>=2?(e=this.firstPhasePreProcess(e),e=this.secondPhasePreProcess(e)):t>=1?e=this.levelOneOptimize(e):e=this.adjascentGlobstarOptimize(e),e}adjascentGlobstarOptimize(e){return e.map(t=>{let i=-1;for(;(i=t.indexOf("**",i+1))!==-1;){let r=i;for(;t[r+1]==="**";)r++;r!==i&&t.splice(i,r-i)}return t})}levelOneOptimize(e){return e.map(t=>(t=t.reduce((i,r)=>{let o=i[i.length-1];return r==="**"&&o==="**"?i:r===".."&&o&&o!==".."&&o!=="."&&o!=="**"?(i.pop(),i):(i.push(r),i)},[]),t.length===0?[""]:t))}levelTwoFileOptimize(e){Array.isArray(e)||(e=this.slashSplit(e));let t=!1;do{if(t=!1,!this.preserveMultipleSlashes){for(let r=1;r<e.length-1;r++){let o=e[r];r===1&&o===""&&e[0]===""||(o==="."||o==="")&&(t=!0,e.splice(r,1),r--)}e[0]==="."&&e.length===2&&(e[1]==="."||e[1]==="")&&(t=!0,e.pop())}let i=0;for(;(i=e.indexOf("..",i+1))!==-1;){let r=e[i-1];r&&r!=="."&&r!==".."&&r!=="**"&&(t=!0,e.splice(i-1,2),i-=2)}}while(t);return e.length===0?[""]:e}firstPhasePreProcess(e){let t=!1;do{t=!1;for(let i of e){let r=-1;for(;(r=i.indexOf("**",r+1))!==-1;){let s=r;for(;i[s+1]==="**";)s++;s>r&&i.splice(r+1,s-r);let a=i[r+1],l=i[r+2],u=i[r+3];if(a!==".."||!l||l==="."||l===".."||!u||u==="."||u==="..")continue;t=!0,i.splice(r,1);let c=i.slice(0);c[r]="**",e.push(c),r--}if(!this.preserveMultipleSlashes){for(let s=1;s<i.length-1;s++){let a=i[s];s===1&&a===""&&i[0]===""||(a==="."||a==="")&&(t=!0,i.splice(s,1),s--)}i[0]==="."&&i.length===2&&(i[1]==="."||i[1]==="")&&(t=!0,i.pop())}let o=0;for(;(o=i.indexOf("..",o+1))!==-1;){let s=i[o-1];if(s&&s!=="."&&s!==".."&&s!=="**"){t=!0;let l=o===1&&i[o+1]==="**"?["."]:[];i.splice(o-1,2,...l),i.length===0&&i.push(""),o-=2}}}}while(t);return e}secondPhasePreProcess(e){for(let t=0;t<e.length-1;t++)for(let i=t+1;i<e.length;i++){let r=this.partsMatch(e[t],e[i],!this.preserveMultipleSlashes);r&&(e[t]=r,e[i]=[])}return e.filter(t=>t.length)}partsMatch(e,t,i=!1){let r=0,o=0,s=[],a="";for(;r<e.length&&o<t.length;)if(e[r]===t[o])s.push(a==="b"?t[o]:e[r]),r++,o++;else if(i&&e[r]==="**"&&t[o]===e[r+1])s.push(e[r]),r++;else if(i&&t[o]==="**"&&e[r]===t[o+1])s.push(t[o]),o++;else if(e[r]==="*"&&t[o]&&(this.options.dot||!t[o].startsWith("."))&&t[o]!=="**"){if(a==="b")return!1;a="a",s.push(e[r]),r++,o++}else if(t[o]==="*"&&e[r]&&(this.options.dot||!e[r].startsWith("."))&&e[r]!=="**"){if(a==="a")return!1;a="b",s.push(t[o]),r++,o++}else return!1;return e.length===t.length&&s}parseNegate(){if(this.nonegate)return;let e=this.pattern,t=!1,i=0;for(let r=0;r<e.length&&e.charAt(r)==="!";r++)t=!t,i++;i&&(this.pattern=e.slice(i)),this.negate=t}matchOne(e,t,i=!1){let r=this.options;if(this.isWindows){let m=typeof e[0]=="string"&&\/^[a-z]:$\/i.test(e[0]),b=!m&&e[0]===""&&e[1]===""&&e[2]==="?"&&\/^[a-z]:$\/i.test(e[3]),w=typeof t[0]=="string"&&\/^[a-z]:$\/i.test(t[0]),x=!w&&t[0]===""&&t[1]===""&&t[2]==="?"&&typeof t[3]=="string"&&\/^[a-z]:$\/i.test(t[3]),D=b?3:m?0:void 0,M=x?3:w?0:void 0;if(typeof D=="number"&&typeof M=="number"){let[L,W]=[e[D],t[M]];L.toLowerCase()===W.toLowerCase()&&(t[M]=L,M>D?t=t.slice(M):D>M&&(e=e.slice(D)))}}let{optimizationLevel:o=1}=this.options;o>=2&&(e=this.levelTwoFileOptimize(e)),this.debug("matchOne",this,{file:e,pattern:t}),this.debug("matchOne",e.length,t.length);for(var s=0,a=0,l=e.length,u=t.length;s<l&&a<u;s++,a++){this.debug("matchOne loop");var c=t[a],h=e[s];if(this.debug(t,c,h),c===!1)return!1;if(c===Re.GLOBSTAR){this.debug("GLOBSTAR",[t,c,h]);var d=s,g=a+1;if(g===u){for(this.debug("** at the end");s<l;s++)if(e[s]==="."||e[s]===".."||!r.dot&&e[s].charAt(0)===".")return!1;return!0}for(;d<l;){var f=e[d];if(this.debug(`$/;"	v
WinEnterHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:WinEnterHandler()$/;"	f
WinLeaveHandler	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^fun! s:WinLeaveHandler()$/;"	f
WinShellEsc	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:WinShellEsc(arg) abort$/;"	f
X	colors/jellybeans.vim	/^fun! s:X(group, fg, bg, attr, lcfg, lcbg)$/;"	f
ZoomWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:ZoomWindow() abort$/;"	f
["@function"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^		["@function"] = { link = "Function" }, -- For function (calls and definitions).$/;"	f
["@function.builtin"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^		["@function.builtin"] = { fg = C.peach, style = O.styles.functions or {} }, -- For builtin functions: table.insert in Lua.$/;"	f
["@function.builtin.bash"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^		["@function.builtin.bash"] = { fg = C.red, style = O.styles.miscs or { "italic" } },$/;"	f
["@function.call"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^		["@function.call"] = { link = "Function" }, -- function calls$/;"	f
["@function.macro"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^		["@function.macro"] = { fg = C.teal, style = O.styles.functions or {} }, -- For macro defined functions (calls and definitions): each macro_rules in Rust.$/;"	f
["@function.method"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^		["@function.method"] = { link = "Function" }, -- For method definitions.$/;"	f
["@function.method.call"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^		["@function.method.call"] = { link = "Function" }, -- For method calls.$/;"	f
["@function.method.call.php"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^		["@function.method.call.php"] = { link = "Function" },$/;"	f
["@function.method.php"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^		["@function.method.php"] = { link = "Function" },$/;"	f
["@keyword.function"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^		["@keyword.function"] = { fg = C.mauve, style = O.styles.keywords or {} }, -- For keywords used to define a function.$/;"	f
["@lsp.typemod.function.defaultLibrary"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/semantic_tokens.lua	/^		["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },$/;"	f
["@lsp.typemod.macro.defaultLibrary"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/semantic_tokens.lua	/^		["@lsp.typemod.macro.defaultLibrary"] = { link = "@function.builtin" },$/;"	f
["@lsp.typemod.method.defaultLibrary"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/semantic_tokens.lua	/^		["@lsp.typemod.method.defaultLibrary"] = { link = "@function.builtin" },$/;"	f
["@variable.parameter"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^		["@variable.parameter"] = { fg = C.maroon, style = O.styles.variables or {} }, -- For parameters of a function.$/;"	f
[[	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> [[ :<c-u>call go#textobj#FunctionJump('n', 'prev')<cr>$/;"	m
[[	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> [[ :<c-u>call go#textobj#FunctionJump('o', 'prev')<cr>$/;"	m
[g	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
]]	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> ]] :<c-u>call go#textobj#FunctionJump('n', 'next')<cr>$/;"	m
]]	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> ]] :<c-u>call go#textobj#FunctionJump('o', 'next')<cr>$/;"	m
]g	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
_G.check_back_space	plugged/coc.nvim/doc/coc-example-config.lua	/^function _G.check_back_space()$/;"	f
_G.show_docs	plugged/coc.nvim/doc/coc-example-config.lua	/^function _G.show_docs()$/;"	f
_SID	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^  function! s:_SID() abort$/;"	f
_SID	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^  function! s:_SID() abort$/;"	f
_SID	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^  function! s:_SID() abort$/;"	f
_SID	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^  function! s:_SID() abort$/;"	f
_SID	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^  function! s:_SID() abort$/;"	f
_SID	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:_SID() abort$/;"	f
_SID	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^  function! s:_SID() abort$/;"	f
_SID	plugged/unite.vim/autoload/vital/_unite/Vim/Message.vim	/^  function! s:_SID() abort$/;"	f
_SID	plugged/unite.vim/autoload/vital/unite.vim	/^  function! s:_SID() abort$/;"	f
__index 	plugged/catppuccin/lua/catppuccin/lib/vim/init.lua	/^	__index = function(_, k) return os.getenv(k) end,$/;"	f
__index 	plugged/catppuccin/lua/catppuccin/lib/vim/init.lua	/^	__index = function(_, k)$/;"	f
__init__	plugged/unite.vim/rplugin/python3/denite/kind/unite.py	/^    def __init__(self, vim):$/;"	m	class:Kind
__init__	plugged/unite.vim/rplugin/python3/denite/source/unite.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^    def __init__(self, vim):$/;"	m	class:Source
_compare	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:_compare(a, b) abort$/;"	f
_create_hash	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^function! s:_create_hash(dir, str) abort$/;"	f
_default_compare	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
_dot_to_sharp	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_dot_to_sharp(name) abort$/;"	f
_encode_name	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^function! s:_encode_name(cache_dir, filename) abort$/;"	f
_exists_autoload_func_with_source	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_exists_autoload_func_with_source(funcname) abort$/;"	f
_extract_files	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_extract_files(pattern, files) abort$/;"	f
_file2module	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_file2module(file) abort$/;"	f
_function	plugged/unite.vim/autoload/vital/unite.vim	/^  function! s:_function(fstr) abort$/;"	f
_getPrefix	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:_getPrefix() abort dict$/;"	f
_get_builtin_module	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_get_builtin_module(name) abort$/;"	f
_get_module	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_get_module(name) abort dict$/;"	f
_global_vital_files	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_global_vital_files() abort$/;"	f
_handleOldOptions	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
_has_copy_dir_exe	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:_has_copy_dir_exe() abort$/;"	f
_has_copy_exe	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:_has_copy_exe() abort$/;"	f
_has_move_exe	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:_has_move_exe() abort$/;"	f
_import	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_import(name) abort dict$/;"	f
_import_func_name	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_import_func_name(plugin_name, module_name) abort$/;"	f
_module_path	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_module_path(name) abort$/;"	f
_module_sid	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_module_sid(name) abort$/;"	f
_module_sid_base_dir	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_module_sid_base_dir() abort$/;"	f
_pad_with_char	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:_pad_with_char(str, left, right, char) abort$/;"	f
_parse_comments	plugged/vim-snippets/pythonx/vimsnippets.py	/^def _parse_comments(s):$/;"	f
_path2project_directory_git	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:_path2project_directory_git(path) abort$/;"	f
_path2project_directory_others	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:_path2project_directory_others(vcs, path) abort$/;"	f
_path2project_directory_svn	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:_path2project_directory_svn(path) abort$/;"	f
_redir	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_redir(cmd) abort$/;"	f
_replace	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:_replace(str, from, to, flags) abort$/;"	f
_runtime	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_runtime(path) abort$/;"	f
_self_vital_files	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_self_vital_files() abort$/;"	f
_sfuncname	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_sfuncname(sid, funcname) abort$/;"	f
_shellescape_robocopy	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:_shellescape_robocopy(path) abort$/;"	f
_sid	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_sid(path, filter_pattern) abort$/;"	f
_source	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:_source(path) abort$/;"	f
_split_by_wcswidth	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:_split_by_wcswidth(body, x) abort$/;"	f
_split_by_wcswidth_once	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:_split_by_wcswidth_once(body, x) abort$/;"	f
_unify_path	plugged/unite.vim/autoload/vital/unite.vim	/^  function! s:_unify_path(path) abort$/;"	f
_uniq	plugged/unite.vim/autoload/vital/unite.vim	/^  function! s:_uniq(list) abort$/;"	f
_usage	plugged/vim-go/scripts/test	/^_usage() {$/;"	f
_vital_created	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:_vital_created(module) abort$/;"	f
_vital_depends	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_depends	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_depends	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_loaded	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_loaded	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_loaded	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_warn_deprecated	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:_warn_deprecated(name, alternative) abort$/;"	f
_wcwidth	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
_wcwidth	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
abs_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:abs_path(bufnr, shellesc)$/;"	f
abspath	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:abspath(path) abort$/;"	f
ac	plugged/coc.nvim/doc/coc-example-config.vim	/^omap ac <Plug>(coc-classobj-a)$/;"	m
ac	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> ac :<c-u>call go#textobj#Comment('a')<cr>$/;"	m
acquire_theme_data	colors/PaperColor.vim	/^fun! s:acquire_theme_data()$/;"	f
action_delete	plugged/unite.vim/rplugin/python3/denite/kind/unite.py	/^    def action_delete(self, context):$/;"	m	class:Kind
action_do	plugged/unite.vim/rplugin/python3/denite/kind/unite.py	/^    def action_do(self, context):$/;"	m	class:Kind
action_preview	plugged/unite.vim/rplugin/python3/denite/kind/unite.py	/^    def action_preview(self, context):$/;"	m	class:Kind
activateAll	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll() abort$/;"	f
activateBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm) abort$/;"	f
activateDirNode	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode, ...) abort$/;"	f
activateFileNode	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node) abort$/;"	f
addChild	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:addChild(tag) abort dict$/;"	f
addHighlightTimer	plugged/coc.nvim/lua/coc/highlight.lua	/^local function addHighlightTimer(bufnr, ns, highlights, priority, maxCount)$/;"	f
addHighlights	plugged/coc.nvim/lua/coc/highlight.lua	/^local function addHighlights(bufnr, ns, highlights, priority)$/;"	f
addTag	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:addTag(tag) abort dict$/;"	f
add_action_highlights	plugged/coc.nvim/autoload/coc/notify.vim	/^function! s:add_action_highlights(before, lnum, highlights, actions) abort$/;"	f
add_db	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
add_highlights	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:add_highlights(winid, config, create) abort$/;"	f
add_highlights	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:add_highlights(bufnr, ns, highlights, priority) abort$/;"	f
add_highlights_timer	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:add_highlights_timer(bufnr, ns, highlights, priority) abort$/;"	f
add_history	plugged/unite.vim/autoload/unite/kinds/command.vim	/^function! s:add_history(type, command) abort "{{{$/;"	f
add_methods	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
add_section	plugged/vim-airline/autoload/airline/extensions/default.vim	/^  function! s:add_section(builder, context, key)$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_tag_recursive	plugged/tagbar/autoload/tagbar.vim	/^function! s:add_tag_recursive(parent, taginfo, pathlist) abort$/;"	f
adjust_header	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:adjust_header(bufnr, hunk_diff)$/;"	f
adjust_hunk_summary	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:adjust_hunk_summary(hunk_diff) abort$/;"	f
adjust_scroll	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^function! s:adjust_scroll(best_winline) abort "{{{$/;"	f
af	plugged/coc.nvim/doc/coc-example-config.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
af	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> af :<c-u>call go#textobj#Function('a')<cr>$/;"	m
airline	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^augroup airline#extensions#cursormode$/;"	a
airline#add_inactive_statusline_func	plugged/vim-airline/autoload/airline.vim	/^function! airline#add_inactive_statusline_func(name, ...)$/;"	f
airline#add_inactive_statusline_funcref	plugged/vim-airline/autoload/airline.vim	/^function! airline#add_inactive_statusline_funcref(function, ...)$/;"	f
airline#add_statusline_func	plugged/vim-airline/autoload/airline.vim	/^function! airline#add_statusline_func(name, ...)$/;"	f
airline#add_statusline_funcref	plugged/vim-airline/autoload/airline.vim	/^function! airline#add_statusline_funcref(function, ...)$/;"	f
airline#async#get_mq_async	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#get_mq_async(cmd, file)$/;"	f
airline#async#get_msgfmt_stat	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#get_msgfmt_stat(cmd, file)$/;"	f
airline#async#mq_output	plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#mq_output(buf, file)$/;"	f
airline#async#nvim_get_mq_async	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_get_mq_async(cmd, file)$/;"	f
airline#async#nvim_get_msgfmt_stat	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_get_msgfmt_stat(cmd, file)$/;"	f
airline#async#nvim_vcs_clean	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#nvim_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#nvim_vcs_untracked	plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#nvim_vcs_untracked(cfg, file, vcs)$/;"	f
airline#async#vcs_clean	plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vcs_untracked	plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vcs_untracked(config, file, vcs)$/;"	f
airline#async#vim7_vcs_clean	plugged/vim-airline/autoload/airline/async.vim	/^function! airline#async#vim7_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vim_vcs_clean	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#vim_vcs_clean(cmd, file, vcs)$/;"	f
airline#async#vim_vcs_untracked	plugged/vim-airline/autoload/airline/async.vim	/^  function! airline#async#vim_vcs_untracked(config, file)$/;"	f
airline#builder#get_next_group	plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#get_next_group(sections, i)$/;"	f
airline#builder#get_prev_group	plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#get_prev_group(sections, i)$/;"	f
airline#builder#new	plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#new(context)$/;"	f
airline#builder#should_change_group	plugged/vim-airline/autoload/airline/builder.vim	/^function! airline#builder#should_change_group(group1, group2)$/;"	f
airline#check_mode	plugged/vim-airline/autoload/airline.vim	/^function! airline#check_mode(winnr)$/;"	f
airline#cmdwinenter	plugged/vim-airline/plugin/airline.vim	/^function! airline#cmdwinenter(...)$/;"	f
airline#debug#profile1	plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile1()$/;"	f
airline#debug#profile2	plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile2()$/;"	f
airline#debug#profile3	plugged/vim-airline/autoload/airline/debug.vim	/^function! airline#debug#profile3()$/;"	f
airline#extensions#ale#get	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get(type)$/;"	f
airline#extensions#ale#get_error	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_error()$/;"	f
airline#extensions#ale#get_warning	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#get_warning()$/;"	f
airline#extensions#ale#init	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! airline#extensions#ale#init(ext)$/;"	f
airline#extensions#append_to_section	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#append_to_section(name, value)$/;"	f
airline#extensions#apply	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply(...)$/;"	f
airline#extensions#apply_left_override	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#apply_left_override(section1, section2)$/;"	f
airline#extensions#battery#init	plugged/vim-airline/autoload/airline/extensions/battery.vim	/^function! airline#extensions#battery#init(ext) abort$/;"	f
airline#extensions#battery#status	plugged/vim-airline/autoload/airline/extensions/battery.vim	/^function! airline#extensions#battery#status(...) abort$/;"	f
airline#extensions#bookmark#currentbookmark	plugged/vim-airline/autoload/airline/extensions/bookmark.vim	/^function! airline#extensions#bookmark#currentbookmark() abort$/;"	f
airline#extensions#bookmark#init	plugged/vim-airline/autoload/airline/extensions/bookmark.vim	/^function! airline#extensions#bookmark#init(ext) abort$/;"	f
airline#extensions#branch#get_head	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#get_head()$/;"	f
airline#extensions#branch#head	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#head()$/;"	f
airline#extensions#branch#init	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#init(ext)$/;"	f
airline#extensions#branch#update_untracked_config	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! airline#extensions#branch#update_untracked_config(file, vcs)$/;"	f
airline#extensions#bufferline#init	plugged/vim-airline/autoload/airline/extensions/bufferline.vim	/^function! airline#extensions#bufferline#init(ext)$/;"	f
airline#extensions#capslock#init	plugged/vim-airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#init(ext)$/;"	f
airline#extensions#capslock#status	plugged/vim-airline/autoload/airline/extensions/capslock.vim	/^function! airline#extensions#capslock#status()$/;"	f
airline#extensions#coc#get	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get(type) abort$/;"	f
airline#extensions#coc#get_current_function	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_current_function() abort$/;"	f
airline#extensions#coc#get_error	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_error() abort$/;"	f
airline#extensions#coc#get_status	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_status() abort$/;"	f
airline#extensions#coc#get_warning	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#get_warning() abort$/;"	f
airline#extensions#coc#init	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^function! airline#extensions#coc#init(ext) abort$/;"	f
airline#extensions#codeium#init	plugged/vim-airline/autoload/airline/extensions/codeium.vim	/^function! airline#extensions#codeium#init(ext) abort$/;"	f
airline#extensions#codeium#status	plugged/vim-airline/autoload/airline/extensions/codeium.vim	/^function! airline#extensions#codeium#status() abort$/;"	f
airline#extensions#commandt#apply	plugged/vim-airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#apply(...)$/;"	f
airline#extensions#commandt#init	plugged/vim-airline/autoload/airline/extensions/commandt.vim	/^function! airline#extensions#commandt#init(ext)$/;"	f
airline#extensions#csv#apply	plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#apply(...)$/;"	f
airline#extensions#csv#get_column	plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#get_column()$/;"	f
airline#extensions#csv#init	plugged/vim-airline/autoload/airline/extensions/csv.vim	/^function! airline#extensions#csv#init(ext)$/;"	f
airline#extensions#ctrlp#apply	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#apply(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline(...)$/;"	f
airline#extensions#ctrlp#ctrlp_airline_status	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#ctrlp_airline_status(...)$/;"	f
airline#extensions#ctrlp#generate_color_map	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#generate_color_map(dark, light, white)$/;"	f
airline#extensions#ctrlp#init	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#init(ext)$/;"	f
airline#extensions#ctrlp#load_theme	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^function! airline#extensions#ctrlp#load_theme(palette)$/;"	f
airline#extensions#ctrlspace#init	plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#init(ext) abort$/;"	f
airline#extensions#ctrlspace#statusline	plugged/vim-airline/autoload/airline/extensions/ctrlspace.vim	/^function! airline#extensions#ctrlspace#statusline(...) abort$/;"	f
airline#extensions#cursormode#activate	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#activate()$/;"	f
airline#extensions#cursormode#apply	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#apply(...)$/;"	f
airline#extensions#cursormode#init	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#init(ext)$/;"	f
airline#extensions#cursormode#set	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#set(...)$/;"	f
airline#extensions#cursormode#tmux_escape	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! airline#extensions#cursormode#tmux_escape(escape)$/;"	f
airline#extensions#default#apply	plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! airline#extensions#default#apply(builder, context) abort$/;"	f
airline#extensions#denite#apply	plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#apply(...) abort$/;"	f
airline#extensions#denite#check_denite_mode	plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#check_denite_mode(bufnr) abort$/;"	f
airline#extensions#denite#init	plugged/vim-airline/autoload/airline/extensions/denite.vim	/^function! airline#extensions#denite#init(ext) abort$/;"	f
airline#extensions#dirvish#apply	plugged/vim-airline/autoload/airline/extensions/dirvish.vim	/^function! airline#extensions#dirvish#apply(...) abort$/;"	f
airline#extensions#dirvish#init	plugged/vim-airline/autoload/airline/extensions/dirvish.vim	/^function! airline#extensions#dirvish#init(ext) abort$/;"	f
airline#extensions#eclim#creat_line	plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#creat_line(...)$/;"	f
airline#extensions#eclim#get_warnings	plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#get_warnings()$/;"	f
airline#extensions#eclim#init	plugged/vim-airline/autoload/airline/extensions/eclim.vim	/^function! airline#extensions#eclim#init(ext)$/;"	f
airline#extensions#example#apply	plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#apply(...)$/;"	f
airline#extensions#example#get_cats	plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#get_cats()$/;"	f
airline#extensions#example#init	plugged/vim-airline/autoload/airline/extensions/example.vim	/^function! airline#extensions#example#init(ext)$/;"	f
airline#extensions#fern#apply	plugged/vim-airline/autoload/airline/extensions/fern.vim	/^function! airline#extensions#fern#apply(...) abort$/;"	f
airline#extensions#fern#init	plugged/vim-airline/autoload/airline/extensions/fern.vim	/^function! airline#extensions#fern#init(ext) abort$/;"	f
airline#extensions#fugitiveline#bufname	plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! airline#extensions#fugitiveline#bufname() abort$/;"	f
airline#extensions#fugitiveline#init	plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! airline#extensions#fugitiveline#init(ext) abort$/;"	f
airline#extensions#fzf#apply	plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#apply(...) abort$/;"	f
airline#extensions#fzf#inactive_apply	plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#inactive_apply(...) abort$/;"	f
airline#extensions#fzf#init	plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#init(ext) abort$/;"	f
airline#extensions#fzf#statusline	plugged/vim-airline/autoload/airline/extensions/fzf.vim	/^function! airline#extensions#fzf#statusline(...) abort$/;"	f
airline#extensions#gen_tags#init	plugged/vim-airline/autoload/airline/extensions/gen_tags.vim	/^function! airline#extensions#gen_tags#init(ext) abort$/;"	f
airline#extensions#gen_tags#status	plugged/vim-airline/autoload/airline/extensions/gen_tags.vim	/^function! airline#extensions#gen_tags#status(...) abort$/;"	f
airline#extensions#get_loaded_extensions	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#get_loaded_extensions()$/;"	f
airline#extensions#gina#apply	plugged/vim-airline/autoload/airline/extensions/gina.vim	/^function! airline#extensions#gina#apply(...) abort$/;"	f
airline#extensions#gina#init	plugged/vim-airline/autoload/airline/extensions/gina.vim	/^function! airline#extensions#gina#init(ext) abort$/;"	f
airline#extensions#grepper#init	plugged/vim-airline/autoload/airline/extensions/grepper.vim	/^function! airline#extensions#grepper#init(ext)$/;"	f
airline#extensions#grepper#status	plugged/vim-airline/autoload/airline/extensions/grepper.vim	/^function! airline#extensions#grepper#status()$/;"	f
airline#extensions#gutentags#init	plugged/vim-airline/autoload/airline/extensions/gutentags.vim	/^function! airline#extensions#gutentags#init(ext)$/;"	f
airline#extensions#gutentags#status	plugged/vim-airline/autoload/airline/extensions/gutentags.vim	/^function! airline#extensions#gutentags#status()$/;"	f
airline#extensions#hunks#get_hunks	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_hunks() abort$/;"	f
airline#extensions#hunks#get_raw_hunks	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#get_raw_hunks() abort$/;"	f
airline#extensions#hunks#init	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! airline#extensions#hunks#init(ext) abort$/;"	f
airline#extensions#keymap#init	plugged/vim-airline/autoload/airline/extensions/keymap.vim	/^function! airline#extensions#keymap#init(ext)$/;"	f
airline#extensions#keymap#status	plugged/vim-airline/autoload/airline/extensions/keymap.vim	/^function! airline#extensions#keymap#status()$/;"	f
airline#extensions#languageclient#get	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get(type)$/;"	f
airline#extensions#languageclient#get_error	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get_error()$/;"	f
airline#extensions#languageclient#get_warning	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#get_warning()$/;"	f
airline#extensions#languageclient#init	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! airline#extensions#languageclient#init(ext)$/;"	f
airline#extensions#load	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#load()$/;"	f
airline#extensions#load_theme	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#load_theme()$/;"	f
airline#extensions#localsearch#apply	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#apply(...) abort$/;"	f
airline#extensions#localsearch#init	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#init(ext) abort$/;"	f
airline#extensions#localsearch#load_theme	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^function! airline#extensions#localsearch#load_theme(palette) abort$/;"	f
airline#extensions#lsp#get	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#get(type) abort$/;"	f
airline#extensions#lsp#get_error	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#get_error() abort$/;"	f
airline#extensions#lsp#get_warning	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#get_warning() abort$/;"	f
airline#extensions#lsp#init	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#init(ext) abort$/;"	f
airline#extensions#lsp#progress	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#progress() abort$/;"	f
airline#extensions#lsp#update	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! airline#extensions#lsp#update() abort$/;"	f
airline#extensions#neomake#get_errors	plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_errors()$/;"	f
airline#extensions#neomake#get_warnings	plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#get_warnings()$/;"	f
airline#extensions#neomake#init	plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! airline#extensions#neomake#init(ext)$/;"	f
airline#extensions#netrw#apply	plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#apply(...)$/;"	f
airline#extensions#netrw#init	plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#init(ext)$/;"	f
airline#extensions#netrw#sortstring	plugged/vim-airline/autoload/airline/extensions/netrw.vim	/^function! airline#extensions#netrw#sortstring()$/;"	f
airline#extensions#nrrwrgn#apply	plugged/vim-airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#apply(...)$/;"	f
airline#extensions#nrrwrgn#init	plugged/vim-airline/autoload/airline/extensions/nrrwrgn.vim	/^function! airline#extensions#nrrwrgn#init(ext)$/;"	f
airline#extensions#nvimlsp#get	plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#get(type) abort$/;"	f
airline#extensions#nvimlsp#get_error	plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#get_error() abort$/;"	f
airline#extensions#nvimlsp#get_warning	plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#get_warning() abort$/;"	f
airline#extensions#nvimlsp#init	plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! airline#extensions#nvimlsp#init(ext) abort$/;"	f
airline#extensions#obsession#get_status	plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#get_status()$/;"	f
airline#extensions#obsession#init	plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^function! airline#extensions#obsession#init(ext)$/;"	f
airline#extensions#omnisharp#init	plugged/vim-airline/autoload/airline/extensions/omnisharp.vim	/^function! airline#extensions#omnisharp#init(ext) abort$/;"	f
airline#extensions#omnisharp#server_status	plugged/vim-airline/autoload/airline/extensions/omnisharp.vim	/^function! airline#extensions#omnisharp#server_status(...) abort$/;"	f
airline#extensions#po#apply	plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#apply(...)$/;"	f
airline#extensions#po#init	plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#init(ext)$/;"	f
airline#extensions#po#on_winenter	plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#on_winenter()$/;"	f
airline#extensions#po#shorten	plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#shorten()$/;"	f
airline#extensions#po#stats	plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! airline#extensions#po#stats()$/;"	f
airline#extensions#poetv#apply	plugged/vim-airline/autoload/airline/extensions/poetv.vim	/^function! airline#extensions#poetv#apply(...)$/;"	f
airline#extensions#poetv#init	plugged/vim-airline/autoload/airline/extensions/poetv.vim	/^function! airline#extensions#poetv#init(ext)$/;"	f
airline#extensions#poetv#update	plugged/vim-airline/autoload/airline/extensions/poetv.vim	/^function! airline#extensions#poetv#update()$/;"	f
airline#extensions#prepend_to_section	plugged/vim-airline/autoload/airline/extensions.vim	/^function! airline#extensions#prepend_to_section(name, value)$/;"	f
airline#extensions#promptline#init	plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#init(ext)$/;"	f
airline#extensions#promptline#set_prompt_colors	plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^function! airline#extensions#promptline#set_prompt_colors(palette)$/;"	f
airline#extensions#quickfix#apply	plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#apply(...)$/;"	f
airline#extensions#quickfix#get_type	plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#get_type()$/;"	f
airline#extensions#quickfix#inactive_qf_window	plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#inactive_qf_window(...)$/;"	f
airline#extensions#quickfix#init	plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^function! airline#extensions#quickfix#init(ext)$/;"	f
airline#extensions#rufo#apply	plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^function! airline#extensions#rufo#apply(...)$/;"	f
airline#extensions#rufo#get_status	plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^function! airline#extensions#rufo#get_status()$/;"	f
airline#extensions#rufo#init	plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^function! airline#extensions#rufo#init(ext)$/;"	f
airline#extensions#scrollbar#calculate	plugged/vim-airline/autoload/airline/extensions/scrollbar.vim	/^function! airline#extensions#scrollbar#calculate() abort$/;"	f
airline#extensions#scrollbar#init	plugged/vim-airline/autoload/airline/extensions/scrollbar.vim	/^function! airline#extensions#scrollbar#init(ext) abort$/;"	f
airline#extensions#searchcount#apply	plugged/vim-airline/autoload/airline/extensions/searchcount.vim	/^function! airline#extensions#searchcount#apply(...) abort$/;"	f
airline#extensions#searchcount#init	plugged/vim-airline/autoload/airline/extensions/searchcount.vim	/^function! airline#extensions#searchcount#init(ext) abort$/;"	f
airline#extensions#searchcount#status	plugged/vim-airline/autoload/airline/extensions/searchcount.vim	/^function! airline#extensions#searchcount#status() abort$/;"	f
airline#extensions#syntastic#get	plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get(type)$/;"	f
airline#extensions#syntastic#get_error	plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_error()$/;"	f
airline#extensions#syntastic#get_warning	plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#get_warning()$/;"	f
airline#extensions#syntastic#init	plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^function! airline#extensions#syntastic#init(ext)$/;"	f
airline#extensions#tabline#add_label	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#add_label(dict, type, right)$/;"	f
airline#extensions#tabline#add_tab_label	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#add_tab_label(dict)$/;"	f
airline#extensions#tabline#autoshow#off	plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#off()$/;"	f
airline#extensions#tabline#autoshow#on	plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! airline#extensions#tabline#autoshow#on()$/;"	f
airline#extensions#tabline#buffers#clickbuf	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#clickbuf(minwid, clicks, button, modifiers) abort$/;"	f
airline#extensions#tabline#buffers#get	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#get()$/;"	f
airline#extensions#tabline#buffers#invalidate	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#invalidate()$/;"	f
airline#extensions#tabline#buffers#off	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#off()$/;"	f
airline#extensions#tabline#buffers#on	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! airline#extensions#tabline#buffers#on()$/;"	f
airline#extensions#tabline#buflist#clean	plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#clean()$/;"	f
airline#extensions#tabline#buflist#invalidate	plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#invalidate()$/;"	f
airline#extensions#tabline#buflist#list	plugged/vim-airline/autoload/airline/extensions/tabline/buflist.vim	/^function! airline#extensions#tabline#buflist#list()$/;"	f
airline#extensions#tabline#builder#new	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! airline#extensions#tabline#builder#new(context)$/;"	f
airline#extensions#tabline#ctrlspace#add_buffer_section	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_buffer_section(builder, cur_tab, cur_buf, pull_right)$/;"	f
airline#extensions#tabline#ctrlspace#add_tab_section	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#add_tab_section(builder, pull_right)$/;"	f
airline#extensions#tabline#ctrlspace#get	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#get()$/;"	f
airline#extensions#tabline#ctrlspace#invalidate	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#invalidate()$/;"	f
airline#extensions#tabline#ctrlspace#off	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#off()$/;"	f
airline#extensions#tabline#ctrlspace#on	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^function! airline#extensions#tabline#ctrlspace#on()$/;"	f
airline#extensions#tabline#enable	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#enable()$/;"	f
airline#extensions#tabline#formatters#default#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^  function! airline#extensions#tabline#formatters#default#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#default#wrap_name	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/default.vim	/^  function! airline#extensions#tabline#formatters#default#wrap_name(bufnr, buffer_name)$/;"	f
airline#extensions#tabline#formatters#jsformatter#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/jsformatter.vim	/^function! airline#extensions#tabline#formatters#jsformatter#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#short_path#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path.vim	/^function! airline#extensions#tabline#formatters#short_path#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#short_path_improved#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path_improved.vim	/^function! airline#extensions#tabline#formatters#short_path_improved#format(bufnr, buffers) abort$/;"	f
airline#extensions#tabline#formatters#tabnr#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/tabnr.vim	/^function! airline#extensions#tabline#formatters#tabnr#format(tab_nr, buflist)$/;"	f
airline#extensions#tabline#formatters#unique_tail#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail.vim	/^function! airline#extensions#tabline#formatters#unique_tail#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#formatters#unique_tail_improved#format	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^function! airline#extensions#tabline#formatters#unique_tail_improved#format(bufnr, buffers)$/;"	f
airline#extensions#tabline#get	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#get()$/;"	f
airline#extensions#tabline#get_buffer_name	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#get_buffer_name(nr, ...)$/;"	f
airline#extensions#tabline#group_of_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#group_of_bufnr(tab_bufs, bufnr)$/;"	f
airline#extensions#tabline#init	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^function! airline#extensions#tabline#init(ext)$/;"	f
airline#extensions#tabline#load_theme	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#load_theme(palette)$/;"	f
airline#extensions#tabline#new_builder	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#new_builder()$/;"	f
airline#extensions#tabline#redraw	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#redraw()$/;"	f
airline#extensions#tabline#tabs#get	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#get()$/;"	f
airline#extensions#tabline#tabs#invalidate	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#invalidate()$/;"	f
airline#extensions#tabline#tabs#map_keys	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#map_keys()$/;"	f
airline#extensions#tabline#tabs#off	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#off()$/;"	f
airline#extensions#tabline#tabs#on	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#on()$/;"	f
airline#extensions#tabline#tabs#tabnr_formatter	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^function! airline#extensions#tabline#tabs#tabnr_formatter(nr, i) abort$/;"	f
airline#extensions#tabline#tabws#add_buffer_section	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#add_buffer_section(builder, cur_tab, cur_buf, pull_right)$/;"	f
airline#extensions#tabline#tabws#add_tab_section	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#add_tab_section(builder, pull_right)$/;"	f
airline#extensions#tabline#tabws#get	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#get()$/;"	f
airline#extensions#tabline#tabws#invalidate	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#invalidate()$/;"	f
airline#extensions#tabline#tabws#off	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#off()$/;"	f
airline#extensions#tabline#tabws#on	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^function! airline#extensions#tabline#tabws#on()$/;"	f
airline#extensions#tabline#title	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! airline#extensions#tabline#title(n)$/;"	f
airline#extensions#tabline#xtabline#filter_buffers	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#filter_buffers()$/;"	f
airline#extensions#tabline#xtabline#init	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#init()$/;"	f
airline#extensions#tabline#xtabline#maps	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#maps()$/;"	f
airline#extensions#tabline#xtabline#next_buffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#next_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#prev_buffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#prev_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#reopen_last_tab	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#reopen_last_tab()$/;"	f
airline#extensions#tabline#xtabline#select_buffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#select_buffer(nr)$/;"	f
airline#extensions#tabline#xtabline#toggle_buffers	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#toggle_buffers()$/;"	f
airline#extensions#tabline#xtabline#toggle_tabs	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#toggle_tabs()$/;"	f
airline#extensions#tabline#xtabline#update_obsession	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^function! airline#extensions#tabline#xtabline#update_obsession()$/;"	f
airline#extensions#tagbar#currenttag	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#currenttag()$/;"	f
airline#extensions#tagbar#get_status	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#get_status(...)$/;"	f
airline#extensions#tagbar#inactive_apply	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#inactive_apply(...)$/;"	f
airline#extensions#tagbar#init	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^function! airline#extensions#tagbar#init(ext)$/;"	f
airline#extensions#taglist#currenttag	plugged/vim-airline/autoload/airline/extensions/taglist.vim	/^function! airline#extensions#taglist#currenttag()$/;"	f
airline#extensions#taglist#init	plugged/vim-airline/autoload/airline/extensions/taglist.vim	/^function! airline#extensions#taglist#init(ext)$/;"	f
airline#extensions#term#apply	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#apply(...) abort$/;"	f
airline#extensions#term#inactive_apply	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#inactive_apply(...) abort$/;"	f
airline#extensions#term#init	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#init(ext) abort$/;"	f
airline#extensions#term#termmode	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! airline#extensions#term#termmode() abort$/;"	f
airline#extensions#tmuxline#init	plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#init(ext)$/;"	f
airline#extensions#tmuxline#set_tmux_colors	plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^function! airline#extensions#tmuxline#set_tmux_colors(palette)$/;"	f
airline#extensions#undotree#apply	plugged/vim-airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#apply(...)$/;"	f
airline#extensions#undotree#init	plugged/vim-airline/autoload/airline/extensions/undotree.vim	/^function! airline#extensions#undotree#init(ext)$/;"	f
airline#extensions#unicode#apply	plugged/vim-airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#apply(...)$/;"	f
airline#extensions#unicode#init	plugged/vim-airline/autoload/airline/extensions/unicode.vim	/^function! airline#extensions#unicode#init(ext)$/;"	f
airline#extensions#unite#apply	plugged/vim-airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#apply(...)$/;"	f
airline#extensions#unite#init	plugged/vim-airline/autoload/airline/extensions/unite.vim	/^function! airline#extensions#unite#init(ext)$/;"	f
airline#extensions#vim9lsp#get_errors	plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^function! airline#extensions#vim9lsp#get_errors() abort$/;"	f
airline#extensions#vim9lsp#get_warnings	plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^function! airline#extensions#vim9lsp#get_warnings() abort$/;"	f
airline#extensions#vim9lsp#init	plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^function! airline#extensions#vim9lsp#init(ext) abort$/;"	f
airline#extensions#vimagit#apply	plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#apply(...) abort$/;"	f
airline#extensions#vimagit#get_mode	plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#get_mode() abort$/;"	f
airline#extensions#vimagit#init	plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^function! airline#extensions#vimagit#init(ext) abort$/;"	f
airline#extensions#vimcmake#apply	plugged/vim-airline/autoload/airline/extensions/vimcmake.vim	/^function! airline#extensions#vimcmake#apply(...) abort$/;"	f
airline#extensions#vimcmake#inactive_apply	plugged/vim-airline/autoload/airline/extensions/vimcmake.vim	/^function! airline#extensions#vimcmake#inactive_apply(...) abort$/;"	f
airline#extensions#vimcmake#init	plugged/vim-airline/autoload/airline/extensions/vimcmake.vim	/^function! airline#extensions#vimcmake#init(ext) abort$/;"	f
airline#extensions#vimodoro#apply	plugged/vim-airline/autoload/airline/extensions/vimodoro.vim	/^function! airline#extensions#vimodoro#apply(...) abort$/;"	f
airline#extensions#vimodoro#init	plugged/vim-airline/autoload/airline/extensions/vimodoro.vim	/^function! airline#extensions#vimodoro#init(ext) abort$/;"	f
airline#extensions#vimtex#apply	plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#apply(...)$/;"	f
airline#extensions#vimtex#get_scope	plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#get_scope()$/;"	f
airline#extensions#vimtex#init	plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^function! airline#extensions#vimtex#init(ext)$/;"	f
airline#extensions#virtualenv#apply	plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#apply(...)$/;"	f
airline#extensions#virtualenv#init	plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#init(ext)$/;"	f
airline#extensions#virtualenv#update	plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^function! airline#extensions#virtualenv#update()$/;"	f
airline#extensions#vista#currenttag	plugged/vim-airline/autoload/airline/extensions/vista.vim	/^function! airline#extensions#vista#currenttag() abort$/;"	f
airline#extensions#vista#init	plugged/vim-airline/autoload/airline/extensions/vista.vim	/^function! airline#extensions#vista#init(ext) abort$/;"	f
airline#extensions#whitespace#check	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#check()$/;"	f
airline#extensions#whitespace#disable	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#disable()$/;"	f
airline#extensions#whitespace#init	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#init(...)$/;"	f
airline#extensions#whitespace#toggle	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! airline#extensions#whitespace#toggle()$/;"	f
airline#extensions#windowswap#get_status	plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#get_status()$/;"	f
airline#extensions#windowswap#init	plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^function! airline#extensions#windowswap#init(ext)$/;"	f
airline#extensions#wordcount#apply	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#apply(...)$/;"	f
airline#extensions#wordcount#formatters#default#to_string	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#to_string(wordcount)$/;"	f
airline#extensions#wordcount#formatters#default#update_fmt	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^function! airline#extensions#wordcount#formatters#default#update_fmt(...)$/;"	f
airline#extensions#wordcount#formatters#readingtime#to_string	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^function! airline#extensions#wordcount#formatters#readingtime#to_string(wordcount) abort$/;"	f
airline#extensions#wordcount#formatters#readingtime#update_fmt	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^function! airline#extensions#wordcount#formatters#readingtime#update_fmt(...) abort$/;"	f
airline#extensions#wordcount#get	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function airline#extensions#wordcount#get()$/;"	f
airline#extensions#wordcount#init	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! airline#extensions#wordcount#init(ext)$/;"	f
airline#extensions#xkblayout#init	plugged/vim-airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#init(ext)$/;"	f
airline#extensions#xkblayout#status	plugged/vim-airline/autoload/airline/extensions/xkblayout.vim	/^function! airline#extensions#xkblayout#status()$/;"	f
airline#extensions#ycm#get_error_count	plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_error_count() abort$/;"	f
airline#extensions#ycm#get_warning_count	plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#get_warning_count()$/;"	f
airline#extensions#ycm#init	plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^function! airline#extensions#ycm#init(ext)$/;"	f
airline#extensions#zoomwintab#apply	plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^function! airline#extensions#zoomwintab#apply(...) abort$/;"	f
airline#extensions#zoomwintab#init	plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^function! airline#extensions#zoomwintab#init(ext) abort$/;"	f
airline#formatter#short_path#format	plugged/vim-airline/autoload/airline/formatter/short_path.vim	/^function! airline#formatter#short_path#format(val) abort$/;"	f
airline#highlighter#add_accent	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#add_accent(accent) abort$/;"	f
airline#highlighter#add_separator	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#add_separator(from, to, inverse) abort$/;"	f
airline#highlighter#exec	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#exec(group, colors) abort$/;"	f
airline#highlighter#get_highlight	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#get_highlight(group, ...) abort$/;"	f
airline#highlighter#get_highlight2	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#get_highlight2(fg, bg, ...) abort$/;"	f
airline#highlighter#highlight	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#highlight(modes, ...) abort$/;"	f
airline#highlighter#highlight_modified_inactive	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#highlight_modified_inactive(bufnr) abort$/;"	f
airline#highlighter#load_theme	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#load_theme() abort$/;"	f
airline#highlighter#reset_hlcache	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! airline#highlighter#reset_hlcache() abort$/;"	f
airline#init#bootstrap	plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#bootstrap()$/;"	f
airline#init#sections	plugged/vim-airline/autoload/airline/init.vim	/^function! airline#init#sections()$/;"	f
airline#load_theme	plugged/vim-airline/autoload/airline.vim	/^function! airline#load_theme()$/;"	f
airline#mode_changed	plugged/vim-airline/autoload/airline.vim	/^function! airline#mode_changed()$/;"	f
airline#msdos#round_msdos_colors	plugged/vim-airline/autoload/airline/msdos.vim	/^	function! airline#msdos#round_msdos_colors(rgblist)$/;"	f
airline#parts#crypt	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#crypt()$/;"	f
airline#parts#define	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define(key, config)$/;"	f
airline#parts#define_accent	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_accent(key, accent)$/;"	f
airline#parts#define_condition	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_condition(key, predicate)$/;"	f
airline#parts#define_empty	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_empty(keys)$/;"	f
airline#parts#define_function	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_function(key, name)$/;"	f
airline#parts#define_minwidth	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_minwidth(key, width)$/;"	f
airline#parts#define_raw	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_raw(key, raw)$/;"	f
airline#parts#define_text	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#define_text(key, text)$/;"	f
airline#parts#ffenc	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#ffenc()$/;"	f
airline#parts#filetype	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#filetype()$/;"	f
airline#parts#get	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#get(key)$/;"	f
airline#parts#iminsert	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#iminsert()$/;"	f
airline#parts#mode	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#mode()$/;"	f
airline#parts#paste	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#paste()$/;"	f
airline#parts#readonly	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#readonly()$/;"	f
airline#parts#spell	plugged/vim-airline/autoload/airline/parts.vim	/^function! airline#parts#spell()$/;"	f
airline#remove_statusline_func	plugged/vim-airline/autoload/airline.vim	/^function! airline#remove_statusline_func(name)$/;"	f
airline#section#create	plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create(parts)$/;"	f
airline#section#create_left	plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create_left(parts)$/;"	f
airline#section#create_right	plugged/vim-airline/autoload/airline/section.vim	/^function! airline#section#create_right(parts)$/;"	f
airline#statusline	plugged/vim-airline/autoload/airline.vim	/^function! airline#statusline(winnr)$/;"	f
airline#switch_matching_theme	plugged/vim-airline/autoload/airline.vim	/^function! airline#switch_matching_theme()$/;"	f
airline#switch_theme	plugged/vim-airline/autoload/airline.vim	/^function! airline#switch_theme(name, ...)$/;"	f
airline#themes#catppuccin#refresh	plugged/catppuccin/autoload/airline/themes/catppuccin.vim	/^function! airline#themes#catppuccin#refresh()$/;"	f
airline#themes#generate_color_map	plugged/vim-airline/autoload/airline/themes.vim	/^  function! airline#themes#generate_color_map(sect1, sect2, sect3, ...)$/;"	f
airline#themes#get_highlight	plugged/vim-airline/autoload/airline/themes.vim	/^  function! airline#themes#get_highlight(group, ...)$/;"	f
airline#themes#get_highlight2	plugged/vim-airline/autoload/airline/themes.vim	/^  function! airline#themes#get_highlight2(fg, bg, ...)$/;"	f
airline#themes#patch	plugged/vim-airline/autoload/airline/themes.vim	/^  function! airline#themes#patch(palette)$/;"	f
airline#update_statusline	plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline()$/;"	f
airline#update_statusline_focuslost	plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline_focuslost()$/;"	f
airline#update_statusline_inactive	plugged/vim-airline/autoload/airline.vim	/^function! airline#update_statusline_inactive(range)$/;"	f
airline#update_tabline	plugged/vim-airline/autoload/airline.vim	/^function! airline#update_tabline()$/;"	f
airline#util#append	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#append(text, minwidth)$/;"	f
airline#util#doautocmd	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#doautocmd(event)$/;"	f
airline#util#exec_funcrefs	plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#exec_funcrefs(list, ...)$/;"	f
airline#util#getbufvar	plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#getbufvar(bufnr, key, def)$/;"	f
airline#util#getwinvar	plugged/vim-airline/autoload/airline/util.vim	/^  function! airline#util#getwinvar(winnr, key, def)$/;"	f
airline#util#has_custom_scm	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_custom_scm()$/;"	f
airline#util#has_fugitive	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_fugitive()$/;"	f
airline#util#has_gina	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_gina()$/;"	f
airline#util#has_lawrencium	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_lawrencium()$/;"	f
airline#util#has_vcscommand	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_vcscommand()$/;"	f
airline#util#has_vim9_script	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#has_vim9_script()$/;"	f
airline#util#ignore_buf	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#ignore_buf(name)$/;"	f
airline#util#ignore_next_focusgain	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#ignore_next_focusgain()$/;"	f
airline#util#is_popup_window	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#is_popup_window(winnr)$/;"	f
airline#util#prepend	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#prepend(text, minwidth)$/;"	f
airline#util#shorten	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#shorten(text, winwidth, minwidth, ...)$/;"	f
airline#util#stl_disabled	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#stl_disabled(winnr)$/;"	f
airline#util#strcharpart	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#strcharpart(...)$/;"	f
airline#util#strchars	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#strchars(str)$/;"	f
airline#util#themes	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#themes(match)$/;"	f
airline#util#try_focusgained	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#try_focusgained()$/;"	f
airline#util#warning	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#warning(msg)$/;"	f
airline#util#winwidth	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#winwidth(...) abort$/;"	f
airline#util#wrap	plugged/vim-airline/autoload/airline/util.vim	/^function! airline#util#wrap(text, minwidth)$/;"	f
airline_ale_count	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:airline_ale_count(cnt, symbol)$/;"	f
airline_ale_get_line_number	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:airline_ale_get_line_number(cnt, type) abort$/;"	f
airline_extensions	plugged/vim-airline/plugin/airline.vim	/^function! s:airline_extensions()$/;"	f
airline_languageclient_count	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:airline_languageclient_count(cnt, symbol)$/;"	f
airline_languageclient_get_line_number	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:airline_languageclient_get_line_number(type) abort$/;"	f
airline_lsp_count	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! s:airline_lsp_count(cnt, symbol) abort$/;"	f
airline_lsp_get_line_number	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^function! s:airline_lsp_get_line_number(cnt, type) abort$/;"	f
airline_nvimlsp_count	plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! s:airline_nvimlsp_count(cnt, symbol) abort$/;"	f
airline_nvimlsp_get_line_number	plugged/vim-airline/autoload/airline/extensions/nvimlsp.vim	/^function! s:airline_nvimlsp_get_line_number(cnt, type) abort$/;"	f
airline_refresh	plugged/vim-airline/plugin/airline.vim	/^function! s:airline_refresh(...)$/;"	f
airline_theme	plugged/vim-airline/plugin/airline.vim	/^function! s:airline_theme(...)$/;"	f
airline_toggle	plugged/vim-airline/plugin/airline.vim	/^function! s:airline_toggle()$/;"	f
ale_refresh	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:ale_refresh()$/;"	f
all	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:all(f, xs) abort$/;"	f
all_exit	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:all_exit() abort "{{{$/;"	f
and	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:and(xs) abort$/;"	f
animate	plugged/coc.nvim/autoload/coc/notify.vim	/^function! s:animate(winid, from, to, prev, ...) abort$/;"	f
any	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:any(f, xs) abort$/;"	f
any_git_changes	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^	local function any_git_changes()$/;"	f
append	plugged/unite.vim/plugin/unite/buffer.vim	/^function! s:append(path) abort "{{{$/;"	f
append	plugged/unite.vim/plugin/unite/window.vim	/^function! s:append() abort "{{{$/;"	f
append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
applyDocumentChanges	plugged/vim-go/autoload/go/lsp.vim	/^function s:applyDocumentChanges(changes)$/;"	f
applyTextEdits	plugged/vim-go/autoload/go/lsp.vim	/^function s:applyTextEdits(bufnr, msg) abort$/;"	f
apply_syntax_highlightings	colors/PaperColor.vim	/^fun! s:apply_syntax_highlightings()$/;"	f
ask	autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
ask_no_interrupt	autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
assert_list_of_dicts	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:assert_list_of_dicts(expected, actual)$/;"	f
assert_signs	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:assert_signs(expected, filename)$/;"	f
assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
async_guru	plugged/vim-go/autoload/go/guru.vim	/^function! s:async_guru(args) abort$/;"	f
autocmd_handler	plugged/vim-airline/autoload/airline/extensions/po.vim	/^function! s:autocmd_handler()$/;"	f
await	plugged/vim-go/autoload/go/promise.vim	/^function! s:await(timeout, default) dict$/;"	f
b) return op1	plugged/catppuccin/lua/catppuccin/lib/vim/bit.lua	/^		return memoize(function(b) return op1(a, b) end)$/;"	f
b.get_posttitle	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    function! b.get_posttitle(i) dict$/;"	f
b.get_pretitle	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^    function! b.get_pretitle(i) dict$/;"	f
b.get_title	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  function! b.get_title(i) dict$/;"	f
b.get_title	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  function! b.get_title(i) dict$/;"	f
b:current_syntax	plugged/tagbar/syntax/tagbar.vim	/^let b:current_syntax = 'tagbar'$/;"	v
b:current_syntax	plugged/unite.vim/syntax/unite.vim	/^let b:current_syntax = 'unite'$/;"	v
b:current_syntax	plugged/unite.vim/syntax/unite_exrename.vim	/^let b:current_syntax = 'unite_exrename'$/;"	v
b:current_syntax	plugged/vim-fugitive/syntax/fugitive.vim	/^let b:current_syntax = "fugitive"$/;"	v
b:current_syntax	plugged/vim-fugitive/syntax/fugitiveblame.vim	/^let b:current_syntax = "fugitiveblame"$/;"	v
b:current_syntax	plugged/vim-go/syntax/go.vim	/^let b:current_syntax = "go"$/;"	v
b:current_syntax	plugged/vim-go/syntax/godebugoutput.vim	/^let b:current_syntax = "godebugoutput"$/;"	v
b:current_syntax	plugged/vim-go/syntax/godebugstacktrace.vim	/^let b:current_syntax = "godebugoutput"$/;"	v
b:current_syntax	plugged/vim-go/syntax/godebugvariables.vim	/^let b:current_syntax = "godebugvariables"$/;"	v
b:current_syntax	plugged/vim-go/syntax/godefstack.vim	/^let b:current_syntax = "godefstack"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gohtmltmpl.vim	/^let b:current_syntax = "gohtmltmpl"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gomod.vim	/^let b:current_syntax = "gomod"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gosum.vim	/^let b:current_syntax = "gomod"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gotexttmpl.vim	/^let b:current_syntax = "gotexttmpl"$/;"	v
b:current_syntax	plugged/vim-go/syntax/gowork.vim	/^let b:current_syntax = "gowork"$/;"	v
b:current_syntax	plugged/vim-go/syntax/vimgo.vim	/^let b:current_syntax = "vimgo"$/;"	v
b:did_ftplugin	plugged/vim-fugitive/ftplugin/fugitiveblame.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-go/ftplugin/asm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-go/ftplugin/go.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-go/ftplugin/gomod.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	plugged/vim-go/indent/go.vim	/^let b:did_indent = 1$/;"	v
b:done_vimsnippets	plugged/vim-snippets/plugin/vimsnippets.vim	/^let b:done_vimsnippets = 1$/;"	v
b:undo_ftplugin	plugged/vim-go/ftplugin/asm.vim	/^let b:undo_ftplugin = "setl fo< com< cms<$/;"	v
b:undo_ftplugin	plugged/vim-go/ftplugin/go.vim	/^let b:undo_ftplugin = "setl fo< com< cms<"$/;"	v
b:undo_ftplugin	plugged/vim-go/ftplugin/gomod.vim	/^let b:undo_ftplugin = "setl fo< com< cms<$/;"	v
balloon	plugged/vim-go/autoload/go/tool.vim	/^function! s:balloon(msg)$/;"	f
bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
bar	autoload/plug.vim	/^function! s:bar()$/;"	f
basename	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:basename(path) abort$/;"	f
batchfile	autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
best_winline	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^function! s:best_winline() abort "{{{$/;"	f
binary_search	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
bit_bxor	plugged/catppuccin/lua/catppuccin/lib/vim/bit.lua	/^local function bit_bxor(a, b, c, ...)$/;"	f
bit_tobit	plugged/catppuccin/lua/catppuccin/lib/vim/bit.lua	/^local function bit_tobit(x)$/;"	f
bitop	plugged/catppuccin/lua/catppuccin/lib/vim/bit.lua	/^	local function bitop(a, b)$/;"	f
break	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:break(f, xs) abort$/;"	f
buf_execute	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:buf_execute(bufnr, cmds) abort$/;"	f
buf_line_count	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:buf_line_count(bufnr) abort$/;"	f
buffer_bookmark_action.func	plugged/unite.vim/plugin/unite/bookmark.vim	/^function! s:buffer_bookmark_action.func(candidate) abort "{{{$/;"	f
buffers	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^    let buffers = tabpagebuflist(curtab)$/;"	v
buflisted	plugged/unite.vim/autoload/unite/util.vim	/^function! s:buflisted(bufnr) abort "{{{$/;"	f
buildGitStatusCommand	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:buildGitStatusCommand(workdir) abort$/;"	f
buildGitWorkdirCommand	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:buildGitWorkdirCommand(root) abort$/;"	f
build_command	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:build_command(color)$/;"	f
build_command	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:build_command(cmd)$/;"	f
build_sections	plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! s:build_sections(builder, context, keys)$/;"	f
cG.BE	plugged/coc.nvim/build/index.js	/^`);return AE.warn(`workspace.${o} is deprecated, please use window.${o} instead.`,s),e[o]}});let i=this._env=await t.call("coc#util#vim_info");e.init(i),this.checkVersion(v_),this.configurations.updateMemoryConfig(this._env.config),this.workspaceFolderControl.setWorkspaceFolders(this._env.workspaceFolders),this.workspaceFolderControl.onDidChangeWorkspaceFolders(()=>{t.setVar("WorkspaceFolders",this.folderPaths,!0)}),this.files.attach(t,i,e),this.contentProvider.attach(t),this.registerTextDocumentContentProvider("output",Ma.getProvider(t)),this.keymaps.attach(t),this.autocmds.attach(t,i),this.watchers.attach(t,i),await this.documentsManager.attach(this.nvim,this._env),await this.editors.attach(t);let r=Ma.create("watchman",t);this.fileSystemWatchers.attach(r),this.strWdith&&this.strWdith.setAmbw(!i.ambiguousIsNarrow)}checkVersion(e){this._env.apiversion!=e&&this.nvim.echoError(`API version ${this._env.apiversion} is not ${v_}, please build coc.nvim by 'npm ci' after pull source code.`)}getDisplayWidth(e,t=!1){return this.strWdith.getWidth(e,t)}get version(){return Xl}get cwd(){return this.documentsManager.cwd}get env(){return this._env}get root(){return this.documentsManager.root||this.cwd}get rootPath(){return this.root}get bufnr(){return this.documentsManager.bufnr}get insertMode(){return F.insertMode}get floatSupported(){return!0}get uri(){return this.documentsManager.uri}get workspaceFolder(){return this.workspaceFolders[0]}get textDocuments(){return this.documentsManager.textDocuments}get documents(){return this.documentsManager.documents}get document(){return this.documentsManager.document}get workspaceFolders(){return this.workspaceFolderControl.workspaceFolders}checkPatterns(e,t){return this.workspaceFolderControl.checkPatterns(t??this.workspaceFolderControl.workspaceFolders,e)}get folderPaths(){return this.workspaceFolders.map(e=>Y.parse(e.uri).fsPath)}get channelNames(){return Ma.names}get pluginRoot(){return Jo}get isVim(){return this._env.isVim}get isNvim(){return!this._env.isVim}get completeOpt(){return""}get filetypes(){return this.documentsManager.filetypes}get languageIds(){return this.documentsManager.languageIds}createNameSpace(e){return u$(e)}has(e){return Rx(this.env,e)}registerAutocmd(e){if(e.request&&e.event!=="BufWritePre"){let t=Ql(Error().stack);AE.warn(`Extension "${t}" registered synchronized autocmd "${e.event}", which could be slow.`)}return this.autocmds.registerAutocmd(e)}watchOption(e,t,i){return this.watchers.watchOption(e,t,i)}watchGlobal(e,t,i){let r=t??function(){};return this.watchers.watchGlobal(e,r,i)}match(e,t){return MR(e,t.uri,t.languageId)}createFileSystemWatcher(e,t,i,r){return this.fileSystemWatchers.createFileSystemWatcher(e,t,i,r)}createFuzzyMatch(){return new hx(this.fuzzyExports)}getWatchmanPath(){return c$(this.configurations)}getConfiguration(e,t){return this.configurations.getConfiguration(e,t)}resolveJSONSchema(e){return this.configurations.getJSONSchema(e)}getDocument(e){return this.documentsManager.getDocument(e)}hasDocument(e,t){let i=this.documentsManager.getDocument(e);return i!=null&&(t!=null?i.version==t:!0)}getUri(e,t=""){let i=this.documentsManager.getDocument(e);return i?i.uri:t}isAttached(e){let t=this.documentsManager.getDocument(e);return t!=null&&t.attached}getAttachedDocument(e){let t=this.getDocument(e);if(!t)throw new Error(`Buffer ${e} not created.`);if(!t.attached)throw new Error(`Buffer ${e} not attached, ${t.notAttachReason}`);return t}getQuickfixItem(e,t,i="",r){return this.documentsManager.getQuickfixItem(e,t,i,r)}createMru(e){return new Do(e)}async getQuickfixList(e){return this.documentsManager.getQuickfixList(e)}async showLocations(e){await this.documentsManager.showLocations(e)}getLine(e,t){return this.documentsManager.getLine(e,t)}getWorkspaceFolder(e){return this.workspaceFolderControl.getWorkspaceFolder(typeof e=="string"?Y.parse(e):e)}readFile(e){return this.documentsManager.readFile(e)}async getCurrentState(){let e=await this.document,t=await gp(this.nvim);return{document:e.textDocument,position:t}}async getFormatOptions(e){return this.documentsManager.getFormatOptions(e)}resolveModule(e){return d$(e)}async runCommand(e,t,i){return Ko(e,{cwd:t??this.cwd},i)}expand(e){return this.documentsManager.expand(e)}async callAsync(e,t){return await Ex(this.nvim,e,t)}registerTextDocumentContentProvider(e,t){return this.contentProvider.registerTextDocumentContentProvider(e,t)}registerKeymap(e,t,i,r={}){return this.keymaps.registerKeymap(e,t,i,r)}registerExprKeymap(e,t,i,r=!1,o=!0){return this.keymaps.registerExprKeymap(e,t,i,r,o)}registerLocalKeymap(e,t,i,r,o=!1){return typeof arguments[0]=="string"&&(e=this.bufnr,t=arguments[0],i=arguments[1],r=arguments[2],o=arguments[3]??!1),this.keymaps.registerLocalKeymap(e,t,i,r,o)}createTask(e){return new Up(this.nvim,e)}createDatabase(e){return new qp(E.join(Cr,e+".json"))}registerBufferSync(e){return new Wp(e,this.documentsManager)}async attach(){await this.documentsManager.attach(this.nvim,this._env)}jumpTo(e,t,i){return this.files.jumpTo(e,t,i)}findUp(e){return h$(this.nvim,this.cwd,e)}applyEdit(e){return this.files.applyEdit(e)}createFile(e,t={}){return this.files.createFile(e,t)}loadFile(e,t){return this.files.loadResource(e,t)}async loadFiles(e){return this.files.loadResources(e)}async renameFile(e,t,i={}){await this.files.renameFile(e,t,i)}async deleteFile(e,t={}){await this.files.deleteFile(e,t)}async openResource(e){await this.files.openResource(e)}async computeWordRanges(e,t,i){let r=this.getDocument(e);return r?await r.chars.computeWordRanges(r.textDocument.lines,t,i):null}openTextDocument(e){return this.files.openTextDocument(e)}getRelativePath(e,t){return this.workspaceFolderControl.getRelativePath(e,t)}async findFiles(e,t,i,r){return this.files.findFiles(e,t,i,r)}detach(){this.documentsManager.detach()}reset(){this.statusLine.reset(),this.configurations.reset(),this.workspaceFolderControl.reset(),this.documentsManager.reset()}dispose(){Ma.dispose(),this.autocmds.dispose(),this.statusLine.dispose(),this.watchers.dispose(),this.contentProvider.dispose(),this.documentsManager.dispose(),this.configurations.dispose()}},y=new NE});var Ih,HE,Zp,bG=k(()=>{"use strict";je();ie();se();Ih="filter",HE=class{constructor(){this.history=[]}next(e){let t=this.history.indexOf(e);return this.history[t+1]??this.history[0]}previous(e){let t=this.history.indexOf(e);return this.history[t-1]??this.history[this.history.length-1]}add(e){let t=this.history.indexOf(e);t!==-1&&this.history.splice(t,1),this.history.unshift(e)}toJSON(){return`[${this.history.join(",")}]`}},Zp=class{constructor(e,t){this.nvim=e;this._activated=!1;this.history=new HE;this.disposables=[];this._onDidUpdate=new p.Emitter;this._onDidExit=new p.Emitter;this._onDidKeyPress=new p.Emitter;this.onDidKeyPress=this._onDidKeyPress.event;this.onDidUpdate=this._onDidUpdate.event;this.onDidExit=this._onDidExit.event;this.text="",F.on("InputChar",(i,r)=>{if(!(i!==Ih||!this._activated)){if(!t.includes(r)){if(r.length==1){this.text=this.text+r,this._onDidUpdate.fire(this.text);return}if(r=="<bs>"||r=="<C-h>"){this.text=this.text.slice(0,-1),this._onDidUpdate.fire(this.text);return}if(r=="<C-u>"){this.text="",this._onDidUpdate.fire(this.text);return}if(r=="<C-n>"){let o=this.history.next(this.text);o&&(this.text=o,this._onDidUpdate.fire(this.text));return}if(r=="<C-p>"){let o=this.history.previous(this.text);o&&(this.text=o,this._onDidUpdate.fire(this.text))}if(r=="<esc>"||r=="<C-o>"){this.deactivate();return}}this._onDidKeyPress.fire(r)}},null,this.disposables)}active(){this._activated=!0,this.text="",this.nvim.call("coc#prompt#start_prompt",[Ih],!0)}deactivate(e){if(!this._activated)return;this.nvim.call("coc#prompt#stop_prompt",[Ih],!0),this._activated=!1;let{text:t}=this;this.text="",this._onDidExit.fire(e),this.history.add(t)}get activated(){return this._activated}dispose(){this.deactivate(),this._onDidKeyPress.dispose(),this._onDidUpdate.dispose(),this._onDidExit.dispose(),z(this.disposables)}}});function BE(n){return wC.is(n.label)?n.label.label:n.label}var wC,yu,ko,Jp=k(()=>{"use strict";$e();fe();(e=>{function n(t){return typeof t.label=="string"}e.is=n})(wC||={});yu=(i=>(i[i.None=0]="None",i[i.Collapsed=1]="Collapsed",i[i.Expanded=2]="Expanded",i))(yu||{}),ko=class{constructor(e,t=0){this.collapsibleState=t;Y.isUri(e)?(this.resourceUri=e,this.label=E.basename(e.path),this.id=e.toString()):this.label=e}}});var yG={};Sl(yG,{default:()=>Vo});var WE,Ufe,Zfe,qE,YE,UE,Vo,$p=k(()=>{"use strict";ye();At();je();Ee();np();se();Le();hh();Go();Ye();ie();Ce();Ze();be();bG();Jp();WE=te("BasicTreeView"),Ufe=ve(500,10),Zfe=ve(5,1),qE="tree",YE=3e3,UE=1,Vo=class{constructor(e,t){this.viewId=e;this.opts=t;this._selection=[];this._keymapDefs=[];this._onDispose=new p.Emitter;this._onDidRefrash=new p.Emitter;this._onDidExpandElement=new p.Emitter;this._onDidCollapseElement=new p.Emitter;this._onDidChangeSelection=new p.Emitter;this._onDidChangeVisibility=new p.Emitter;this._onDidFilterStateChange=new p.Emitter;this._onDidCursorMoved=new p.Emitter;this.onDidRefrash=this._onDidRefrash.event;this.onDispose=this._onDispose.event;this.onDidExpandElement=this._onDidExpandElement.event;this.onDidCollapseElement=this._onDidCollapseElement.event;this.onDidChangeSelection=this._onDidChangeSelection.event;this.onDidChangeVisibility=this._onDidChangeVisibility.event;this.onDidFilterStateChange=this._onDidFilterStateChange.event;this.onDidCursorMoved=this._onDidCursorMoved.event;this.retryTimers=0;this.renderedItems=[];this.nodesMap=new Map;this.mutex=new Ai;this.disposables=[];this.lineState={titleCount:0,messageCount:0};this.loadConfiguration(),y.onDidChangeConfiguration(this.loadConfiguration,this,this.disposables),t.enableFilter&&(this.filter=new Zp(this.nvim,[this.keys.selectNext,this.keys.selectPrevious,this.keys.invoke]));let i=UE;UE=UE+1,this.bufname=`CocTree${i}`,this.tooltipFactory=R.createFloatFactory({modes:["n"]}),this.provider=t.treeDataProvider,this.leafIndent=t.disableLeafIndent!==!0,this.winfixwidth=t.winfixwidth!==!1,this.autoWidth=t.autoWidth===!0;let r;Object.defineProperty(this,"message",{set:l=>{r=l?l.replace(\/\\r?\\n\/g," "):void 0,this.updateHeadLines()},get:()=>r});let o=e.replace(\/\\r?\\n\/g," ");Object.defineProperty(this,"title",{set:l=>{o=l?l.replace(\/\\r?\\n\/g," "):void 0,this.updateHeadLines()},get:()=>o});let s;Object.defineProperty(this,"description",{set:l=>{s=l?l.replace(\/\\r?\\n\/g," "):void 0,this.updateHeadLines()},get:()=>s});let a;Object.defineProperty(this,"filterText",{set:l=>{let{titleCount:u,messageCount:c}=this.lineState,h=u+c;if(l!=null){let d=[{lnum:h,colStart:me(l),colEnd:me(l)+1,hlGroup:"Cursor"}];this.renderedItems=[],this.updateUI([l+" "],d,h,-1,!0),this.doFilter(l)}else a!=null&&this.updateUI([],[],h,h+1);a=l},get:()=>a}),this.provider.onDidChangeTreeData&&this.provider.onDidChangeTreeData(this.onDataChange,this,this.disposables),F.on("BufUnload",l=>{if(l!=this.bufnr)return;let u=this.winid!=null;this.winid=void 0,this.bufnr=void 0,u&&this._onDidChangeVisibility.fire({visible:!1}),this.dispose()},null,this.disposables),F.on("WinClosed",l=>{this.winid===l&&(this.winid=void 0,this._onDidChangeVisibility.fire({visible:!1}))},null,this.disposables),F.on("BufWinLeave",(l,u)=>{l==this.bufnr&&u==this.winid&&(this.winid=void 0,this._onDidChangeVisibility.fire({visible:!1}))},null,this.disposables),R.onDidTabClose(l=>{this._targetTabId===l&&this.dispose()},null,this.disposables),F.on("CursorHold",async(l,u)=>{l==this.bufnr&&await this.onHover(u[0])},null,this.disposables),F.on(["CursorMoved","BufEnter"],()=>{this.cancelResolve()},null,this.disposables),F.on("CursorMoved",(l,u)=>{if(l==this.bufnr){let c=this.getElementByLnum(u[0]-1);this._onDidCursorMoved.fire(c)}},null,this.disposables),F.on("WinEnter",l=>{if(l!=this.windowId||!this.filtering)return;let u=this.nvim.createBuffer(this.bufnr),c=this.startLnum-1,h=de(this.filterText).length,d=q.create(c,h,c,h+1);u.highlightRanges(qE,"Cursor",[d]),this.nvim.call("coc#prompt#start_prompt",[Ih],!0),this.redraw()},null,this.disposables),F.on("WinLeave",l=>{if(l!=this.windowId||!this.filtering)return;let u=this.nvim.createBuffer(this.bufnr);this.nvim.call("coc#prompt#stop_prompt",[Ih],!0),u.clearNamespace(qE,this.startLnum-1,this.startLnum)},null,this.disposables),this.disposables.push(this._onDidChangeVisibility,this._onDidCursorMoved,this._onDidChangeSelection,this._onDidCollapseElement,this._onDidExpandElement),this.filter&&(this.filter.onDidExit(l=>{this.nodesMap.clear(),this.filterText=void 0,this.itemsToFilter=void 0,l&&typeof this.provider.getParent=="function"?(this.renderedItems=[],this.reveal(l,{focus:!0})):(this.clearSelection(),this.render()),this._onDidFilterStateChange.fire(!1)}),this.filter.onDidUpdate(l=>{this.filterText=l}),this.filter.onDidKeyPress(async l=>{let u=pe(this.renderedItems),c=this.selection[0];if(l=="<up>"||l==this.keys.selectPrevious){let h=u.findIndex(f=>f.node==c),d=h==-1||h==0?u.length-1:h-1,g=u[d]?.node;g&&this.selectItem(g,!0)}if(l=="<down>"||l==this.keys.selectNext){let h=u.findIndex(f=>f.node==c),d=h==-1||h==u.length-1?0:h+1,g=u[d]?.node;g&&this.selectItem(g,!0)}if(l=="<cr>"||l==this.keys.invoke){if(!c)return;await this.invokeCommand(c),this.filter.deactivate(c)}}))}get windowId(){return this.winid}get targetTabId(){return this._targetTabId}get targetWinId(){return this._targetWinId}get targetBufnr(){return this._targetBufnr}get startLnum(){let e=this.filterText==null?0:1;return this.lineState.messageCount+this.lineState.titleCount+e}get nvim(){return y.nvim}get filtering(){return this.filter!=null&&this.filter.activated}loadConfiguration(e){if(!e||e.affectsConfiguration("tree")){let t=y.getConfiguration("tree",null);this.config={openedIcon:t.get("openedIcon"," "),closedIcon:t.get("closedIcon"," ")},this.keys={close:t.get("key.close"),invoke:t.get("key.invoke"),toggle:t.get("key.toggle"),actions:t.get("key.actions"),collapseAll:t.get("key.collapseAll"),toggleSelection:t.get("key.toggleSelection"),activeFilter:t.get("key.activeFilter"),selectNext:t.get("key.selectNext"),selectPrevious:t.get("key.selectPrevious")},e&&this.visible&&this.render()}}async doFilter(e){let t=[],i=0,r=await this.mutex.acquire();try{if(!this.itemsToFilter){let c=[],h=async g=>{for(let f of g){c.push(f);let m=await Promise.resolve(this.provider.getChildren(f));le(m)||await h(m)}},d=await Promise.resolve(this.provider.getChildren());await h(d),this.itemsToFilter=c}let o=e.toLowerCase(),s=e.length===0;for(let c of this.itemsToFilter){let h=await this.getTreeItem(c),d=BE(h),g=0;if(s)h.label={label:d,highlights:[]};else{let b=Aa(e,o,0,d,d.toLowerCase(),0,{boostFullMatch:!0,firstMatchCanBeWeak:!0});if(!b)continue;g=b[0],h.label={label:d,highlights:dx(d,b)}}h.collapsibleState=0;let{line:f,highlights:m}=this.getRenderedLine(h,i,0);t.push({level:0,node:c,line:f,index:i,score:g,highlights:m}),i+=1}t.sort((c,h)=>c.score!=h.score?h.score-c.score:c.index-h.index);let a=this.startLnum,l=[],u=this.renderedItems=t.map((c,h)=>(l.push(...c.highlights.map(d=>(d.lnum=a+h,d))),delete c.index,delete c.score,delete c.highlights,c));this.updateUI(u.map(c=>c.line),l,a,-1,!0),u.length?this.selectItem(u[0].node,!0):this.clearSelection(),this.redraw(),r()}catch(o){r(),WE.error("Error on tree filter:",o)}}async onHover(e){let t=this.getElementByLnum(e-1);if(!t||!this.nodesMap.has(t))return;let i=this.nodesMap.get(t),r=i.item;if(!r.tooltip&&!i.resolved&&(r=await this.resolveItem(t,r)),!r.tooltip)return;let s={filetype:Zn.is(r.tooltip)&&r.tooltip.kind==bo.Markdown?"markdown":"txt",content:Zn.is(r.tooltip)?r.tooltip.value:r.tooltip};await this.tooltipFactory.show([s])}async onClick(e){let{nvim:t}=this,[i,r]=await t.eval("[getline('.'),col('.')]"),o=hi(i,0,r-1),s=i[o.length],{openedIcon:a,closedIcon:l}=this.config;\/^\\s*$\/.test(o)&&[a,l].includes(s)?await this.toggleExpand(e):await this.invokeCommand(e)}async invokeCommand(e){let t=this.nodesMap.get(e);if(!t)return;this.selectItem(e);let i=t.item;if(i.command||(i=await this.resolveItem(e,i)),!i||!i.command)throw new Error("Failed to resolve command from TreeItem.");await ae.execute(i.command)}async invokeActions(e){if(!e)return;if(this.selectItem(e),typeof this.provider.resolveActions!="function"){await R.showWarningMessage("No actions");return}let t=this.nodesMap.get(e),i=await Promise.resolve(this.provider.resolveActions(t.item,e));if(!i||i.length==0){await R.showWarningMessage("No actions available");return}let r=i.map(s=>s.title),o=await R.showMenuPicker(r,"Choose action");o!=-1&&await Promise.resolve(i[o].handler(e))}async onDataChange(e){if(this.filtering){this.itemsToFilter=void 0,await this.doFilter(de(this.filterText));return}if(this.clearSelection(),!e){await this.render();return}let t=await this.mutex.acquire();try{let i=this.renderedItems,r=i.findIndex(o=>o.node===e);if(r!=-1&&this.bufnr){let s=i[r].level,a=0;for(let h=r;h<i.length;h++){let d=i[h];(h==r||d&&d.level>s)&&(a+=1)}let l=[],u=[],c=r+this.startLnum;await this.appendTreeNode(e,s,c,l,u),i.splice(r,a,...l),this.updateUI(l.map(h=>h.line),u,c,c+a)}t()}catch(i){let r=`Error on tree refresh: ${i}`;WE.error(r,i),this.nvim.errWriteLine("[coc.nvim] "+r),t()}}async resolveItem(e,t){if(typeof this.provider.resolveTreeItem=="function"){let i=this.resolveTokenSource=new p.CancellationTokenSource,r=i.token;if(t=await Promise.resolve(this.provider.resolveTreeItem(t,e,r)),i.dispose(),this.resolveTokenSource=void 0,r.isCancellationRequested)return}return this.nodesMap.set(e,{item:t,resolved:!0}),t}get visible(){return this.bufnr?this.winid!=null:!1}get valid(){return typeof this.bufnr=="number"}get selection(){return this._selection.slice()}async checkLines(){if(!this.bufnr)return!1;let t=await this.nvim.createBuffer(this.bufnr).lines,{titleCount:i,messageCount:r}=this.lineState;t=t.slice(i+r);let o=this.renderedItems.map(s=>s.line);return Be(t,o)}async toggleExpand(e){let t=this.nodesMap.get(e);if(!t)return;let i=t.item,r=this.getItemLnum(e),o=r-this.startLnum,s=this.renderedItems[o];if(!s||i.collapsibleState==0){if(typeof this.provider.getParent=="function"){let c=await Promise.resolve(this.provider.getParent(e));c&&(await this.toggleExpand(c),this.focusItem(c))}return}let a=0;if(i.collapsibleState==2){let c=s.level;for(let h=o+1;h<this.renderedItems.length;h++){let d=this.renderedItems[h];if(!d||d.level<=c)break;a+=1}i.collapsibleState=1}else i.collapsibleState==1&&(i.collapsibleState=2);let l=[],u=[];await this.appendTreeNode(s.node,s.level,r,l,u),this.renderedItems.splice(o,a+1,...l),this.updateUI(l.map(c=>c.line),u,r,r+a+1),this.refreshSigns(),i.collapsibleState==1?this._onDidCollapseElement.fire({element:e}):this._onDidExpandElement.fire({element:e})}toggleSelection(e){if(!e)return;let t=this._selection.findIndex(i=>i===e);t!==-1?this.unselectItem(t):this.selectItem(e)}clearSelection(){if(!this.bufnr)return;this._selection=[],this.nvim.createBuffer(this.bufnr).unplaceSign({group:"CocTree"}),this._onDidChangeSelection.fire({selection:[]})}selectItem(e,t,i){let{nvim:r}=this,o=this.getItemLnum(e);if(o==null||!this.bufnr)return;let s=r.createBuffer(this.bufnr),a=this._selection.includes(e);!this.opts.canSelectMany||t?this._selection=[e]:a||this._selection.push(e),r.pauseNotification(),(!this.opts.canSelectMany||t)&&s.unplaceSign({group:"CocTree"}),r.call("coc#compat#execute",[this.winid,`normal! ${o+1}G`],!0),s.placeSign({id:YE+o,lnum:o+1,name:"CocTreeSelected",group:"CocTree"}),i||this.redraw(),r.resumeNotification(!1,!0),a||this._onDidChangeSelection.fire({selection:this._selection})}unselectItem(e){let t=this._selection[e],i=this.getItemLnum(t);if(i==null||!this.bufnr)return;this._selection.splice(e,1),this.nvim.createBuffer(this.bufnr).unplaceSign({group:"CocTree",id:YE+i}),this._onDidChangeSelection.fire({selection:this._selection})}focusItem(e){if(!this.winid)return;let t=this.getItemLnum(e);t!=null&&this.nvim.call("coc#compat#execute",[this.winid,`exe ${t+1}`],!0)}getElementByLnum(e){let t=this.renderedItems[e-this.startLnum];return t?t.node:void 0}getItemLnum(e){let t=this.renderedItems.findIndex(i=>i.node===e);if(t!=-1)return this.startLnum+t}async getTreeItem(e){let t,i=!1,r=this.nodesMap.get(e);r!=null&&(t=r.item,i=r.resolved);let o=await Promise.resolve(this.provider.getTreeItem(e));return t&&o&&t.collapsibleState!=0&&o.collapsibleState!=0&&(o.collapsibleState=t.collapsibleState),this.nodesMap.set(e,{item:o,resolved:i}),o}getRenderedLine(e,t,i){let{openedIcon:r,closedIcon:o}=this.config,s=[],{label:a,deprecated:l,description:u}=e,c="  ".repeat(i),h=(g,f)=>{let m=me(c);s.push({lnum:t,hlGroup:f,colStart:m,colEnd:m+me(g)})};switch(e.collapsibleState){case 2:{h(r,"CocTreeOpenClose"),c+=r+" ";break}case 1:{h(o,"CocTreeOpenClose"),c+=o+" ";break}default:c+=this.leafIndent?"  ":""}if(e.icon){let{text:g,hlGroup:f}=e.icon;h(g,f),c+=g+" "}if(wC.is(a)&&Array.isArray(a.highlights)){let g=me(c);for(let f of a.highlights)s.push({lnum:t,hlGroup:"CocSearch",colStart:g+f[0],colEnd:g+f[1]})}let d=BE(e);return l&&h(d,"CocDeprecatedHighlight"),c+=d,u&&u.indexOf(`$/;"	f
cG.Nfe	plugged/coc.nvim/build/index.js	/^`)},r.push(async()=>{let x=this.documents.getDocument(d);!x||!x.attached||x.version!==m||(await x.applyEdits([f]),c.version=x.version)})}}else qr.is(u)?await this.createFile(cC(u.uri),u.options,r):vr.is(u)?await this.deleteFile(cC(u.uri),u.options,r):Yr.is(u)&&await this.renameFile(cC(u.oldUri),cC(u.newUri),u.options,r);if(r.length===0)return!0;t||(this.editState={edit:{documentChanges:i,changeAnnotations:e.changeAnnotations},changes:a,recovers:r,applied:!0}),this.nvim.redrawVim()}catch(s){return yfe.error("Error on applyEdits:",e,s),t||this.window.showErrorMessage(`Error on applyEdits: ${s}`),await this.undoChanges(r),!1}return t||o||this.window.showInformationMessage("Use ':wa' to save changes or ':CocCommand workspace.inspectEdit' to inspect."),!0}async undoChanges(e){for(;e.length>0;){let t=e.pop();await Promise.resolve(t())}}async inspectEdit(){if(!this.editState){this.window.showWarningMessage("No workspace edit to inspect");return}await new Ep(this.nvim,this.keymaps).show(this.editState)}async undoWorkspaceEdit(){let{editState:e}=this;if(!e||!e.applied){this.window.showWarningMessage("No workspace edit to undo");return}e.applied=!1,await this.undoChanges(e.recovers)}async redoWorkspaceEdit(){let{editState:e}=this;if(!e||e.applied){this.window.showWarningMessage("No workspace edit to redo");return}this.editState=void 0,await this.applyEdit(e.edit)}validateChanges(e){let{documents:t}=this;for(let i of e)if(xi.is(i)){let{uri:r,version:o}=i.textDocument,s=t.getDocument(r);if(typeof o=="number"&&o>0){if(!s)throw A4(r);if(s.version!=o)throw new Error(`${r} changed before apply edit`)}else if(!s&&!Kg(r))throw Pv(r)}else if(qr.is(i)||vr.is(i)){if(!Kg(i.uri))throw Pv(i.uri)}else if(Yr.is(i)&&(!Kg(i.oldUri)||!Kg(i.newUri)))throw Pv(i.oldUri)}async findFiles(e,t,i,r){let o=this.workspaceFolderControl.workspaceFolders;if(r?.isCancellationRequested||!o.length||i===0)return[];i=i??1\/0;let s=o.map(h=>Y.parse(h.uri).fsPath),a;typeof e!="string"?(a=e.pattern,s=[e.baseUri.fsPath]):a=e;let l=[],u=!1,c=new AbortController;r&&r.onCancellationRequested(()=>{c.abort()});for(let h of s){let d=await Zy.glob(a,{signal:c.signal,dot:!0,cwd:h,nodir:!0,absolute:!1});if(r?.isCancellationRequested)break;for(let g of d)if(!(t&&vfe(h,g,t))&&(l.push(Y.file(E.join(h,g))),l.length===i)){u=!0;break}if(u)break}return l}async fireWaitUntilEvent(e,t,i){let r=!0,o=[];e.fire({...t,waitUntil:s=>{if(!r)throw H4("waitUntil");let a=new Promise(u=>{setTimeout(u,this.operationTimeout)}),l=Promise.race([s,a]).then(u=>{if(u&&Hl.is(u))return this.applyEdit(u,!0)});o.push(l)}}),r=!1,await Promise.all(o)}}});function Ip(){return hC>dC.length-16&&(OX.default.randomFillSync(dC),hC=0),dC.slice(hC,hC+=16)}var OX,dC,hC,vE=k(()=>{OX=co(require("crypto")),dC=new Uint8Array(256),hC=dC.length});function gC(n,e=0){return mn[n[e+0]]+mn[n[e+1]]+mn[n[e+2]]+mn[n[e+3]]+"-"+mn[n[e+4]]+mn[n[e+5]]+"-"+mn[n[e+6]]+mn[n[e+7]]+"-"+mn[n[e+8]]+mn[n[e+9]]+"-"+mn[n[e+10]]+mn[n[e+11]]+mn[n[e+12]]+mn[n[e+13]]+mn[n[e+14]]+mn[n[e+15]]}var mn,wE=k(()=>{mn=[];for(let n=0;n<256;++n)mn.push((n+256).toString(16).slice(1))});function wfe(n,e,t){let i=e&&t||0,r=e||new Array(16);n=n||{};let o=n.node||AX,s=n.clockseq!==void 0?n.clockseq:xE;if(o==null||s==null){let d=n.random||(n.rng||Ip)();o==null&&(o=AX=[d[0]|1,d[1],d[2],d[3],d[4],d[5]]),s==null&&(s=xE=(d[6]<<8|d[7])&16383)}let a=n.msecs!==void 0?n.msecs:Date.now(),l=n.nsecs!==void 0?n.nsecs:SE+1,u=a-CE+(l-SE)\/1e4;if(u<0&&n.clockseq===void 0&&(s=s+1&16383),(u<0||a>CE)&&n.nsecs===void 0&&(l=0),l>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids\/sec");CE=a,SE=l,xE=s,a+=122192928e5;let c=((a&268435455)*1e4+l)%4294967296;r[i++]=c>>>24&255,r[i++]=c>>>16&255,r[i++]=c>>>8&255,r[i++]=c&255;let h=a\/4294967296*1e4&268435455;r[i++]=h>>>8&255,r[i++]=h&255,r[i++]=h>>>24&15|16,r[i++]=h>>>16&255,r[i++]=s>>>8|128,r[i++]=s&255;for(let d=0;d<6;++d)r[i+d]=o[d];return e||gC(r)}var AX,xE,CE,SE,mu,NX=k(()=>{vE();wE();CE=0,SE=0;mu=wfe});var HX,DE,BX=k(()=>{HX=co(require("crypto")),DE={randomUUID:HX.default.randomUUID}});function xfe(n,e,t){if(DE.randomUUID&&!e&&!n)return DE.randomUUID();n=n||{};let i=n.random||(n.rng||Ip)();if(i[6]=i[6]&15|64,i[8]=i[8]&63|128,e){t=t||0;for(let r=0;r<16;++r)e[t+r]=i[r];return e}return gC(i)}var Te,WX=k(()=>{BX();vE();wE();Te=xfe});var gt=k(()=>{NX();WX()});var UX=v((NNe,YX)=>{var TE=4294967296,qX=[];for(Lh=0;Lh<256;Lh++)qX[Lh]=(Lh>15?"":"0")+Lh.toString(16);var Lh,Fp=YX.exports=function(n,e){n instanceof Buffer?(this.buffer=n,this.offset=e||0):Object.prototype.toString.call(n)=="[object Uint8Array]"?(this.buffer=new Buffer(n),this.offset=e||0):(this.buffer=this.buffer||new Buffer(8),this.offset=0,this.setValue.apply(this,arguments))};Fp.MAX_INT=Math.pow(2,53);Fp.MIN_INT=-Math.pow(2,53);Fp.prototype={constructor:Fp,_2scomp:function(){for(var n=this.buffer,e=this.offset,t=1,i=e+7;i>=e;i--){var r=(n[i]^255)+t;n[i]=r&255,t=r>>8}},setValue:function(n,e){var t=!1;if(arguments.length==1)if(typeof n=="number"){if(t=n<0,n=Math.abs(n),e=n%TE,n=n\/TE,n>TE)throw new RangeError(n+" is outside Int64 range");n=n|0}else if(typeof n=="string")n=(n+"").replace(\/^0x\/,""),e=n.substr(-8),n=n.length>8?n.substr(0,n.length-8):"",n=parseInt(n,16),e=parseInt(e,16);else throw new Error(n+" must be a Number or String");for(var i=this.buffer,r=this.offset,o=7;o>=0;o--)i[r+o]=e&255,e=o==4?n:e>>>8;t&&this._2scomp()},toNumber:function(n){for(var e=this.buffer,t=this.offset,i=e[t]&128,r=0,o=1,s=7,a=1;s>=0;s--,a*=256){var l=e[t+s];i&&(l=(l^255)+o,o=l>>8,l=l&255),r+=l*a}return!n&&r>=Fp.MAX_INT?i?-1\/0:1\/0:i?-r:r},valueOf:function(){return this.toNumber(!1)},toString:function(n){return this.valueOf().toString(n||10)},toOctetString:function(n){for(var e=new Array(8),t=this.buffer,i=this.offset,r=0;r<8;r++)e[r]=qX[t[i+r]];return e.join(n||"")},toBuffer:function(n){if(n&&this.offset===0)return this.buffer;var e=new Buffer(8);return this.buffer.copy(e,0,this.offset,this.offset+8),e},copy:function(n,e){this.buffer.copy(n,e||0,this.offset,this.offset+8)},compare:function(n){if((this.buffer[this.offset]&128)!=(n.buffer[n.offset]&128))return n.buffer[n.offset]-this.buffer[this.offset];for(var e=0;e<8;e++)if(this.buffer[this.offset+e]!==n.buffer[n.offset+e])return this.buffer[this.offset+e]-n.buffer[n.offset+e];return 0},equals:function(n){return this.compare(n)===0},inspect:function(){return"[Int64 value:"+this+" octets:"+this.toOctetString(" ")+"]"}}});var tG=v(jp=>{var JX=require("events").EventEmitter,Cfe=require("util"),Sfe=require("os"),HNe=require("assert"),Mp=UX(),Xa=Sfe.endianness()=="BE";function $X(n){return Math.pow(2,Math.ceil(Math.log(n)\/Math.LN2))}function tn(n){this.buf=Buffer.alloc($X(n||8192)),this.readOffset=0,this.writeOffset=0}jp.Accumulator=tn;tn.prototype.writeAvail=function(){return this.buf.length-this.writeOffset};tn.prototype.readAvail=function(){return this.writeOffset-this.readOffset};tn.prototype.reserve=function(n){if(!(n<this.writeAvail())&&(this.readOffset>0&&(this.buf.copy(this.buf,0,this.readOffset,this.writeOffset),this.writeOffset-=this.readOffset,this.readOffset=0),!(n<this.writeAvail()))){var e=Buffer.alloc($X(this.buf.length+n-this.writeAvail()));this.buf.copy(e),this.buf=e}};tn.prototype.append=function(n){if(Buffer.isBuffer(n))this.reserve(n.length),n.copy(this.buf,this.writeOffset,0,n.length),this.writeOffset+=n.length;else{var e=Buffer.byteLength(n);this.reserve(e),this.buf.write(n,this.writeOffset),this.writeOffset+=e}};tn.prototype.assertReadableSize=function(n){if(this.readAvail()<n)throw new Error("wanted to read "+n+" bytes but only have "+this.readAvail())};tn.prototype.peekString=function(n){return this.assertReadableSize(n),this.buf.toString("utf-8",this.readOffset,this.readOffset+n)};tn.prototype.readString=function(n){var e=this.peekString(n);return this.readOffset+=n,e};tn.prototype.peekInt=function(n){switch(this.assertReadableSize(n),n){case 1:return this.buf.readInt8(this.readOffset,n);case 2:return Xa?this.buf.readInt16BE(this.readOffset,n):this.buf.readInt16LE(this.readOffset,n);case 4:return Xa?this.buf.readInt32BE(this.readOffset,n):this.buf.readInt32LE(this.readOffset,n);case 8:var e=this.buf.slice(this.readOffset,this.readOffset+8);return Xa?new Mp(e):new Mp(VX(e));default:throw new Error("invalid integer size "+n)}};tn.prototype.readInt=function(n){var e=this.peekInt(n);return e instanceof Mp&&isFinite(e.valueOf())&&(e=e.valueOf()),this.readOffset+=n,e};tn.prototype.peekDouble=function(){return this.assertReadableSize(8),Xa?this.buf.readDoubleBE(this.readOffset):this.buf.readDoubleLE(this.readOffset)};tn.prototype.readDouble=function(){var n=this.peekDouble();return this.readOffset+=8,n};tn.prototype.readAdvance=function(n){if(n>0)this.assertReadableSize(n);else if(n<0&&this.readOffset+n<0)throw new Error("advance with negative offset "+n+" would seek off the start of the buffer");this.readOffset+=n};tn.prototype.writeByte=function(n){this.reserve(1),this.buf.writeInt8(n,this.writeOffset),++this.writeOffset};tn.prototype.writeInt=function(n,e){switch(this.reserve(e),e){case 1:this.buf.writeInt8(n,this.writeOffset);break;case 2:Xa?this.buf.writeInt16BE(n,this.writeOffset):this.buf.writeInt16LE(n,this.writeOffset);break;case 4:Xa?this.buf.writeInt32BE(n,this.writeOffset):this.buf.writeInt32LE(n,this.writeOffset);break;default:throw new Error("unsupported integer size "+e)}this.writeOffset+=e};tn.prototype.writeDouble=function(n){this.reserve(8),Xa?this.buf.writeDoubleBE(n,this.writeOffset):this.buf.writeDoubleLE(n,this.writeOffset),this.writeOffset+=8};var PE=0,_E=1,RE=2,EE=3,LE=4,bC=5,mC=6,XX=7,GX=8,zX=9,KX=10,QX=11,Dfe=12,kE=0,ZX=1,Tfe=127,kfe=32767,Pfe=2147483647;function sr(){JX.call(this),this.buf=new tn,this.state=kE}Cfe.inherits(sr,JX);jp.BunserBuf=sr;sr.prototype.append=function(n,e){if(e)return this.buf.append(n),this.process(e);try{this.buf.append(n)}catch(t){this.emit("error",t);return}this.processLater()};sr.prototype.processLater=function(){var n=this;process.nextTick(function(){try{n.process(!1)}catch(e){n.emit("error",e)}})};sr.prototype.process=function(n){if(this.state==kE){if(this.buf.readAvail()<2)return;if(this.expectCode(0),this.expectCode(1),this.pduLen=this.decodeInt(!0),this.pduLen===!1){this.buf.readAdvance(-2);return}this.buf.reserve(this.pduLen),this.state=ZX}if(this.state==ZX){if(this.buf.readAvail()<this.pduLen)return;var e=this.decodeAny();if(n)return e;this.emit("value",e),this.state=kE}!n&&this.buf.readAvail()>0&&this.processLater()};sr.prototype.raise=function(n){throw new Error(n+", in Buffer of length "+this.buf.buf.length+" ("+this.buf.readAvail()+" readable) at offset "+this.buf.readOffset+" buffer: "+JSON.stringify(this.buf.buf.slice(this.buf.readOffset,this.buf.readOffset+32).toJSON()))};sr.prototype.expectCode=function(n){var e=this.buf.readInt(1);e!=n&&this.raise("expected bser opcode "+n+" but got "+e)};sr.prototype.decodeAny=function(){var n=this.buf.peekInt(1);switch(n){case EE:case LE:case bC:case mC:return this.decodeInt();case XX:return this.buf.readAdvance(1),this.buf.readDouble();case GX:return this.buf.readAdvance(1),!0;case zX:return this.buf.readAdvance(1),!1;case KX:return this.buf.readAdvance(1),null;case RE:return this.decodeString();case PE:return this.decodeArray();case _E:return this.decodeObject();case QX:return this.decodeTemplate();default:this.raise("unhandled bser opcode "+n)}};sr.prototype.decodeArray=function(){this.expectCode(PE);for(var n=this.decodeInt(),e=[],t=0;t<n;++t)e.push(this.decodeAny());return e};sr.prototype.decodeObject=function(){this.expectCode(_E);for(var n=this.decodeInt(),e={},t=0;t<n;++t){var i=this.decodeString(),r=this.decodeAny();e[i]=r}return e};sr.prototype.decodeTemplate=function(){this.expectCode(QX);for(var n=this.decodeArray(),e=this.decodeInt(),t=[],i=0;i<e;++i){for(var r={},o=0;o<n.length;++o){if(this.buf.peekInt(1)==Dfe){this.buf.readAdvance(1);continue}var s=this.decodeAny();r[n[o]]=s}t.push(r)}return t};sr.prototype.decodeString=function(){this.expectCode(RE);var n=this.decodeInt();return this.buf.readString(n)};sr.prototype.decodeInt=function(n){if(n&&this.buf.readAvail()<1)return!1;this.buf.assertReadableSize(1);var e=this.buf.peekInt(1),t=0;switch(e){case EE:t=1;break;case LE:t=2;break;case bC:t=4;break;case mC:t=8;break;default:this.raise("invalid bser int encoding "+e)}return n&&this.buf.readAvail()<1+t?!1:(this.buf.readAdvance(1),this.buf.readInt(t))};function _fe(n){var e=new sr,t=e.append(n,!0);if(e.buf.readAvail())throw Error("excess data found after input buffer, use BunserBuf instead");if(typeof t>"u")throw Error("no bser found in string and no error raised!?");return t}jp.loadFromBuffer=_fe;function VX(n){for(var e=Buffer.alloc(n.length),t=0;t<n.length;t++)e[t]=n[n.length-1-t];return e}function eG(n,e){var t=e.toBuffer();if(Xa){n.writeByte(mC),n.append(t);return}var i=VX(t);n.writeByte(mC),n.append(i)}function pC(n,e){var t=Math.abs(e);t<=Tfe?(n.writeByte(EE),n.writeInt(e,1)):t<=kfe?(n.writeByte(LE),n.writeInt(e,2)):t<=Pfe?(n.writeByte(bC),n.writeInt(e,4)):eG(n,new Mp(e))}function fC(n,e){switch(typeof e){case"number":isFinite(e)&&Math.floor(e)===e?pC(n,e):(n.writeByte(XX),n.writeDouble(e));return;case"string":n.writeByte(RE),pC(n,Buffer.byteLength(e)),n.append(e);return;case"boolean":n.writeByte(e?GX:zX);return;case"object":if(e===null){n.writeByte(KX);return}if(e instanceof Mp){eG(n,e);return}if(Array.isArray(e)){n.writeByte(PE),pC(n,e.length);for(var t=0;t<e.length;++t)fC(n,e[t]);return}n.writeByte(_E);for(var i=Object.keys(e),r=i.length,t=0;t<i.length;++t){var o=i[t],s=e[o];typeof s>"u"&&r--}pC(n,r);for(var t=0;t<i.length;++t){var o=i[t],s=e[o];if(!(typeof s>"u")){fC(n,o);try{fC(n,s)}catch(c){throw new Error(c.message+" (while serializing object property with name `"+o+"')")}}}return;default:throw new Error("cannot serialize type "+typeof e+" to BSER")}}function Rfe(n){var e=new tn;e.writeByte(0),e.writeByte(1),e.writeByte(bC),e.writeInt(0,4),fC(e,n);var t=e.writeOffset,i=t-7;return e.writeOffset=3,e.writeInt(i,4),e.writeOffset=t,e.buf.slice(0,t)}jp.dumpToBuffer=Rfe});var lG=v((WNe,aG)=>{"use strict";var Efe=require("net"),oG=require("events").EventEmitter,Lfe=require("util"),Ife=require("child_process"),sG=tG(),iG=["subscription","log"];function Hs(n){var e=this;oG.call(this),this.watchmanBinaryPath="watchman",n&&n.watchmanBinaryPath&&(this.watchmanBinaryPath=n.watchmanBinaryPath.trim()),this.commands=[]}Lfe.inherits(Hs,oG);aG.exports.Client=Hs;Hs.prototype.sendNextCommand=function(){this.currentCommand||(this.currentCommand=this.commands.shift(),this.currentCommand&&this.socket.write(sG.dumpToBuffer(this.currentCommand.cmd)))};Hs.prototype.cancelCommands=function(n){var e=new Error(n),t=this.commands;this.commands=[],this.currentCommand&&(t.unshift(this.currentCommand),this.currentCommand=null),t.forEach(function(i){i.cb(e)})};Hs.prototype.connect=function(){var n=this;function e(l){n.bunser=new sG.BunserBuf,n.bunser.on("value",function(u){for(var c=!1,h=0;h<iG.length;h++){var d=iG[h];d in u&&(c=d)}if(c)n.emit(c,u);else if(n.currentCommand){var g=n.currentCommand;if(n.currentCommand=null,"error"in u){var f=new Error(u.error);f.watchmanResponse=u,g.cb(f)}else g.cb(null,u)}n.sendNextCommand()}),n.bunser.on("error",function(u){n.emit("error",u)}),n.socket=Efe.createConnection(l),n.socket.on("connect",function(){n.connecting=!1,n.emit("connect"),n.sendNextCommand()}),n.socket.on("error",function(u){n.connecting=!1,n.emit("error",u)}),n.socket.on("data",function(u){n.bunser&&n.bunser.append(u)}),n.socket.on("end",function(){n.socket=null,n.bunser=null,n.cancelCommands("The watchman connection was closed"),n.emit("end")})}if(process.env.WATCHMAN_SOCK){e(process.env.WATCHMAN_SOCK);return}var t=["--no-pretty","get-sockname"],i=null,r=!1;function o(l){r||(r=!0,l.code==="EACCES"||l.errno==="EACCES"?l.message="The Watchman CLI is installed but cannot be spawned because of a permission problem":(l.code==="ENOENT"||l.errno==="ENOENT")&&(l.message="Watchman was not found in PATH.  See https:\/\/facebook.github.io\/watchman\/docs\/install.html for installation instructions"),console.error("Watchman: ",l.message),n.emit("error",l))}try{i=Ife.spawn(this.watchmanBinaryPath,t,{stdio:["ignore","pipe","pipe"],windowsHide:!0})}catch(l){o(l);return}var s=[],a=[];i.stdout.on("data",function(l){s.push(l)}),i.stderr.on("data",function(l){l=l.toString("utf8"),a.push(l),console.error(l)}),i.on("error",function(l){o(l)}),i.on("close",function(l,u){if(l!==0){o(new Error(n.watchmanBinaryPath+" "+t.join(" ")+" returned with exit code="+l+", signal="+u+", stderr= "+a.join("")));return}try{var c=JSON.parse(s.join(""));if("error"in c){var h=new Error(c.error);h.watchmanResponse=c,n.emit("error",h);return}e(c.sockname)}catch(d){n.emit("error",d)}})};Hs.prototype.command=function(n,e){if(e=e||function(){},this.commands.push({cmd:n,cb:e}),!this.socket){if(!this.connecting){this.connecting=!0,this.connect();return}return}this.sendNextCommand()};var nG={"cmd-watch-del-all":"3.1.1","cmd-watch-project":"3.1",relative_root:"3.3","term-dirname":"3.1","term-idirname":"3.1",wildmatch:"3.7"};function Ffe(n,e){n=n.split("."),e=e.split(".");for(var t=0;t<3;t++){var i=parseInt(n[t]||"0")-parseInt(e[t]||"0");if(i!=0)return i}return 0}function rG(n,e){return e in nG?Ffe(n,nG[e])>=0:!1}Hs.prototype._synthesizeCapabilityCheck=function(n,e,t){n.capabilities={};var i=n.version;return e.forEach(function(r){n.capabilities[r]=rG(i,r)}),t.forEach(function(r){var o=rG(i,r);n.capabilities[r]=o,o||(n.error="client required capability `"+r+"` is not supported by this server")}),n};Hs.prototype.capabilityCheck=function(n,e){var t=n.optional||[],i=n.required||[],r=this;this.command(["version",{optional:t,required:i}],function(o,s){if(o){e(o);return}if(!("capabilities"in s)&&(s=r._synthesizeCapabilityCheck(s,t,i),s.error)){o=new Error(s.error),o.watchmanResponse=s,e(o);return}e(null,s)})};Hs.prototype.end=function(){this.cancelCommands("The client was ended"),this.socket&&(this.socket.end(),this.socket=null),this.bunser=null}});function jfe(n){return!(n=="\/"||n=="\/tmp"||n=="\/private\/tmp"||n==Bt.tmpdir()||St(n,Bt.homedir(),!0)||E.parse(n).base==n)}var IE,Mfe,bu,FE=k(()=>{"use strict";gt();Ee();pt();fe();IE=te("core-watchman"),Mfe=["relative_root","cmd-watch-project","wildmatch","field-new"],bu=class n{constructor(e,t){this.channel=t;this._disposed=!1;let i=lG();this.client=new i.Client({watchmanBinaryPath:e}),this.client.setMaxListeners(300)}checkCapability(){let{client:e}=this;return new Promise((t,i)=>{e.capabilityCheck({optional:[],required:Mfe},(r,o)=>{if(r)return t(!1);let{capabilities:s}=o;for(let a of Object.keys(s))if(!s[a])return t(!1);t(!0)})})}async watchProject(e){let t=await this.command(["watch-project",e]),{watch:i,warning:r,relative_path:o}=t;return i?(r&&IE.warn(r),this.watch=i,this.relative_path=o,IE.info(`watchman watching project: ${e}`),this.appendOutput(`watchman watching project: ${e}`),!0):!1}command(e){return new Promise((t,i)=>{this.client.command(e,(r,o)=>{if(r)return i(r);t(o)})})}async subscribe(e,t){let{watch:i,relative_path:r}=this;if(!i)throw new Error("watchman not watching");let{clock:o}=await this.command(["clock",i]),s=mu(),a={expression:["allof",["match","**\/*","wholename"]],fields:["name","size","new","exists","type","mtime_ms","ctime_ms"],since:o},l=i;if(r&&(a.relative_root=r,l=E.join(i,r)),!this.client)return;let{subscribe:u}=await this.command(["subscribe",i,s,a]);return this.appendOutput(`subscribing "${e}" in ${l}`),this.client.on("subscription",c=>{if(!c||c.subscription!=s)return;let{files:h}=c;if(!h||(h=h.filter(g=>g.type=="f"&&wi(g.name,e,{dot:!0})),!h.length))return;let d=Object.assign({},c);this.relative_path&&(d.root=E.resolve(c.root,this.relative_path)),this.appendOutput(`file change detected: ${JSON.stringify(d,null,2)}`),t(d)}),{dispose:()=>{this.unsubscribe(u)},subscribe:u}}unsubscribe(e){if(this._disposed)return Promise.resolve();let{watch:t}=this;if(t)return this.appendOutput(`unsubscribe "${e}" in: ${t}`),this.command(["unsubscribe",t,e]).catch(i=>{i.message?.includes("The client was ended")&&IE.error(i)})}dispose(){this._disposed||(this._disposed=!0,this.client&&(this.client.end(),this.client=void 0))}appendOutput(e,t="Info"){this.channel&&this.channel.appendLine(`[${t}  - ${new Date().toLocaleTimeString()}] ${e}`)}static async createClient(e,t,i){if(!jfe(t))throw new Error(`Watch for ${t} is ignored`);let r;try{if(r=new n(e,i),!await r.checkCapability())throw new Error("required capabilities do not exist.");if(!await r.watchProject(t))throw new Error("unable to watch");return r}catch(o){throw r&&r.dispose(),o}}}});var Ofe,Op,ME,uG=k(()=>{"use strict";$e();Ee();se();Le();pt();fe();ie();FE();Ofe=te("fileSystemWatcher"),Op=class n{constructor(e,t){this.workspaceFolder=e;this.watchmanPath=t;this.clientsMap=new Map;this.disposables=[];this.creating=new Set;this._onDidCreateClient=new p.Emitter;this.disabled=!1;this.onDidCreateClient=this._onDidCreateClient.event}static{this.watchers=new Set}attach(e){this.channel=e;let t=i=>{let r=Y.parse(i.uri).fsPath;this.createClient(r)};this.workspaceFolder.workspaceFolders.forEach(i=>{t(i)}),this.workspaceFolder.onDidChangeWorkspaceFolders(i=>{i.added.forEach(r=>{t(r)}),i.removed.forEach(r=>{let o=Y.parse(r.uri).fsPath,s=this.clientsMap.get(o);s&&(this.clientsMap.delete(o),s.dispose())})},null,this.disposables)}waitClient(e){return this.clientsMap.has(e)?Promise.resolve():new Promise(t=>{let i=this.onDidCreateClient(r=>{r==e&&(i.dispose(),t())})})}async createClient(e){if(!(this.watchmanPath==null||this.has(e)||this.disabled))try{let t=await this.getWatchmanPath();this.creating.add(e);let i=await bu.createClient(t,e,this.channel);this.creating.delete(e),this.clientsMap.set(e,i);for(let r of n.watchers)r.listen(e,i);this._onDidCreateClient.fire(e)}catch(t){this.creating.delete(e),this.channel&&this.channel.appendLine(`Error on create watchman client: ${t}`)}}async getWatchmanPath(){let e=this.watchmanPath;return process.env.WATCHMAN_SOCK||(e=await Wo(this.watchmanPath,{all:!1})),e}has(e){let t=Array.from(this.clientsMap.keys());return t.push(...this.creating),t.some(i=>Di(i,e))}createFileSystemWatcher(e,t,i,r){let o=new ME(e,t,i,r),s=typeof e=="string"?void 0:e.baseUri.fsPath;for(let[a,l]of this.clientsMap.entries())s&&St(a,s,!0)&&(s=void 0),o.listen(a,l);return s&&this.createClient(s),n.watchers.add(o),o}dispose(){this._onDidCreateClient.dispose();for(let e of this.clientsMap.values())e&&e.dispose();this.clientsMap.clear(),n.watchers.clear(),z(this.disposables)}},ME=class{constructor(e,t,i,r){this.globPattern=e;this.ignoreCreateEvents=t;this.ignoreChangeEvents=i;this.ignoreDeleteEvents=r;this._onDidCreate=new p.Emitter;this._onDidChange=new p.Emitter;this._onDidDelete=new p.Emitter;this._onDidRename=new p.Emitter;this.disposables=[];this._disposed=!1;this.onDidCreate=this._onDidCreate.event;this.onDidChange=this._onDidChange.event;this.onDidDelete=this._onDidDelete.event;this.onDidRename=this._onDidRename.event;this._onDidListen=new p.Emitter;this.onDidListen=this._onDidListen.event}listen(e,t){let{globPattern:i,ignoreCreateEvents:r,ignoreChangeEvents:o,ignoreDeleteEvents:s}=this,a,l;if(typeof i=="string")a=i;else if(a=i.pattern,l=i.baseUri.fsPath,!St(e,l,!0))return;let u=c=>{let{root:h,files:d}=c;l&&!Di(h,l)?d=d.filter(g=>{if(g.type!="f")return!1;let f=E.join(h,g.name);return St(l,f)?wi(E.relative(l,f),a,{dot:!0}):!1}):d=d.filter(g=>g.type=="f"&&wi(g.name,a,{dot:!0}));for(let g of d){let f=Y.file(E.join(h,g.name));g.exists?g.new===!0?r||this._onDidCreate.fire(f):o||this._onDidChange.fire(f):s||this._onDidDelete.fire(f)}if(d.length==2&&d[0].exists!==d[1].exists){let g=d.find(m=>m.exists!==!0),f=d.find(m=>m.exists===!0);g.size==f.size&&this._onDidRename.fire({oldUri:Y.file(E.join(h,g.name)),newUri:Y.file(E.join(h,f.name))})}if(d.length>2&&d.length%2==0){let[g,f]=Gw(d,m=>m.exists===!1);if(g.length==f.length)for(let m of g){let b=f.find(w=>w.size==m.size&&w.mtime_ms==m.mtime_ms);b&&this._onDidRename.fire({oldUri:Y.file(E.join(h,m.name)),newUri:Y.file(E.join(h,b.name))})}}};t.subscribe(a,u).then(c=>{if(c){if(this._onDidListen.fire(),this.subscribe=c.subscribe,this._disposed)return c.dispose();this.disposables.push(c)}},c=>{c instanceof Error&&c.message.includes("client was ended")||Ofe.error(`Error on subscribe ${a}`,c)})}dispose(){this._disposed=!0,Op.watchers.delete(this),this._onDidRename.dispose(),this._onDidCreate.dispose(),this._onDidChange.dispose(),z(this.disposables)}}});function cG(n){return n=="n"||n=="o"||n=="x"||n=="v"?"<C-U>":n=="i"?"<C-o>":n=="s"?"<Esc>":""}function Nfe(n){return typeof n=="number"?n:F.bufnr}var Afe,Ap,hG=k(()=>{"use strict";je();Ee();ie();Ce();Afe=te("core-keymaps");Ap=class{constructor(){this.keymaps=new Map}attach(e){this.nvim=e}async doKeymap(e,t){let i=this.keymaps.get(e)??this.keymaps.get("coc-"+e);if(!i)return Afe.error(`keymap for ${e} not found`),t;let[r,o]=i,s=await Promise.resolve(r());return o&&await this.nvim.command(`silent! call repeat#set("\\\\<Plug>(coc-${e})", -1)`),s??t}registerKeymap(e,t,i,r={}){if(!t)throw new Error(`Invalid key ${t} of registerKeymap`);let o=`coc-${t}`;if(this.keymaps.has(o))throw new Error(`${t} already exists.`);let s=`<Plug>(${o})`;r=Object.assign({sync:!0,cancel:!0,silent:!0,repeat:!1},r);let{nvim:a}=this;this.keymaps.set(o,[i,!!r.repeat]);let l=r.sync?"request":"notify",u=r.cancel?1:0;for(let c of e)c=="i"?a.setKeymap(c,s,`coc#_insert_key('${l}', '${o}', ${u})`,{expr:!0,noremap:!0,silent:r.silent}):a.setKeymap(c,s,`:${cG(c)}call coc#rpc#${l}('doKeymap', ['${o}'])<cr>`,{noremap:!0,silent:r.silent});return p.Disposable.create(()=>{this.keymaps.delete(o);for(let c of e)a.deleteKeymap(c,s)})}registerExprKeymap(e,t,i,r=!1,o=!0){let s=Nfe(r),a=`${e}-${b_(t)}${r?`-${s}`:""}`,{nvim:l}=this,u;e=="i"?u=`coc#_insert_key('request', '${a}', ${o?"1":"0"})`:u=`coc#rpc#request('doKeymap', ['${a}'])`;let c={noremap:!0,silent:!0,expr:!0,nowait:!0};return r?l.createBuffer(s).setKeymap(e,t,u,c):l.setKeymap(e,t,u,c),this.keymaps.set(a,[i,!1]),p.Disposable.create(()=>{this.keymaps.delete(a),r?l.createBuffer(s).deleteKeymap(e,t):l.deleteKeymap(e,t)})}registerLocalKeymap(e,t,i,r,o){let{nvim:s}=this,a=s.createBuffer(e),l=`local-${e}-${t}-${b_(i)}`;this.keymaps.set(l,[r,!1]);let u=o?"notify":"request",c=cG(t);return a.setKeymap(t,i,`:${c}call coc#rpc#${u}('doKeymap', ['${l}'])<CR>`,{silent:!0,nowait:!0,noremap:!0}),p.Disposable.create(()=>{this.keymaps.delete(l),a.deleteKeymap(t,i)})}}});var dG,Np,gG=k(()=>{"use strict";je();Ee();se();ie();Ce();dG=te("watchers"),Np=class{constructor(){this.optionCallbacks=new Map;this.globalCallbacks=new Map;this.disposables=[];this._onDidRuntimePathChange=new p.Emitter;this.onDidRuntimePathChange=this._onDidRuntimePathChange.event;F.on("OptionSet",async(e,t,i)=>{let r=Array.from(this.optionCallbacks.get(e)??[]);await Promise.allSettled(r.map(o=>(async()=>{try{await Promise.resolve(o(t,i))}catch(s){this.nvim.errWriteLine(`Error on OptionSet '${e}': ${Jr(s)}`),dG.error("Error on OptionSet callback:",s)}})()))},null,this.disposables),F.on("GlobalChange",async(e,t,i)=>{let r=Array.from(this.globalCallbacks.get(e)??[]);await Promise.allSettled(r.map(o=>(async()=>{try{await Promise.resolve(o(t,i))}catch(s){this.nvim.errWriteLine(`Error on GlobalChange '${e}': ${Jr(s)}`),dG.error("Error on GlobalChange callback:",s)}})()))},null,this.disposables)}get options(){return Array.from(this.optionCallbacks.keys())}attach(e,t){this.nvim=e,this.env=t,this.watchOption("runtimepath",(i,r)=>{let o=i.split(","),a=r.split(",").filter(l=>!o.includes(l));a.length>0&&this._onDidRuntimePathChange.fire(a),this.env.runtimepath=r},this.disposables)}watchOption(e,t,i){let r=this.optionCallbacks.get(e);r||(r=new Set,this.optionCallbacks.set(e,r)),r.add(t);let o=`autocmd! coc_dynamic_option OptionSet ${e} call coc#rpc#notify('OptionSet',[expand('<amatch>'), v:option_old, v:option_new])`;this.nvim.command(o,!0);let s=p.Disposable.create(()=>{let a=this.optionCallbacks.get(e);a.delete(t),a.size===0&&this.nvim.command(`autocmd! coc_dynamic_option OptionSet ${e}`,!0)});return i&&i.push(s),s}watchGlobal(e,t,i){let{nvim:r}=this,o=this.globalCallbacks.get(e);o||(o=new Set,this.globalCallbacks.set(e,o)),o.add(t),r.call("coc#_watch",e,!0);let s=p.Disposable.create(()=>{let a=this.globalCallbacks.get(e);a.delete(t),a.size===0&&r.call("coc#_unwatch",e,!0)});return i&&i.push(s),s}dispose(){z(this.disposables),this._onDidRuntimePathChange.dispose()}}});function Hp(n){if(!(!n||!E.isAbsolute(n)))return{name:E.basename(n),uri:Y.file(n).toString()}}var yC,Hfe,Bfe,Wfe,qfe,Bp,vC=k(()=>{"use strict";$e();je();Ee();se();Le();qi();Is();pt();fe();Ye();ie();Xo();yC=(i=>(i[i.Buffer=0]="Buffer",i[i.LanguageServer=1]="LanguageServer",i[i.Global=2]="Global",i))(yC||{}),Hfe=te("core-workspaceFolder"),Bfe=[0,1,2],Wfe=ve(5e3,50);qfe=Pi.as(Ls.ExtensionContribution),Bp=class{constructor(e){this.configurations=e;this._onDidChangeWorkspaceFolders=new p.Emitter;this.onDidChangeWorkspaceFolders=this._onDidChangeWorkspaceFolders.event;this.rootPatterns=new Map;this._workspaceFolders=[];this._tokenSources=new Set;F.on("VimLeavePre",this.cancelAll,this),this.updateConfiguration(!0),this.configurations.onDidChange(t=>{(t.affectsConfiguration("workspace")||t.affectsConfiguration("coc.preferences"))&&this.updateConfiguration(!1)})}updateConfiguration(e){let t=this.configurations.initialConfiguration,i=t.get("workspace"),r=t.get("coc.preferences.rootPatterns");if(this.config={rootPatterns:le(r)?pe(i.rootPatterns):r,ignoredFiletypes:pe(i.ignoredFiletypes),bottomUpFiletypes:pe(i.bottomUpFiletypes),ignoredFolders:pe(i.ignoredFolders),workspaceFolderCheckCwd:!!i.workspaceFolderCheckCwd,workspaceFolderFallbackCwd:!!i.workspaceFolderFallbackCwd},e){let o=t.get("languageserver",{});this.addServerRootPatterns(o)}}addServerRootPatterns(e){for(let t of Object.keys(Ke(e))){let i=e[t],{filetypes:r,rootPatterns:o}=i;Array.isArray(r)&&!le(o)&&r.filter(s=>typeof s=="string").forEach(s=>{this.addRootPattern(s,o)})}}cancelAll(){for(let e of this._tokenSources)e.cancel()}setWorkspaceFolders(e){if(!e||!Array.isArray(e))return;let t=e.map(i=>Hp(i));this._workspaceFolders=t.filter(i=>i!=null)}getWorkspaceFolder(e){if(e.scheme!=="file")return;let t=Array.from(this._workspaceFolders).map(o=>Y.parse(o.uri).fsPath);t.sort((o,s)=>s.length-o.length);let i=e.fsPath,r=t.find(o=>St(o,i,!0));return Hp(r)}getRelativePath(e,t){let i,r="";if(typeof e=="string"?(i=Y.file(e),r=e):typeof e<"u"&&(i=e,r=e.fsPath),!i)return r;let o=this.getWorkspaceFolder(i);if(!o)return r;typeof t>"u"&&this._workspaceFolders&&(t=this._workspaceFolders.length>1);let s=E.relative(Y.parse(o.uri).fsPath,i.fsPath);return s=s==""?i.fsPath:s,t&&o.name&&(s=`${o.name}\/${s}`),s}get workspaceFolders(){return this._workspaceFolders}addRootPattern(e,t){let i=this.rootPatterns.get(e)??[];for(let r of t)i.includes(r)||i.push(r);this.rootPatterns.set(e,i)}resolveRoot(e,t,i,r){if(e.buftype!==""||e.schema!=="file")return null;let o=Y.parse(e.uri),s=La(o.fsPath)?E.normalize(o.fsPath):E.dirname(o.fsPath),{ignoredFiletypes:a,ignoredFolders:l,workspaceFolderCheckCwd:u,workspaceFolderFallbackCwd:c,bottomUpFiletypes:h}=this.config;if(a?.includes(e.filetype))return null;l=Array.isArray(l)?l.filter(g=>g&&g.length>0).map(g=>r(g)):[];let d=null;for(let g of Bfe){let f=this.getRootPatterns(e,g);if(f&&f.length){let m=h.includes("*")||h.includes(e.filetype),b=Xg(s,f,t,m,u,l);if(b){d=b;break}}}return!d&&c&&!$g(t,l)&&St(t,s,!0)&&(d=t),d&&this.addWorkspaceFolder(d,i),d}addWorkspaceFolder(e,t){let i=Hp(e);if(i)return this._workspaceFolders.findIndex(r=>r.uri==i.uri)==-1&&(this._workspaceFolders.push(i),t&&this._onDidChangeWorkspaceFolders.fire({added:[i],removed:[]})),i}renameWorkspaceFolder(e,t){let i=Hp(t);if(!i)return;let r=this._workspaceFolders.findIndex(s=>Y.parse(s.uri).fsPath==e);if(r==-1)return;let o=this.workspaceFolders[r];this._workspaceFolders.splice(r,1,i),this._onDidChangeWorkspaceFolders.fire({removed:[o],added:[i]})}removeWorkspaceFolder(e){let t=Hp(e);if(!t)return;let i=this._workspaceFolders.findIndex(r=>r.uri==t.uri);i!=-1&&(this._workspaceFolders.splice(i,1),this._onDidChangeWorkspaceFolders.fire({removed:[t],added:[]}))}getRootPatterns(e,t){return t==0?e.getVar("root_patterns",[])||[]:t==1?this.getServerRootPatterns(e.languageId):this.config.rootPatterns}reset(){this.rootPatterns.clear(),this._workspaceFolders=[]}getServerRootPatterns(e){let t=qfe.getRootPatternsByFiletype(e);return t=t.concat(pe(this.rootPatterns.get(e))),Oi(t)}checkFolder(e,t,i){return rJ(e,t,i)}async checkPatterns(e,t){if(le(e))return!1;let i=e.map(u=>Y.parse(u.uri).fsPath),r=!1,o=new p.CancellationTokenSource;this._tokenSources.add(o);let s=o.token,a=setTimeout(()=>{o.cancel()},Wfe),l=await Promise.allSettled(i.map(u=>this.checkFolder(u,t,s).then(c=>{this._tokenSources.delete(o),c&&(r=!0,clearTimeout(a),o.cancel())})));return clearTimeout(a),l.forEach(u=>{u.status==="rejected"&&!Lc(u.reason)&&Hfe.error("checkPatterns error:",t,u.reason)}),r}}});var Wp,pG=k(()=>{"use strict";je();se();Wp=class{constructor(e,t){this._create=e;this.disposables=[];this.itemsMap=new Map;let{disposables:i}=this;for(let r of t.attached())this.create(r);t.onDidOpenTextDocument(r=>{this.create(t.getDocument(r.bufnr))},null,i),t.onDidChangeDocument(r=>{this.onChange(r)},null,i),t.onDidCloseDocument(r=>{this.delete(r.bufnr)},null,i),F.on("LinesChanged",this.onTextChange,this,i)}onTextChange(e){let t=this.itemsMap.get(e);t&&typeof t.item.onTextChange=="function"&&t.item.onTextChange()}get items(){return Array.from(this.itemsMap.values()).map(e=>e.item)}getItem(e){if(typeof e=="number")return this.itemsMap.get(e)?.item;let t=Array.from(this.itemsMap.values()).find(i=>i.uri==e);return t?t.item:void 0}create(e){let t=this.itemsMap.get(e.bufnr);t&&t.item.dispose();let i=this._create(e);i&&this.itemsMap.set(e.bufnr,{uri:e.uri,item:i})}onChange(e){let t=this.itemsMap.get(e.bufnr);t&&typeof t.item.onChange=="function"&&t.item.onChange(e)}delete(e){let t=this.itemsMap.get(e);t&&(t.item.dispose(),this.itemsMap.delete(e))}reset(){for(let e of this.itemsMap.values())e.item.dispose();this.itemsMap.clear()}dispose(){z(this.disposables);for(let e of this.itemsMap.values())e.item.dispose();this._create=void 0,this.itemsMap.clear()}}});var qp,fG=k(()=>{"use strict";fe();Ye();qp=class{constructor(e){this.filepath=e}fetch(e){let t=this.load();if(!e)return t;let i=e.split(".");for(let r of i){if(typeof t[r]>"u")return;t=t[r]}return t}exists(e){let t=this.load(),i=e.split(".");for(let r of i){if(typeof t[r]>"u")return!1;t=t[r]}return!0}delete(e){let t=this.load(),i=t,r=e.split("."),o=r.length;for(let s=0;s<o&&!(typeof t[r[s]]>"u");s++){if(s==o-1){delete t[r[s]],B.writeFileSync(this.filepath,JSON.stringify(i,null,2),"utf8");break}t=t[r[s]]}}push(e,t){let i=Ke(this.load()),r=i,o=e.split("."),s=o.length;for(let a=0;a<s;a++){let l=o[a];if(a==s-1){r[l]=t;let u=E.dirname(this.filepath);B.mkdirSync(u,{recursive:!0}),B.writeFileSync(this.filepath,JSON.stringify(i,null,2));break}typeof r[l]>"u"&&(r[l]={}),r=r[l]}}load(){let e=E.dirname(this.filepath);if(!B.existsSync(e))return B.mkdirSync(e,{recursive:!0}),B.writeFileSync(this.filepath,"{}","utf8"),{};try{let i=B.readFileSync(this.filepath,"utf8");return JSON.parse(i.trim())}catch{return B.writeFileSync(this.filepath,"{}","utf8"),{}}}clear(){B.existsSync(this.filepath)&&B.writeFileSync(this.filepath,"{}","utf8")}destroy(){B.existsSync(this.filepath)&&B.unlinkSync(this.filepath)}}});var jE,Yp,OE=k(()=>{"use strict";gt();jE=["\\u280B","\\u2819","\\u2839","\\u2838","\\u283C","\\u2834","\\u2826","\\u2827","\\u2807","\\u280F"],Yp=class{constructor(){this.items=new Map;this.shownIds=new Set;this._text="";this.interval=setInterval(()=>{this.setStatusText()},100).unref()}dispose(){this.items.clear(),this.shownIds.clear(),clearInterval(this.interval)}reset(){this.items.clear(),this.shownIds.clear()}createStatusBarItem(e,t=!1){let i=mu(),r={text:"",priority:e,isProgress:t,show:()=>{this.shownIds.add(i),this.setStatusText()},hide:()=>{this.shownIds.delete(i),this.setStatusText()},dispose:()=>{this.shownIds.delete(i),this.items.delete(i),this.setStatusText()}};return this.items.set(i,r),r}getText(){if(this.shownIds.size==0)return"";let t=Math.floor(new Date().getMilliseconds()\/100),i="",r=[];for(let[o,s]of this.items)this.shownIds.has(o)&&r.push(s);r.sort((o,s)=>o.priority-s.priority);for(let o of r)o.isProgress?i=`${i} ${jE[t]} ${o.text}`:i=`${i} ${o.text}`;return i}setStatusText(){let e=this.getText(),{nvim:t}=this;e!=this._text&&t&&(this._text=e,t.pauseNotification(),this.nvim.setVar("coc_status",e,!0),this.nvim.call("coc#util#do_autocmd",["CocStatusChange"],!0),t.resumeNotification(!1,!0))}}});var Up,mG=k(()=>{"use strict";je();se();ie();Up=class{constructor(e,t){this.nvim=e;this.id=t;this.disposables=[];this._onExit=new p.Emitter;this._onStderr=new p.Emitter;this._onStdout=new p.Emitter;this.onExit=this._onExit.event;this.onStdout=this._onStdout.event;this.onStderr=this._onStderr.event;F.on("TaskExit",(i,r)=>{i==this.id&&this._onExit.fire(r)},null,this.disposables),F.on("TaskStderr",(i,r)=>{i==this.id&&this._onStderr.fire(r)},null,this.disposables),F.on("TaskStdout",(i,r)=>{i==this.id&&this._onStdout.fire(r)},null,this.disposables)}async start(e){let{nvim:t}=this;return await t.call("coc#task#start",[this.id,e])}async stop(){let{nvim:e}=this;await e.call("coc#task#stop",[this.id])}get running(){let{nvim:e}=this;return e.call("coc#task#running",[this.id])}dispose(){let{nvim:e}=this;e.call("coc#task#stop",[this.id],!0),this._onStdout.dispose(),this._onStderr.dispose(),this._onExit.dispose(),z(this.disposables)}}});var AE,Yfe,NE,y,be=k(()=>{"use strict";$e();Q5();V5();iX();U_();rX();IX();FX();jX();uG();jR();hG();uu();gG();vC();je();Ee();pG();fG();np();Qg();OE();X_();mG();oi();Is();fe();Ye();ru();AE=te("workspace"),Yfe=["showMessage","runTerminalCommand","openTerminal","showQuickpick","menuPick","openLocalConfig","showPrompt","createStatusBarItem","createOutputChannel","showOutputChannel","requestInput","echoLines","getCursorPosition","moveTo","getOffset","getSelectedRange","selectRange","createTerminal"],NE=class{constructor(){this.statusLine=new Yp;yJ().then(o=>{this.fuzzyExports=o}),dh.create().then(o=>{this.strWdith=o}),F.on("VimResized",(o,s)=>{Object.assign(Ke(this.env),{columns:o,lines:s})}),Object.defineProperty(this.statusLine,"nvim",{get:()=>this.nvim});let e=this.configurations=new Sp(BZ,new Dp(this));this.workspaceFolderControl=new Bp(this.configurations);let t=this.documentsManager=new _p(this.configurations,this.workspaceFolderControl);this.contentProvider=new kp(t),this.watchers=new Np,this.autocmds=new Tp,this.keymaps=new Ap,this.files=new Lp(t,this.configurations,this.workspaceFolderControl,this.keymaps),this.editors=new Rp(t),this.onDidRuntimePathChange=this.watchers.onDidRuntimePathChange,this.onDidChangeWorkspaceFolders=this.workspaceFolderControl.onDidChangeWorkspaceFolders,this.onDidChangeConfiguration=this.configurations.onDidChange,this.onDidOpenTextDocument=t.onDidOpenTextDocument,this.onDidChangeTextDocument=t.onDidChangeDocument,this.onDidCloseTextDocument=t.onDidCloseDocument,this.onDidSaveTextDocument=t.onDidSaveTextDocument,this.onWillSaveTextDocument=t.onWillSaveTextDocument,this.onDidCreateFiles=this.files.onDidCreateFiles,this.onDidRenameFiles=this.files.onDidRenameFiles,this.onDidDeleteFiles=this.files.onDidDeleteFiles,this.onWillCreateFiles=this.files.onWillCreateFiles,this.onWillRenameFiles=this.files.onWillRenameFiles,this.onWillDeleteFiles=this.files.onWillDeleteFiles;let r=e.initialConfiguration.get("coc.preferences").watchmanPath??WZ;this.fileSystemWatchers=new Op(this.workspaceFolderControl,r)}get initialConfiguration(){return this.configurations.initialConfiguration}async init(e){let{nvim:t}=this;for(let o of Yfe)Object.defineProperty(this,o,{get:()=>(...s)=>{let a=`$/;"	f
cache_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
callResult	plugged/vim-go/autoload/go/debug.vim	/^function! s:callResult(res) abort$/;"	f
call_jsonrpc	plugged/vim-go/autoload/go/debug.vim	/^function! s:call_jsonrpc(handle_result, method, ...) abort$/;"	f
callback	plugged/vim-go/autoload/go/job.vim	/^function! s:callback(chan, msg) dict$/;"	f
callback 	plugged/catppuccin/lua/catppuccin/init.lua	/^		callback = function()$/;"	f
callback2on_stderr	plugged/vim-go/autoload/go/job.vim	/^function! s:callback2on_stderr(mode, ch, data, event) dict$/;"	f
callback2on_stdout	plugged/vim-go/autoload/go/job.vim	/^function! s:callback2on_stdout(mode, ch, data, event) dict$/;"	f
can_diffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
cancel	plugged/coc.nvim/autoload/coc/notify.vim	/^function! s:cancel(winid, ...) abort$/;"	f
capture	plugged/unite.vim/autoload/vital/_unite/Vim/Message.vim	/^function! s:capture(command) abort$/;"	f
cbs	plugged/vim-go/autoload/go/job.vim	/^  let cbs._start = function('s:start', [''], state)$/;"	v
cbs	plugged/vim-go/autoload/go/job.vim	/^  let cbs.callback = function('s:callback', [], state)$/;"	v
cbs	plugged/vim-go/autoload/go/job.vim	/^  let cbs.close_cb = function('s:close_cb', [], state)$/;"	v
cbs	plugged/vim-go/autoload/go/job.vim	/^  let cbs.exit_cb = function('s:exit_cb', [], state)$/;"	v
cdable_action_file.func	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:cdable_action_file.func(candidate) abort$/;"	f
cdable_action_rec.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:cdable_action_rec.func(candidate) abort$/;"	f
cdable_action_rec_async.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:cdable_action_rec_async.func(candidate) abort$/;"	f
cdable_action_rec_parent.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:cdable_action_rec_parent.func(candidate) abort$/;"	f
cdable_action_rec_parent_async.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:cdable_action_rec_parent_async.func(candidate) abort$/;"	f
cdable_action_rec_project.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:cdable_action_rec_project.func(candidate) abort$/;"	f
cdable_action_rec_project_async.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:cdable_action_rec_project_async.func(candidate) abort$/;"	f
cfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cfile() abort$/;"	f
chCwd	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node) abort$/;"	f
chRoot	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node) abort$/;"	f
change_loading_buf	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! s:change_loading_buf(bufnr, idx) abort$/;"	f
char_range	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:char_range(from, to) abort$/;"	f
character	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! s:character(line, col) abort$/;"	f
checkAutocmd	plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkAutocmd()$/;"	f
checkCommand	plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkCommand()$/;"	f
checkEnvironment	plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkEnvironment() abort$/;"	f
checkInitialize	plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkInitialize() abort$/;"	f
checkVersion	plugged/coc.nvim/plugin/coc.vim	/^function! s:checkVersion() abort$/;"	f
checkVersion	plugged/vim-go/plugin/go.vim	/^function! s:checkVersion() abort$/;"	f
checkVim	plugged/coc.nvim/autoload/health/coc.vim	/^function! s:checkVim(test, name, patchlevel) abort$/;"	f
check_bufnr	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:check_bufnr(bufnr) abort$/;"	f
check_copy_func	plugged/unite.vim/autoload/unite/kinds/file.vim	/^function! s:check_copy_func(filename) abort "{{{$/;"	f
check_ctermbg	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:check_ctermbg(id, cterm) abort$/;"	f
check_defined	plugged/vim-airline/autoload/airline/init.vim	/^function! s:check_defined(variable, default)$/;"	f
check_defined_section	plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:check_defined_section(name)$/;"	f
check_delete_func	plugged/unite.vim/autoload/unite/kinds/file.vim	/^function! s:check_delete_func(filename) abort "{{{$/;"	f
check_diagnostics	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:check_diagnostics(actual, expected, when)$/;"	f
check_errors	plugged/vim-go/autoload/go/debug.vim	/^function! s:check_errors(resp_json) abort$/;"	f
check_is_directory	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:check_is_directory(directory) abort$/;"	f
check_lines	plugged/unite.vim/autoload/unite/exrename.vim	/^function! s:check_lines() abort "{{{$/;"	f
check_mixed_indent	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent()$/;"	f
check_mixed_indent_file	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:check_mixed_indent_file()$/;"	f
check_old_cache	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^function! s:check_old_cache(cache_dir, filename) abort$/;"	f
check_over_write	plugged/unite.vim/autoload/unite/kinds/file.vim	/^function! s:check_over_write(dest_dir, filename, overwrite_method, is_reset_method) abort "{{{$/;"	f
check_redraw	plugged/unite.vim/autoload/unite/handlers.vim	/^function! s:check_redraw() abort "{{{$/;"	f
check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f
check_vim_enter	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! s:check_vim_enter() abort$/;"	f
check_winid	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:check_winid(winid) abort$/;"	f
checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
checkwith	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^  function! s:checkwith(left, right, line, col) abort$/;"	f
chomp	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:chomp(str) abort "{{{$/;"	f
chomp	plugged/vim-go/autoload/go/keyify.vim	/^function! s:chomp(string)$/;"	f
choose_action	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:choose_action() abort "{{{$/;"	f
chop	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:chop(str) abort "{{{$/;"	f
chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
clear	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:clear(list) abort$/;"	f
clear	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:clear(bufnr)$/;"	f
clear	plugged/vim-go/autoload/go/statusline.vim	/^function! s:clear()$/;"	f
clearOldFolds	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:clearOldFolds() abort dict$/;"	f
clearOptions	plugged/vim-go/scripts/runtest.vim	/^function! s:clearOptions() abort$/;"	f
clearState	plugged/vim-go/autoload/go/debug.vim	/^function! s:clearState() abort$/;"	f
clear_complete	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:clear_complete() abort "{{{$/;"	f
clear_group_from_matches	plugged/vim-go/autoload/go/util.vim	/^function! s:clear_group_from_matches(group) abort$/;"	f
clear_marks	plugged/unite.vim/autoload/unite/action.vim	/^function! s:clear_marks(candidates) abort "{{{$/;"	f
clear_previewed_buffer_list	plugged/unite.vim/autoload/unite/view.vim	/^function! s:clear_previewed_buffer_list() abort "{{{$/;"	f
clear_virtual_text	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:clear_virtual_text() abort$/;"	f
closeChildren	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node) abort$/;"	f
closeCurrentDir	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node) abort$/;"	f
closeFold	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:closeFold() abort dict$/;"	f
closeFold	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:closeFold() abort dict$/;"	f
closeKindFold	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:closeKindFold(kind) abort dict$/;"	f
closeTreeWindow	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow() abort$/;"	f
close_auto_hide_wins	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! s:close_auto_hide_wins(...) abort$/;"	f
close_cb	plugged/vim-go/autoload/go/def.vim	/^  function! s:close_cb(next, ch) dict$/;"	f
close_cb	plugged/vim-go/autoload/go/job.vim	/^function! s:close_cb(ch) dict$/;"	f
close_pane	autoload/plug.vim	/^function! s:close_pane()$/;"	f
close_popup_on_escape	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:close_popup_on_escape(winid, key)$/;"	f
close_pum	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:close_pum() abort$/;"	f
close_win	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:close_win(winid, noautocmd) abort$/;"	f
closeterm	plugged/vim-go/autoload/go/term.vim	/^function! s:closeterm()$/;"	f
cmd	plugged/coc.nvim/autoload/coc/terminal.vim	/^    let cmd = s:is_win ? join(a:cmd, ' ') : a:cmd$/;"	v
cmd	plugged/coc.nvim/autoload/coc/ui.vim	/^      let cmd = 'cmd.exe \/C "'.cmd.'"'$/;"	v
cmd_job	plugged/vim-go/autoload/go/cmd.vim	/^function! s:cmd_job(args) abort$/;"	f
coc#_cancel	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_cancel(...)$/;"	f
coc#_do_complete	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_do_complete(name, opt, cb) abort$/;"	f
coc#_insert_key	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_insert_key(method, key, ...) abort$/;"	f
coc#_remote_fns	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_remote_fns(name)$/;"	f
coc#_select_confirm	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_select_confirm() abort$/;"	f
coc#_suggest_variables	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_suggest_variables() abort$/;"	f
coc#_unwatch	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_unwatch(key)$/;"	f
coc#_watch	plugged/coc.nvim/autoload/coc.vim	/^function! coc#_watch(key)$/;"	f
coc#add_command	plugged/coc.nvim/autoload/coc.vim	/^function! coc#add_command(id, cmd, ...)$/;"	f
coc#add_extension	plugged/coc.nvim/autoload/coc.vim	/^function! coc#add_extension(...)$/;"	f
coc#api#call	plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#call(method, args) abort$/;"	f
coc#api#create_type	plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#create_type(srcId, hlGroup, opts) abort$/;"	f
coc#api#exec	plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#exec(method, args) abort$/;"	f
coc#api#func_names	plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#func_names() abort$/;"	f
coc#api#get_id_types	plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#get_id_types() abort$/;"	f
coc#api#get_tabid	plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#get_tabid(nr) abort$/;"	f
coc#api#get_types	plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#get_types(srcId) abort$/;"	f
coc#api#notify	plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#notify(method, args) abort$/;"	f
coc#api#tabpage_ids	plugged/coc.nvim/autoload/coc/api.vim	/^function! coc#api#tabpage_ids() abort$/;"	f
coc#client#check_version	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#check_version() abort$/;"	f
coc#client#create	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#create(name, command)$/;"	f
coc#client#get_channel	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#get_channel(client)$/;"	f
coc#client#get_client	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#get_client(name) abort$/;"	f
coc#client#is_running	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#is_running(name) abort$/;"	f
coc#client#kill	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#kill(name) abort$/;"	f
coc#client#notify	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#notify(name, method, args)$/;"	f
coc#client#on_response	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#on_response(name, id, resp, isErr)$/;"	f
coc#client#open_log	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#open_log()$/;"	f
coc#client#request	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#request(name, method, args)$/;"	f
coc#client#request_async	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#request_async(name, method, args, cb)$/;"	f
coc#client#restart	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#restart(name) abort$/;"	f
coc#client#restart_all	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#restart_all()$/;"	f
coc#client#stop	plugged/coc.nvim/autoload/coc/client.vim	/^function! coc#client#stop(name) abort$/;"	f
coc#color#contrast	plugged/coc.nvim/autoload/coc/color.vim	/^function! coc#color#contrast(rgb1, rgb2) abort$/;"	f
coc#color#darken	plugged/coc.nvim/autoload/coc/color.vim	/^function! coc#color#darken(color, ...)$/;"	f
coc#color#hexToRgb	plugged/coc.nvim/autoload/coc/color.vim	/^function! coc#color#hexToRgb(color)$/;"	f
coc#color#hex_contrast	plugged/coc.nvim/autoload/coc/color.vim	/^function! coc#color#hex_contrast(hex1, hex2) abort$/;"	f
coc#color#lighten	plugged/coc.nvim/autoload/coc/color.vim	/^function! coc#color#lighten(color, ...)$/;"	f
coc#color#luminance	plugged/coc.nvim/autoload/coc/color.vim	/^function! coc#color#luminance(rgb) abort$/;"	f
coc#color#nameToHex	plugged/coc.nvim/autoload/coc/color.vim	/^function! coc#color#nameToHex(name, term) abort$/;"	f
coc#color#pick_color	plugged/coc.nvim/autoload/coc/color.vim	/^function! coc#color#pick_color(default_color)$/;"	f
coc#color#rgb2term	plugged/coc.nvim/autoload/coc/color.vim	/^function! coc#color#rgb2term(rgb)$/;"	f
coc#color#rgbToHex	plugged/coc.nvim/autoload/coc/color.vim	/^function! coc#color#rgbToHex(...)$/;"	f
coc#color#term2rgb	plugged/coc.nvim/autoload/coc/color.vim	/^function! coc#color#term2rgb(term) abort$/;"	f
coc#compat#buf_add_keymap	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#buf_add_keymap(bufnr, mode, lhs, rhs, opts) abort$/;"	f
coc#compat#buf_del_keymap	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#buf_del_keymap(bufnr, mode, lhs) abort$/;"	f
coc#compat#buf_del_var	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#buf_del_var(bufnr, name) abort$/;"	f
coc#compat#buf_line_count	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#buf_line_count(bufnr) abort$/;"	f
coc#compat#buf_set_lines	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#buf_set_lines(bufnr, start, end, replacement) abort$/;"	f
coc#compat#buf_win_id	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#buf_win_id(bufnr) abort$/;"	f
coc#compat#clear_matches	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#clear_matches(winid) abort$/;"	f
coc#compat#del_var	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#del_var(name) abort$/;"	f
coc#compat#execute	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#execute(winid, command, ...) abort$/;"	f
coc#compat#matchaddgroups	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#matchaddgroups(winid, groups) abort$/;"	f
coc#compat#matchaddpos	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#matchaddpos(group, pos, priority, winid) abort$/;"	f
coc#compat#prepend_lines	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#prepend_lines(bufnr, replacement) abort$/;"	f
coc#compat#trim	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#trim(str)$/;"	f
coc#compat#win_is_valid	plugged/coc.nvim/autoload/coc/compat.vim	/^function! coc#compat#win_is_valid(winid) abort$/;"	f
coc#config	plugged/coc.nvim/autoload/coc.vim	/^function! coc#config(section, value)$/;"	f
coc#cursor#char_offset	plugged/coc.nvim/autoload/coc/cursor.vim	/^function! coc#cursor#char_offset() abort$/;"	f
coc#cursor#get_selection	plugged/coc.nvim/autoload/coc/cursor.vim	/^function! coc#cursor#get_selection(char) abort$/;"	f
coc#cursor#move_by_col	plugged/coc.nvim/autoload/coc/cursor.vim	/^function! coc#cursor#move_by_col(delta)$/;"	f
coc#cursor#move_to	plugged/coc.nvim/autoload/coc/cursor.vim	/^function! coc#cursor#move_to(line, character) abort$/;"	f
coc#cursor#position	plugged/coc.nvim/autoload/coc/cursor.vim	/^function! coc#cursor#position()$/;"	f
coc#cursor#screen_pos	plugged/coc.nvim/autoload/coc/cursor.vim	/^function! coc#cursor#screen_pos() abort$/;"	f
coc#dialog#_create_prompt_nvim	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#_create_prompt_nvim(title, default, opts) abort$/;"	f
coc#dialog#_create_prompt_vim	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#_create_prompt_vim(title, default, opts) abort$/;"	f
coc#dialog#change_border_hl	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#change_border_hl(winid, hlgroup) abort$/;"	f
coc#dialog#change_input_value	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#change_input_value(winid, bufnr, value) abort$/;"	f
coc#dialog#change_loading	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#change_loading(winid, loading) abort$/;"	f
coc#dialog#change_title	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#change_title(winid, title) abort$/;"	f
coc#dialog#check_scroll_vim	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#check_scroll_vim(winid) abort$/;"	f
coc#dialog#create_cursor_float	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#create_cursor_float(winid, bufnr, lines, config) abort$/;"	f
coc#dialog#create_dialog	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#create_dialog(lines, config) abort$/;"	f
coc#dialog#create_list	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#create_list(target, dimension, opts) abort$/;"	f
coc#dialog#create_menu	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#create_menu(lines, config) abort$/;"	f
coc#dialog#create_prompt_win	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#create_prompt_win(title, default, opts) abort$/;"	f
coc#dialog#create_pum_float	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#create_pum_float(lines, config) abort$/;"	f
coc#dialog#get_config_cursor	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#get_config_cursor(lines, config) abort$/;"	f
coc#dialog#get_config_editor	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#get_config_editor(lines, config) abort$/;"	f
coc#dialog#get_prompt_win	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#get_prompt_win() abort$/;"	f
coc#dialog#place_sign	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#place_sign(bufnr, line) abort$/;"	f
coc#dialog#prompt_confirm	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#prompt_confirm(title, cb) abort$/;"	f
coc#dialog#prompt_insert	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#prompt_insert() abort$/;"	f
coc#dialog#set_cursor	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#set_cursor(winid, bufnr, line) abort$/;"	f
coc#dialog#update_list	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! coc#dialog#update_list(winid, bufnr, lines, highlights) abort$/;"	f
coc#dict#equal	plugged/coc.nvim/autoload/coc/dict.vim	/^function! coc#dict#equal(one, two) abort$/;"	f
coc#dict#omit	plugged/coc.nvim/autoload/coc/dict.vim	/^function! coc#dict#omit(dict, keys) abort$/;"	f
coc#dict#pick	plugged/coc.nvim/autoload/coc/dict.vim	/^function! coc#dict#pick(dict, keys) abort$/;"	f
coc#do_notify	plugged/coc.nvim/autoload/coc.vim	/^function! coc#do_notify(id, method, result)$/;"	f
coc#expandable	plugged/coc.nvim/autoload/coc.vim	/^function! coc#expandable() abort$/;"	f
coc#expandableOrJumpable	plugged/coc.nvim/autoload/coc.vim	/^function! coc#expandableOrJumpable() abort$/;"	f
coc#float#add_related	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#add_related(winid, target) abort$/;"	f
coc#float#change_height	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#change_height(winid, delta) abort$/;"	f
coc#float#check_related	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#check_related() abort$/;"	f
coc#float#close	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close(winid, ...) abort$/;"	f
coc#float#close_all	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close_all(...) abort$/;"	f
coc#float#close_related	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#close_related(winid, ...) abort$/;"	f
coc#float#content_height	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#content_height(bufnr, width, wrap) abort$/;"	f
coc#float#create_border_lines	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_border_lines(border, borderchars, title, width, height, hasbtn) abort$/;"	f
coc#float#create_buf	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_buf(bufnr, ...) abort$/;"	f
coc#float#create_float_win	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#create_float_win(winid, bufnr, config) abort$/;"	f
coc#float#get_float_by_kind	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_float_by_kind(kind) abort$/;"	f
coc#float#get_float_win_list	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_float_win_list(...) abort$/;"	f
coc#float#get_height	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_height(winid) abort$/;"	f
coc#float#get_options	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_options(winid) abort$/;"	f
coc#float#get_related	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_related(winid, kind, ...) abort$/;"	f
coc#float#get_row	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_row(winid) abort$/;"	f
coc#float#get_wininfo	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#get_wininfo(winid) abort$/;"	f
coc#float#getchar	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#getchar(winid, keys) abort$/;"	f
coc#float#has_float	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#has_float(...) abort$/;"	f
coc#float#has_scroll	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#has_scroll() abort$/;"	f
coc#float#jump	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#jump() abort$/;"	f
coc#float#nvim_border_win	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_border_win(config, borderchars, winid, border, title, hasbtn, hlgroup, shadow, related) abort$/;"	f
coc#float#nvim_buttons	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_buttons(config, winid, buttons, getchar, borderbottom, pad, borderhighlight, shadow, related) abort$/;"	f
coc#float#nvim_close_btn	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_close_btn(config, winid, border, hlgroup, related) abort$/;"	f
coc#float#nvim_create_related	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_create_related(winid, config, opts) abort$/;"	f
coc#float#nvim_float_click	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_float_click() abort$/;"	f
coc#float#nvim_refresh_scrollbar	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_refresh_scrollbar(winid) abort$/;"	f
coc#float#nvim_right_pad	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_right_pad(config, winid, shadow, related) abort$/;"	f
coc#float#nvim_scroll_adjust	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_scroll_adjust(winid) abort$/;"	f
coc#float#nvim_scrollbar	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_scrollbar(winid) abort$/;"	f
coc#float#nvim_set_winblend	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_set_winblend(winid, winblend) abort$/;"	f
coc#float#nvim_win_enter	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#nvim_win_enter(winid) abort$/;"	f
coc#float#on_close	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#on_close(winid) abort$/;"	f
coc#float#scroll	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#scroll(forward, ...)$/;"	f
coc#float#scroll_win	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#scroll_win(winid, forward, amount) abort$/;"	f
coc#float#scrollable	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#scrollable(winid) abort$/;"	f
coc#float#valid	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#valid(winid) abort$/;"	f
coc#float#vim_buttons	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#vim_buttons(winid, config) abort$/;"	f
coc#float#vim_filter	plugged/coc.nvim/autoload/coc/float.vim	/^function! coc#float#vim_filter(winid, key, keys) abort$/;"	f
coc#helper#dict_omit	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#dict_omit(dict, keys) abort$/;"	f
coc#helper#dict_pick	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#dict_pick(dict, keys) abort$/;"	f
coc#helper#get_charactor	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#get_charactor(line, col) abort$/;"	f
coc#helper#last_character	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#last_character(line) abort$/;"	f
coc#helper#max	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#max(first, ...) abort$/;"	f
coc#helper#min	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#min(first, ...) abort$/;"	f
coc#helper#obj_equal	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#obj_equal(one, two) abort$/;"	f
coc#helper#str_apply	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#str_apply(content, diff) abort$/;"	f
coc#helper#str_compose	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#str_compose(line, position, inserted) abort$/;"	f
coc#helper#str_diff	plugged/coc.nvim/autoload/coc/helper.vim	/^function! coc#helper#str_diff(curr, previous, col) abort$/;"	f
coc#highlight#add_highlight	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#add_highlight(bufnr, src_id, hl_group, line, col_start, col_end, ...) abort$/;"	f
coc#highlight#add_highlights	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#add_highlights(winid, codes, highlights) abort$/;"	f
coc#highlight#buffer_update	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#buffer_update(bufnr, key, highlights, ...) abort$/;"	f
coc#highlight#clear	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#clear(bufnr, key, lnums) abort$/;"	f
coc#highlight#clear_all	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#clear_all() abort$/;"	f
coc#highlight#clear_highlight	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#clear_highlight(bufnr, key, start_line, end_line) abort$/;"	f
coc#highlight#clear_match_group	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#clear_match_group(winid, match) abort$/;"	f
coc#highlight#clear_matches	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#clear_matches(winid, ids)$/;"	f
coc#highlight#compose	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#compose(fg, bg) abort$/;"	f
coc#highlight#compose_hlgroup	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#compose_hlgroup(fgGroup, bgGroup) abort$/;"	f
coc#highlight#create_bg_command	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#create_bg_command(group, amount) abort$/;"	f
coc#highlight#create_namespace	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#create_namespace(key) abort$/;"	f
coc#highlight#del_markers	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#del_markers(bufnr, key, ids) abort$/;"	f
coc#highlight#get_color	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#get_color(id, key, kind) abort$/;"	f
coc#highlight#get_contrast	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#get_contrast(group1, group2) abort$/;"	f
coc#highlight#get_hex_color	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#get_hex_color(id, kind, fallback) abort$/;"	f
coc#highlight#get_highlights	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#get_highlights(bufnr, key, ...) abort$/;"	f
coc#highlight#get_hl_command	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#get_hl_command(id, key, cterm, gui) abort$/;"	f
coc#highlight#get_syntax_name	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#get_syntax_name(lnum, col)$/;"	f
coc#highlight#highlight_lines	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#highlight_lines(winid, blocks) abort$/;"	f
coc#highlight#match_ranges	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#match_ranges(winid, bufnr, ranges, hlGroup, priority) abort$/;"	f
coc#highlight#ranges	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#ranges(bufnr, key, hlGroup, ranges, ...) abort$/;"	f
coc#highlight#reversed	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#reversed(id) abort$/;"	f
coc#highlight#set	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#set(bufnr, key, highlights, priority) abort$/;"	f
coc#highlight#update_highlights	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#update_highlights(bufnr, key, highlights, ...) abort$/;"	f
coc#highlight#valid	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! coc#highlight#valid(hlGroup) abort$/;"	f
coc#jumpable	plugged/coc.nvim/autoload/coc.vim	/^function! coc#jumpable() abort$/;"	f
coc#list#clean_up	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#clean_up() abort$/;"	f
coc#list#close	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#close(winid, position, target_win, saved_height) abort$/;"	f
coc#list#close_preview	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#close_preview(...) abort$/;"	f
coc#list#create	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#create(position, height, name, numberSelect)$/;"	f
coc#list#float_preview	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#float_preview(lines, config) abort$/;"	f
coc#list#get_preview	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#get_preview(...) abort$/;"	f
coc#list#getchar	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#getchar() abort$/;"	f
coc#list#has_preview	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#has_preview()$/;"	f
coc#list#names	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#names(...) abort$/;"	f
coc#list#options	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#options(...)$/;"	f
coc#list#preview	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#preview(lines, config) abort$/;"	f
coc#list#scroll_preview	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#scroll_preview(dir, floatPreview) abort$/;"	f
coc#list#select	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#select(bufnr, line) abort$/;"	f
coc#list#setlines	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#setlines(bufnr, lines, append)$/;"	f
coc#list#setup	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#setup(source)$/;"	f
coc#list#status	plugged/coc.nvim/autoload/coc/list.vim	/^function! coc#list#status(name)$/;"	f
coc#math#min	plugged/coc.nvim/autoload/coc/math.vim	/^function! coc#math#min(first, ...) abort$/;"	f
coc#notify#close	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#close(winid) abort$/;"	f
coc#notify#close_all	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#close_all() abort$/;"	f
coc#notify#close_by_source	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#close_by_source(source) abort$/;"	f
coc#notify#copy	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#copy() abort$/;"	f
coc#notify#create	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#create(lines, config) abort$/;"	f
coc#notify#do_action	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#do_action(...) abort$/;"	f
coc#notify#get_top	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#get_top() abort$/;"	f
coc#notify#get_win_top	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#get_win_top(winid) abort$/;"	f
coc#notify#keep	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#keep() abort$/;"	f
coc#notify#nvim_click	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#nvim_click(winid) abort$/;"	f
coc#notify#on_close	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#on_close(winid) abort$/;"	f
coc#notify#reflow	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#reflow(...) abort$/;"	f
coc#notify#show_sources	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#show_sources() abort$/;"	f
coc#notify#win_list	plugged/coc.nvim/autoload/coc/notify.vim	/^function! coc#notify#win_list() abort$/;"	f
coc#on_enter	plugged/coc.nvim/autoload/coc.vim	/^function! coc#on_enter()$/;"	f
coc#on_notify	plugged/coc.nvim/autoload/coc.vim	/^function! coc#on_notify(id, method, Cb)$/;"	f
coc#prompt#activated	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#activated() abort$/;"	f
coc#prompt#getc	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#getc() abort$/;"	f
coc#prompt#getchar	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#getchar() abort$/;"	f
coc#prompt#start_prompt	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#start_prompt(session) abort$/;"	f
coc#prompt#stop_prompt	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! coc#prompt#stop_prompt(session)$/;"	f
coc#pum#_close	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#_close() abort$/;"	f
coc#pum#_insert	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#_insert() abort$/;"	f
coc#pum#_navigate	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#_navigate(next, insert) abort$/;"	f
coc#pum#_one_more	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#_one_more() abort$/;"	f
coc#pum#cancel	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#cancel() abort$/;"	f
coc#pum#close	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#close(...) abort$/;"	f
coc#pum#close_detail	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#close_detail() abort$/;"	f
coc#pum#confirm	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#confirm() abort$/;"	f
coc#pum#create	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#create(lines, opt, config) abort$/;"	f
coc#pum#info	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#info() abort$/;"	f
coc#pum#insert	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#insert() abort$/;"	f
coc#pum#next	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#next(insert) abort$/;"	f
coc#pum#one_more	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#one_more() abort$/;"	f
coc#pum#prev	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#prev(insert) abort$/;"	f
coc#pum#repalce	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#repalce(col, insert, ...) abort$/;"	f
coc#pum#scroll	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#scroll(forward) abort$/;"	f
coc#pum#select	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#select(index, insert, confirm) abort$/;"	f
coc#pum#select_confirm	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#select_confirm() abort$/;"	f
coc#pum#stop	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#stop() abort$/;"	f
coc#pum#visible	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#visible() abort$/;"	f
coc#pum#winid	plugged/coc.nvim/autoload/coc/pum.vim	/^function! coc#pum#winid() abort$/;"	f
coc#refresh	plugged/coc.nvim/autoload/coc.vim	/^function! coc#refresh() abort$/;"	f
coc#rpc#async_request	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#async_request(id, method, args)$/;"	f
coc#rpc#async_response	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#async_response(id, resp, isErr) abort$/;"	f
coc#rpc#close_connection	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#close_connection() abort$/;"	f
coc#rpc#get_channel	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#get_channel() abort$/;"	f
coc#rpc#kill	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#kill()$/;"	f
coc#rpc#notify	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#notify(method, args) abort$/;"	f
coc#rpc#ready	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#ready()$/;"	f
coc#rpc#request	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#request(method, args) abort$/;"	f
coc#rpc#request_async	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#request_async(method, args, cb) abort$/;"	f
coc#rpc#restart	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#restart()$/;"	f
coc#rpc#set_channel	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#set_channel(chan_id) abort$/;"	f
coc#rpc#show_errors	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#show_errors()$/;"	f
coc#rpc#start_server	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#start_server()$/;"	f
coc#rpc#started	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#started() abort$/;"	f
coc#rpc#stop	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! coc#rpc#stop()$/;"	f
coc#snippet#_select_mappings	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#_select_mappings()$/;"	f
coc#snippet#disable	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#disable()$/;"	f
coc#snippet#enable	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#enable(...)$/;"	f
coc#snippet#jump	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#jump(direction, complete) abort$/;"	f
coc#snippet#move	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#move(position) abort$/;"	f
coc#snippet#next	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#next() abort$/;"	f
coc#snippet#prev	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#prev() abort$/;"	f
coc#snippet#select	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#select(start, end, text) abort$/;"	f
coc#snippet#show_choices	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#show_choices(lnum, col, position, input) abort$/;"	f
coc#snippet#to_cursor	plugged/coc.nvim/autoload/coc/snippet.vim	/^function! coc#snippet#to_cursor(position) abort$/;"	f
coc#start	plugged/coc.nvim/autoload/coc.vim	/^function! coc#start(...)$/;"	f
coc#status	plugged/coc.nvim/autoload/coc.vim	/^function! coc#status(...)$/;"	f
coc#string#apply	plugged/coc.nvim/autoload/coc/string.vim	/^function! coc#string#apply(content, diff) abort$/;"	f
coc#string#byte_index	plugged/coc.nvim/autoload/coc/string.vim	/^function! coc#string#byte_index(line, character) abort$/;"	f
coc#string#character_index	plugged/coc.nvim/autoload/coc/string.vim	/^function! coc#string#character_index(line, byteIdx) abort$/;"	f
coc#string#character_length	plugged/coc.nvim/autoload/coc/string.vim	/^function! coc#string#character_length(text) abort$/;"	f
coc#string#common_start	plugged/coc.nvim/autoload/coc/string.vim	/^function! coc#string#common_start(text, other) abort$/;"	f
coc#string#compose	plugged/coc.nvim/autoload/coc/string.vim	/^function! coc#string#compose(line, position, inserted) abort$/;"	f
coc#string#content_height	plugged/coc.nvim/autoload/coc/string.vim	/^function! coc#string#content_height(lines, width) abort$/;"	f
coc#string#diff	plugged/coc.nvim/autoload/coc/string.vim	/^function! coc#string#diff(curr, previous, col) abort$/;"	f
coc#string#get_char_count	plugged/coc.nvim/autoload/coc/string.vim	/^function! coc#string#get_char_count(text, start_col, end_col) abort$/;"	f
coc#string#last_character	plugged/coc.nvim/autoload/coc/string.vim	/^function! coc#string#last_character(line) abort$/;"	f
coc#string#reflow	plugged/coc.nvim/autoload/coc/string.vim	/^function! coc#string#reflow(lines, width) abort$/;"	f
coc#task#running	plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#running(id)$/;"	f
coc#task#start	plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#start(id, opts)$/;"	f
coc#task#stop	plugged/coc.nvim/autoload/coc/task.vim	/^function! coc#task#stop(id)$/;"	f
coc#terminal#close	plugged/coc.nvim/autoload/coc/terminal.vim	/^function! coc#terminal#close(bufnr) abort$/;"	f
coc#terminal#send	plugged/coc.nvim/autoload/coc/terminal.vim	/^function! coc#terminal#send(bufnr, text, add_new_line) abort$/;"	f
coc#terminal#start	plugged/coc.nvim/autoload/coc/terminal.vim	/^function! coc#terminal#start(cmd, cwd, env, strict) abort$/;"	f
coc#ui#change_lines	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#change_lines(bufnr, list) abort$/;"	f
coc#ui#check_pum_keymappings	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#check_pum_keymappings(trigger) abort$/;"	f
coc#ui#create_tree	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#create_tree(opts) abort$/;"	f
coc#ui#echo_hover	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#echo_hover(msg)$/;"	f
coc#ui#echo_lines	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#echo_lines(lines)$/;"	f
coc#ui#echo_messages	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#echo_messages(hl, msgs)$/;"	f
coc#ui#echo_signatures	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#echo_signatures(signatures) abort$/;"	f
coc#ui#get_mouse	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#get_mouse() abort$/;"	f
coc#ui#iterm_open	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#iterm_open(dir)$/;"	f
coc#ui#open_files	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#open_files(files)$/;"	f
coc#ui#open_terminal	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#open_terminal(opts) abort$/;"	f
coc#ui#open_url	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#open_url(url)$/;"	f
coc#ui#outline_close_preview	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#outline_close_preview() abort$/;"	f
coc#ui#outline_preview	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#outline_preview(config) abort$/;"	f
coc#ui#preview_info	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#preview_info(lines, filetype, ...) abort$/;"	f
coc#ui#quickpick	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#quickpick(title, items, cb) abort$/;"	f
coc#ui#rename_file	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#rename_file(oldPath, newPath, write) abort$/;"	f
coc#ui#run_terminal	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#run_terminal(opts, cb)$/;"	f
coc#ui#safe_open	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#safe_open(cmd, file) abort$/;"	f
coc#ui#safe_rename	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#safe_rename(bufnr, oldPath, newPath, write) abort$/;"	f
coc#ui#set_lines	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#set_lines(bufnr, changedtick, original, replacement, start, end, changes, cursor, col) abort$/;"	f
coc#ui#setloclist	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#setloclist(nr, items, action, title) abort$/;"	f
coc#ui#sign_unplace	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#sign_unplace() abort$/;"	f
coc#ui#update_signs	plugged/coc.nvim/autoload/coc/ui.vim	/^function! coc#ui#update_signs(bufnr, group, signs) abort$/;"	f
coc#util#all_state	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#all_state()$/;"	f
coc#util#api_version	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#api_version() abort$/;"	f
coc#util#bufsize	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#bufsize(bufnr) abort$/;"	f
coc#util#change_info	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#change_info() abort$/;"	f
coc#util#check_refresh	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#check_refresh(bufnr)$/;"	f
coc#util#cursor	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#cursor()$/;"	f
coc#util#diagnostic_info	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#diagnostic_info(bufnr, checkInsert) abort$/;"	f
coc#util#do_autocmd	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#do_autocmd(name) abort$/;"	f
coc#util#editor_infos	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#editor_infos() abort$/;"	f
coc#util#extension_root	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#extension_root() abort$/;"	f
coc#util#get_buf_lines	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_buf_lines(bufnr, changedtick)$/;"	f
coc#util#get_bufoptions	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_bufoptions(bufnr, max) abort$/;"	f
coc#util#get_changeinfo	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_changeinfo(bufnr)$/;"	f
coc#util#get_complete_option	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_complete_option()$/;"	f
coc#util#get_config	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_config(key) abort$/;"	f
coc#util#get_config_home	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_config_home()$/;"	f
coc#util#get_data_home	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_data_home()$/;"	f
coc#util#get_editoroption	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_editoroption(winid) abort$/;"	f
coc#util#get_format_opts	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_format_opts(bufnr) abort$/;"	f
coc#util#get_indentkeys	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_indentkeys() abort$/;"	f
coc#util#get_loaded_bufs	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#get_loaded_bufs() abort$/;"	f
coc#util#getpid	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#getpid()$/;"	f
coc#util#install	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#install() abort$/;"	f
coc#util#install_extension	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#install_extension(args) abort$/;"	f
coc#util#job_command	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#job_command()$/;"	f
coc#util#jump	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#jump(cmd, filepath, ...) abort$/;"	f
coc#util#jumpTo	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#jumpTo(line, character) abort$/;"	f
coc#util#merge_winhl	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#merge_winhl(curr, hls) abort$/;"	f
coc#util#open_file	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_file(cmd, file)$/;"	f
coc#util#open_terminal	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#open_terminal(opts) abort$/;"	f
coc#util#path_replace_patterns	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#path_replace_patterns() abort$/;"	f
coc#util#refactor_fold_text	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#refactor_fold_text(lnum) abort$/;"	f
coc#util#refactor_foldlevel	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#refactor_foldlevel(lnum) abort$/;"	f
coc#util#root_patterns	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#root_patterns() abort$/;"	f
coc#util#semantic_hlgroups	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#semantic_hlgroups() abort$/;"	f
coc#util#setline	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#setline(lnum, line)$/;"	f
coc#util#synname	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#synname() abort$/;"	f
coc#util#tabnr_id	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#tabnr_id(tabnr) abort$/;"	f
coc#util#tabpages	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#tabpages() abort$/;"	f
coc#util#timer	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#timer(method, args)$/;"	f
coc#util#unmap	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#unmap(bufnr, keys) abort$/;"	f
coc#util#update_extensions	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#update_extensions(...) abort$/;"	f
coc#util#valid_position	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#valid_position(line, character) abort$/;"	f
coc#util#variables	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#variables(bufnr) abort$/;"	f
coc#util#version	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#version()$/;"	f
coc#util#vim_info	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#vim_info()$/;"	f
coc#util#with_callback	plugged/coc.nvim/autoload/coc/util.vim	/^function! coc#util#with_callback(method, args, cb)$/;"	f
coc#vtext#add	plugged/coc.nvim/autoload/coc/vtext.vim	/^function! coc#vtext#add(bufnr, src_id, line, blocks, opts) abort$/;"	f
coc#window#adjust_width	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#adjust_width(winid) abort$/;"	f
coc#window#bufnrs	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#bufnrs() abort$/;"	f
coc#window#close	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#close(winid) abort$/;"	f
coc#window#find	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#find(key, val) abort$/;"	f
coc#window#get_cursor	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#get_cursor(winid) abort$/;"	f
coc#window#get_var	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#get_var(winid, name, ...) abort$/;"	f
coc#window#is_float	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#is_float(winid) abort$/;"	f
coc#window#restview	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#restview(winid, lnum, topline) abort$/;"	f
coc#window#set_height	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#set_height(winid, height) abort$/;"	f
coc#window#set_var	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#set_var(winid, name, value) abort$/;"	f
coc#window#tabnr	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#tabnr(winid) abort$/;"	f
coc#window#visible	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#visible(winid) abort$/;"	f
coc#window#visible_range	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#visible_range(bufnr) abort$/;"	f
coc#window#visible_ranges	plugged/coc.nvim/autoload/coc/window.vim	/^function! coc#window#visible_ranges(bufnr) abort$/;"	f
coc_dynamic_autocmd	plugged/coc.nvim/plugin/coc.vim	/^augroup coc_dynamic_autocmd$/;"	a
coc_dynamic_content	plugged/coc.nvim/plugin/coc.vim	/^augroup coc_dynamic_content$/;"	a
coc_dynamic_option	plugged/coc.nvim/plugin/coc.vim	/^augroup coc_dynamic_option$/;"	a
coc_git_enabled	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:coc_git_enabled() abort$/;"	f
code	plugged/vim-go/autoload/fzf/decls.vim	/^function! s:code(group, attr) abort$/;"	f
codeAction	plugged/vim-go/autoload/go/lsp/message.vim	/^function! s:codeAction(name, file) abort$/;"	f
color	colors/jellybeans.vim	/^fun! s:color(r, g, b)$/;"	f
color	plugged/vim-go/autoload/fzf/decls.vim	/^function! s:color(str, group) abort$/;"	f
color00	colors/PaperColor.vim	/^  let color00 = get(s:palette, 'color00')$/;"	v
color01	colors/PaperColor.vim	/^  let color01 = get(s:palette, 'color01')$/;"	v
color02	colors/PaperColor.vim	/^  let color02 = get(s:palette, 'color02')$/;"	v
color03	colors/PaperColor.vim	/^  let color03 = get(s:palette, 'color03')$/;"	v
color04	colors/PaperColor.vim	/^  let color04 = get(s:palette, 'color04')$/;"	v
color05	colors/PaperColor.vim	/^  let color05 = get(s:palette, 'color05')$/;"	v
color06	colors/PaperColor.vim	/^  let color06 = get(s:palette, 'color06')$/;"	v
color07	colors/PaperColor.vim	/^  let color07 = get(s:palette, 'color07')$/;"	v
color08	colors/PaperColor.vim	/^  let color08 = get(s:palette, 'color08')$/;"	v
color09	colors/PaperColor.vim	/^  let color09 = get(s:palette, 'color09')$/;"	v
color10	colors/PaperColor.vim	/^  let color10 = get(s:palette, 'color10')$/;"	v
color11	colors/PaperColor.vim	/^  let color11 = get(s:palette, 'color11')$/;"	v
color12	colors/PaperColor.vim	/^  let color12 = get(s:palette, 'color12')$/;"	v
color13	colors/PaperColor.vim	/^  let color13 = get(s:palette, 'color13')$/;"	v
color14	colors/PaperColor.vim	/^  let color14 = get(s:palette, 'color14')$/;"	v
color15	colors/PaperColor.vim	/^  let color15 = get(s:palette, 'color15')$/;"	v
colors["@method"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^	colors["@method"] = colors["@function.method"]$/;"	f
colors["@method.call"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^	colors["@method.call"] = colors["@function.method.call"]$/;"	f
colors["@method.call.php"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^	colors["@method.call.php"] = colors["@function.method.call.php"]$/;"	f
colors["@method.php"] 	plugged/catppuccin/lua/catppuccin/groups/integrations/treesitter.lua	/^	colors["@method.php"] = colors["@function.method.php"]$/;"	f
colors_name	colors/jellybeans.vim	/^let colors_name = "jellybeans"$/;"	v
colour	colors/PaperColor.vim	/^  fun! s:colour(r, g, b)$/;"	f
colour	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:colour(r, g, b)$/;"	f
combinations	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:combinations(list, r) abort$/;"	f
common_head	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:common_head(strs) abort$/;"	f
common_prefix	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:common_prefix(a, b)$/;"	f
common_suffix	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:common_suffix(a, b, start)$/;"	f
compare	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^function! s:compare(candidate_a, candidate_b) abort "{{{$/;"	f
compare	plugged/unite.vim/autoload/unite/kinds/window.vim	/^function! s:compare(candidate_a, candidate_b) abort "{{{$/;"	f
compare	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! s:compare(candidate_a, candidate_b) abort "{{{$/;"	f
compare	plugged/unite.vim/autoload/unite/sources/resume.vim	/^function! s:compare(candidate_a, candidate_b) abort "{{{$/;"	f
compareLocations	plugged/vim-go/autoload/go/lsp.vim	/^function! s:compareLocations(left, right) abort$/;"	f
compare_by_kind	plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_kind(tag1, tag2) abort$/;"	f
compare_by_line	plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_line(tag1, tag2) abort$/;"	f
compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
compare_word	plugged/unite.vim/autoload/unite/sources/action.vim	/^function! s:compare_word(i1, i2) abort$/;"	f
complete	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:complete() abort "{{{$/;"	f
complete	plugged/vim-go/autoload/go/debug.vim	/^function! s:complete(job, exit_status, data) abort$/;"	f
complete	plugged/vim-go/autoload/go/guru.vim	/^function! s:complete(job, exit_status, messages) dict abort$/;"	f
complete	plugged/vim-go/autoload/go/job_test.vim	/^func! s:complete(job, exit_code, messages)$/;"	f
complete	plugged/vim-go/autoload/go/package_test.vim	/^func! s:complete(arglead, expected) abort$/;"	f
complete	plugged/vim-go/plugin/go.vim	/^fun! s:complete(lead, cmdline, cursor)$/;"	f
complete	plugged/vim-snippets/pythonx/vimsnippets.py	/^def complete(tab, opts):$/;"	f
complete 	plugged/catppuccin/lua/catppuccin/init.lua	/^		complete = function(line)$/;"	f
complete_bookmark_filename	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:complete_bookmark_filename(arglead, cmdline, cursorpos) abort "{{{$/;"	f
completionErrorHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:completionErrorHandler(next, error) abort dict$/;"	f
completionHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:completionHandler(next, msg) abort dict$/;"	f
concat	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:concat(list) abort$/;"	f
config_Get	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:config_Get(name, ...) dict abort$/;"	f
config_GetAll	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:config_GetAll(name) dict abort$/;"	f
config_GetRegexp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:config_GetRegexp(pattern) dict abort$/;"	f
config_fugitive_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:config_fugitive_branch() abort$/;"	f
config_gina_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:config_gina_branch() abort$/;"	f
config_win	plugged/coc.nvim/autoload/coc/notify.vim	/^function! s:config_win(winid, props) abort$/;"	f
configureMappings	plugged/vim-go/autoload/go/debug.vim	/^function! s:configureMappings(...) abort$/;"	f
conflict_marker	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:conflict_marker()$/;"	f
conj	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:conj(xs, x) abort$/;"	f
connect	plugged/vim-go/autoload/go/debug.vim	/^function! s:connect(addr) abort$/;"	f
cons	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:cons(x, xs) abort$/;"	f
contains	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:contains(path, base) abort$/;"	f
contains_multibyte	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:contains_multibyte(str) abort "{{{$/;"	f
context_function 	plugged/catppuccin/lua/catppuccin/utils/barbecue.lua	/^		context_function = { fg = C.blue },$/;"	f
continue	plugged/vim-go/autoload/go/debug.vim	/^function! s:continue()$/;"	f
convert_colors	colors/PaperColor.vim	/^fun! s:convert_colors()$/;"	f
convert_config_nvim	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:convert_config_nvim(config, create) abort$/;"	f
convert_path	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^function! s:convert_path(path) abort "{{{$/;"	f
convert_to_abbr	plugged/unite.vim/autoload/unite/filters/converter_file_directory.vim	/^function! s:convert_to_abbr(path) abort$/;"	f
converter.filter	plugged/unite.vim/autoload/unite/filters/converter_abbr_word.vim	/^function! s:converter.filter(candidates, context) abort "{{{$/;"	f
converter.filter	plugged/unite.vim/autoload/unite/filters/converter_default.vim	/^function! s:converter.filter(candidates, context) abort "{{{$/;"	f
converter.filter	plugged/unite.vim/autoload/unite/filters/converter_file_directory.vim	/^function! s:converter.filter(candidates, context) abort$/;"	f
converter.filter	plugged/unite.vim/autoload/unite/filters/converter_full_path.vim	/^function! s:converter.filter(candidates, context) abort "{{{$/;"	f
converter.filter	plugged/unite.vim/autoload/unite/filters/converter_nothing.vim	/^function! s:converter.filter(candidates, context) abort "{{{$/;"	f
converter.filter	plugged/unite.vim/autoload/unite/filters/converter_relative_abbr.vim	/^function! s:converter.filter(candidates, context) abort "{{{$/;"	f
converter.filter	plugged/unite.vim/autoload/unite/filters/converter_relative_word.vim	/^function! s:converter.filter(candidates, context) abort "{{{$/;"	f
converter.filter	plugged/unite.vim/autoload/unite/filters/converter_smart_path.vim	/^function! s:converter.filter(candidates, context) abort "{{{$/;"	f
converter.filter	plugged/unite.vim/autoload/unite/filters/converter_tail.vim	/^function! s:converter.filter(candidates, context) abort "{{{$/;"	f
converter.filter	plugged/unite.vim/autoload/unite/filters/converter_tail_abbr.vim	/^function! s:converter.filter(candidates, context) abort "{{{$/;"	f
converter.filter	plugged/unite.vim/autoload/unite/filters/converter_uniq_word.vim	/^function! s:converter.filter(candidates, context) abort "{{{$/;"	f
converter.filter	plugged/unite.vim/autoload/unite/filters/converter_word_abbr.vim	/^function! s:converter.filter(candidates, context) abort "{{{$/;"	f
copy	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^function! s:copy(src, dest) abort$/;"	f
copy	plugged/unite.vim/rplugin/python3/denite/source/unite.py	/^from copy import copy$/;"	i
copy_dir	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^function! s:copy_dir(src, dest) abort$/;"	f
copy_dir_exe	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:copy_dir_exe() abort$/;"	f
copy_dir_exe	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:copy_dir_exe(src, dest) abort$/;"	f
copy_dir_vim	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^function! s:copy_dir_vim(src, dest) abort$/;"	f
copy_exe	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:copy_exe() abort$/;"	f
copy_exe	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:copy_exe(src, dest) abort$/;"	f
copy_vim	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^function! s:copy_vim(src, dest) abort$/;"	f
coverage_browser_callback	plugged/vim-go/autoload/go/coverage.vim	/^function! s:coverage_browser_callback(coverfile, job, exit_status, data)$/;"	f
coverage_callback	plugged/vim-go/autoload/go/coverage.vim	/^function! s:coverage_callback(coverfile, job, exit_status, data)$/;"	f
coverage_job	plugged/vim-go/autoload/go/coverage.vim	/^function s:coverage_job(args)$/;"	f
cpath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cpath(path, ...) abort$/;"	f
create	plugged/vim-airline/autoload/airline/section.vim	/^function! s:create(parts, append)$/;"	f
createKinddict	plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:createKinddict() abort dict$/;"	f
create_arguments	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:create_arguments(opts) abort$/;"	f
create_btns_buffer	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:create_btns_buffer(bufnr, width, buttons, borderbottom) abort$/;"	f
create_candidate	plugged/unite.vim/autoload/unite/sources/script.vim	/^function! s:create_candidate(val) abort "{{{$/;"	f
create_cmd	plugged/vim-go/autoload/go/tags.vim	/^func s:create_cmd(args) abort$/;"	f
create_color_variables	colors/PaperColor.vim	/^    fun! s:create_color_variables(color_name, rich_color, term_color)$/;"	f
create_loading_buf	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! s:create_loading_buf() abort$/;"	f
create_mode_prefix	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:create_mode_prefix(mode, opts) abort$/;"	f
create_popup	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:create_popup(bufnr) abort$/;"	f
create_prompt_win	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! s:create_prompt_win(bufnr, title, default, opts) abort$/;"	f
create_pseudotag	plugged/tagbar/autoload/tagbar.vim	/^function! s:create_pseudotag(name, parent, kind, typeinfo, fileinfo) abort$/;"	f
creategomod	plugged/vim-go/autoload/gotest.vim	/^func! s:creategomod(modname, dir) abort$/;"	f
ctrlp#decls#accept	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#accept(mode, str) abort$/;"	f
ctrlp#decls#cmd	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#cmd(mode, ...) abort$/;"	f
ctrlp#decls#enter	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#enter() abort$/;"	f
ctrlp#decls#exit	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#exit() abort$/;"	f
ctrlp#decls#init	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! ctrlp#decls#init() abort$/;"	f
current_attr	colors/jellybeans.vim	/^  fun! s:current_attr(group)$/;"	f
current_buffer	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let current_buffer = max([index(b.buffers, cur), 0])$/;"	v
current_color	colors/jellybeans.vim	/^  fun! s:current_color(group, what, mode)$/;"	f
current_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:current_hunk() abort$/;"	f
current_session	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! s:current_session() abort$/;"	f
cursor_bottom	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:cursor_bottom() abort "{{{$/;"	f
cursor_down	plugged/unite.vim/autoload/unite/handlers.vim	/^function! s:cursor_down() abort "{{{$/;"	f
cursor_in_two_hunks	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:cursor_in_two_hunks()$/;"	f
cursor_top	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:cursor_top() abort "{{{$/;"	f
cursor_up	plugged/unite.vim/autoload/unite/handlers.vim	/^function! s:cursor_up() abort "{{{$/;"	f
customOpenBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenBookmark(node) abort$/;"	f
customOpenDir	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenDir(node) abort$/;"	f
customOpenFile	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenFile(node) abort$/;"	f
custom_alternate_buffer	plugged/unite.vim/autoload/unite/exrename.vim	/^function! s:custom_alternate_buffer() abort "{{{$/;"	f
custom_base	plugged/unite.vim/autoload/unite/custom.vim	/^function! s:custom_base(key, kind, name, value) abort "{{{$/;"	f
debug	plugged/vim-go/autoload/go/debug_test.vim	/^function! s:debug(...) abort$/;"	f
debug	plugged/vim-go/autoload/go/lsp.vim	/^function! s:debug(event, data) abort$/;"	f
debugasync	plugged/vim-go/autoload/go/lsp.vim	/^function! s:debugasync(timer) abort$/;"	f
decodehex	plugged/vim-go/autoload/go/uri.vim	/^function! s:decodehex(value)$/;"	f
dedup	plugged/vim-go/autoload/go/lsp.vim	/^function! s:dedup(list)$/;"	f
def_job	plugged/vim-go/autoload/go/def.vim	/^function s:def_job(args, state) abort$/;"	f
def_python	plugged/unite.vim/autoload/unite/filters/sorter_selecta.vim	/^function! s:def_python() abort$/;"	f
default	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let default = exists('&previewpopup') ? !empty(&previewpopup) : 0$/;"	v
default_grep	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let default_grep = 'grep'$/;"	v
define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
define_sign_line_highlights	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_line_highlights() abort$/;"	f
define_sign_linenr_highlights	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_linenr_highlights() abort$/;"	f
define_sign_text	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:define_sign_text() abort$/;"	f
definitionHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:definitionHandler(next, msg) abort dict$/;"	f
delete	autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
delete	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^function! s:delete(delete_command, candidate) abort "{{{$/;"	f
delete	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^function! s:delete(cache_dir, filename) abort$/;"	f
deleteBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark) abort$/;"	f
delete_backward_path	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:delete_backward_path() abort "{{{$/;"	f
delete_expands	plugged/vim-go/autoload/go/debug.vim	/^function! s:delete_expands()$/;"	f
delete_op	autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
deletefile	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^function! s:deletefile(cache_dir, filename) abort$/;"	f
deleteline	plugged/vim-go/autoload/go/lsp.vim	/^function! s:deleteline(start, end) abort$/;"	f
denite	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^import denite.util$/;"	i
deprecated	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:deprecated(oldv, newv) abort$/;"	f
dequeueneocbs	plugged/vim-go/autoload/go/job.vim	/^function! s:dequeueneocbs(timer) abort$/;"	f
describe("(deprecated) respect vim.g.catppuccin_flavour 	plugged/catppuccin/tests/flavour_spec.lua	/^describe("(deprecated) respect vim.g.catppuccin_flavour =", function()$/;"	f
describe("respect setup flavour 	plugged/catppuccin/tests/flavour_spec.lua	/^describe("respect setup flavour =", function()$/;"	f
describe("respect vim.o.background 	plugged/catppuccin/tests/flavour_spec.lua	/^describe("respect vim.o.background =", function()$/;"	f
diagnostic_after_write	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:diagnostic_after_write(contents, changes) abort$/;"	f
diagnostics_for_buffer	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:diagnostics_for_buffer()$/;"	f
diff	autoload/plug.vim	/^function! s:diff()$/;"	f
diff	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:diff(rline, aline, rlinenr, alinenr, rprefix, aprefix, regions, whole_line)$/;"	f
diff_window_count	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
diffidx	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:diffidx(a, b) abort$/;"	f
diffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff() abort$/;"	f
diffoff_all	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
diffthis	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffthis() abort$/;"	f
dir	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:dir(bufnr) abort$/;"	f
dirname	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:dirname(path) abort$/;"	f
dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
disableLiveUpdate	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:disableLiveUpdate() abort$/;"	f
disable_max_candidates	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:disable_max_candidates() abort "{{{$/;"	f
displayHelp	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp() abort$/;"	f
display_git_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:display_git_branch()$/;"	f
display_hg_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:display_hg_branch()$/;"	f
display_width	plugged/vim-snippets/pythonx/vimsnippets.py	/^def display_width(str):$/;"	f
do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
do_delayed_update	plugged/tagbar/autoload/tagbar.vim	/^function! s:do_delayed_update() abort$/;"	f
do_new_candidate_action	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:do_new_candidate_action() abort "{{{$/;"	f
do_rename	plugged/unite.vim/autoload/unite/exrename.vim	/^function! s:do_rename() abort "{{{$/;"	f
doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
docFromHoverResult	plugged/vim-go/autoload/go/lsp.vim	/^function! s:docFromHoverResult(msg) abort dict$/;"	f
docLinkFromHoverResult	plugged/vim-go/autoload/go/lsp.vim	/^function! s:docLinkFromHoverResult(msg) abort dict$/;"	f
dos_shell	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:dos_shell()$/;"	f
dstring	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:dstring(expr) abort$/;"	f
dummy_loading	plugged/unite.vim/autoload/unite/sources/line.vim	/^function! s:dummy_loading(bufnrs) abort "{{{$/;"	f
east_asian_width	plugged/vim-snippets/pythonx/vimsnippets.py	/^        from unicodedata import east_asian_width$/;"	i
echo	plugged/unite.vim/autoload/vital/_unite/Vim/Message.vim	/^function! s:echo(hl, msg) abort$/;"	f
echo	plugged/vim-go/autoload/go/util.vim	/^function! s:echo(msg, hi)$/;"	f
echo_go_info	plugged/vim-go/autoload/go/auto.vim	/^function! s:echo_go_info()$/;"	f
echo_signature	plugged/coc.nvim/autoload/coc/ui.vim	/^function! s:echo_signature(parts)$/;"	f
echomsg	plugged/unite.vim/autoload/vital/_unite/Vim/Message.vim	/^function! s:echomsg(hl, msg) abort$/;"	f
elseif t 	plugged/catppuccin/lua/catppuccin/lib/hashing.lua	/^	elseif t == "function" then$/;"	f
empty_border	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:empty_border(border) abort$/;"	f
enableLiveUpdate	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:enableLiveUpdate() abort$/;"	f
enable_staging_from_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:enable_staging_from_hunk_preview_window()$/;"	f
enable_syntax	plugged/vim-go/autoload/ctrlp/decls.vim	/^function! s:enable_syntax() abort$/;"	f
enabled 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^		enabled = function() return any_git_changes() end,$/;"	f
enabled 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^		enabled = function() return lsp.diagnostics_exist(vim.diagnostic.severity.ERROR) end,$/;"	f
enabled 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^		enabled = function() return lsp.diagnostics_exist(vim.diagnostic.severity.HINT) end,$/;"	f
enabled 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^		enabled = function() return lsp.diagnostics_exist(vim.diagnostic.severity.INFO) end,$/;"	f
enabled 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^		enabled = function() return lsp.diagnostics_exist(vim.diagnostic.severity.WARN) end,$/;"	f
enabled 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^		enabled = function() return not any_git_changes() end,$/;"	f
enabled 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^		enabled = function() return vim.api.nvim_get_option "cmdheight" == 0 end,$/;"	f
encode	plugged/vim-go/autoload/go/uri.vim	/^function! s:encode(value, unreserved)$/;"	f
encodechar	plugged/vim-go/autoload/go/uri.vim	/^function! s:encodechar(value)$/;"	f
ends_with	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:ends_with(str, suffix) abort$/;"	f
ensureWorkspace	plugged/vim-go/autoload/go/lsp.vim	/^function! s:ensureWorkspace(dir)$/;"	f
err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
err_cb	plugged/vim-go/autoload/go/debug.vim	/^function! s:err_cb(ch, msg) abort$/;"	f
error	plugged/unite.vim/autoload/vital/_unite/Vim/Message.vim	/^function! s:error(msg) abort$/;"	f
errorformat	plugged/vim-go/autoload/go/lint.vim	/^function! s:errorformat(metalinter) abort$/;"	f
errorformat	plugged/vim-go/autoload/go/test.vim	/^function! s:errorformat() abort$/;"	f
esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
escape_file_searching	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:escape_file_searching(buffer_name) abort$/;"	f
escape_pattern	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:escape_pattern(str) abort$/;"	f
escape_pattern	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:escape_pattern(str) abort$/;"	f
escape_space	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:escape_space(text) abort$/;"	f
escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
eval	plugged/vim-go/autoload/go/debug.vim	/^function! s:eval(arg) abort$/;"	f
evalResult	plugged/vim-go/autoload/go/debug.vim	/^function! s:evalResult(res) abort$/;"	f
eval_cmdline	plugged/unite.vim/autoload/unite/helper.vim	/^function! s:eval_cmdline(cmdline) abort "{{{$/;"	f
eval_tree	plugged/vim-go/autoload/go/debug.vim	/^function! s:eval_tree(var, nest, isMapOrSliceChild) abort$/;"	f
evaluate_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:evaluate_tabline(tabline)$/;"	f
exec	plugged/vim-go/autoload/go/util.vim	/^function! s:exec(cmd, ...) abort$/;"	f
exec_separator	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:exec_separator(dict, from, to, inverse, suffix) abort$/;"	f
executable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:executable(binary) abort$/;"	f
execute	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:execute(cmd)$/;"	f
executeCommand	plugged/vim-go/autoload/go/lsp.vim	/^function! s:executeCommand(cmd, args) abort$/;"	f
execute_command	plugged/unite.vim/autoload/unite/kinds/command.vim	/^function! s:execute_command(command) abort "{{{$/;"	f
execute_command	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:execute_command(command, candidate) abort "{{{$/;"	f
exists	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:exists(name) abort dict$/;"	f
exists_file	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:exists_file(bufnr) abort$/;"	f
exit	plugged/unite.vim/autoload/unite/exrename.vim	/^function! s:exit(bufnr) abort "{{{$/;"	f
exit	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:exit() abort "{{{$/;"	f
exit	plugged/vim-go/autoload/go/lsp.vim	/^function! s:exit(restart) abort$/;"	f
exit_cb	plugged/vim-go/autoload/go/job.vim	/^function! s:exit_cb(job, exitval) dict$/;"	f
exit_cb	plugged/vim-go/autoload/go/rename.vim	/^function! s:exit_cb(next, job, exitval) abort$/;"	f
exit_cb	plugged/vim-go/autoload/go/term.vim	/^function! s:exit_cb(job_id, exit_status) dict abort$/;"	f
exited	plugged/vim-go/autoload/go/debug.vim	/^function! s:exited(res) abort$/;"	f
expandRunArgs	plugged/vim-go/autoload/go/cmd.vim	/^function! s:expandRunArgs(idx, val) abort$/;"	f
expand_var	plugged/vim-go/autoload/go/debug.vim	/^function! s:expand_var() abort$/;"	f
expected	plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let expected = [$/;"	v
expected	plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let expected = [{'lnum': 1, 'name': 'GitGutterLineRemovedFirstLine'}]$/;"	v
expected	plugged/vim-gitgutter/test/test_gitgutter.vim	/^  let expected = [{'lnum': 2, 'name': 'GitGutterLineRemoved'}]$/;"	v
ext.add_inactive_statusline_func	plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_inactive_statusline_func(name) dict$/;"	f
ext.add_statusline_func	plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_func(name) dict$/;"	f
ext.add_statusline_funcref	plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_statusline_funcref(function) dict$/;"	f
ext.add_theme_func	plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:ext.add_theme_func(name) dict$/;"	f
extend_actions	plugged/unite.vim/autoload/unite/action.vim	/^function! s:extend_actions(self_func, action_table1, action_table2, ...) abort "{{{$/;"	f
external	plugged/unite.vim/autoload/unite/kinds/file.vim	/^function! s:external(command, dest_dir, src_files) abort "{{{$/;"	f
external_cd	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:external_cd(candidate) abort "{{{$/;"	f
extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
file_bookmark_action.func	plugged/unite.vim/plugin/unite/bookmark.vim	/^function! s:file_bookmark_action.func(candidate) abort "{{{$/;"	f
filereadable	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^function! s:filereadable(cache_dir, filename) abort$/;"	f
filter	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! s:filter(list, id) abort$/;"	f
filter_alias_action	plugged/unite.vim/autoload/unite/action.vim	/^function! s:filter_alias_action(action_table, alias_table, from) abort "{{{$/;"	f
filter_self_func	plugged/unite.vim/autoload/unite/action.vim	/^function! s:filter_self_func(action_table, self_func) abort "{{{$/;"	f
find	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:find(list, default, f) abort$/;"	f
findAndRevealPath	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr) abort$/;"	f
findHunk	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:findHunk(node, direction) abort$/;"	f
find_current_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:find_current_signs(bufnr) abort$/;"	f
find_end_of_match	plugged/unite.vim/autoload/unite/filters/sorter_selecta.py	/^def find_end_of_match(to_match, chars, first_index):$/;"	f
find_index	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
find_indices	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
find_last_index	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
find_win	plugged/coc.nvim/autoload/coc/notify.vim	/^function! s:find_win(key) abort$/;"	f
finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
fix_file_references	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:fix_file_references(filepath, hunk_diff)$/;"	f
flatten	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:flatten(list, ...) abort$/;"	f
flavors	plugged/catppuccin/.github/scripts/update-palette.py	/^    flavors = json.loads(response.read().decode())$/;"	v
fmt_cmd	plugged/vim-go/autoload/go/fmt.vim	/^function! s:fmt_cmd(bin_name, source, target)$/;"	f
fnameescape	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
folded	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:folded()$/;"	f
foldl	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
foldl1	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
foldmarker	plugged/vim-snippets/pythonx/vimsnippets.py	/^def foldmarker():$/;"	f
foldr	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
foldr1	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
format_for_log	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:format_for_log(data) abort$/;"	f
format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
format_name	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^  function! s:format_name(name)$/;"	f
format_time	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! s:format_time(time) abort "{{{$/;"	f
format_wordcount	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^      function! s:format_wordcount(_)$/;"	f
format_wordcount	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! s:format_wordcount(wordcount)$/;"	f
friendly_name	plugged/vim-gitgutter/test/runner.vim	/^  let friendly_name = FriendlyName(test)$/;"	v
fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#Autowrite	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Autowrite() abort$/;"	f
fugitive#BisectComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BisectComplete(A, L, P, ...) abort$/;"	f
fugitive#BlameComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameComplete(A, L, P) abort$/;"	f
fugitive#BlameFileType	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameFileType() abort$/;"	f
fugitive#BlameSyntax	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameSyntax() abort$/;"	f
fugitive#BrowseCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BrowseCommand(line1, count, range, bang, mods, arg, ...) abort$/;"	f
fugitive#BufReadCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadCmd(...) abort$/;"	f
fugitive#BufReadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadStatus(cmdbang) abort$/;"	f
fugitive#BufWriteCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufWriteCmd(...) abort$/;"	f
fugitive#CanDiffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CanDiffoff(buf) abort$/;"	f
fugitive#CanPty	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CanPty() abort$/;"	f
fugitive#Cd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cd(path, ...) abort$/;"	f
fugitive#CdComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CdComplete(A, L, P) abort$/;"	f
fugitive#Cfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cfile() abort$/;"	f
fugitive#Command	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Command(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#CommitComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommitComplete(A, L, P, ...) abort$/;"	f
fugitive#Complete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Complete(lead, ...) abort$/;"	f
fugitive#CompleteForWorkingDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteForWorkingDir(A, L, P, ...) abort$/;"	f
fugitive#CompleteObject	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteObject(base, ...) abort$/;"	f
fugitive#CompletePath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompletePath(base, ...) abort$/;"	f
fugitive#Config	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Config(...) abort$/;"	f
fugitive#ConfigGetAll	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ConfigGetAll(name, ...) abort$/;"	f
fugitive#ConfigGetRegexp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ConfigGetRegexp(pattern, ...) abort$/;"	f
fugitive#Cwindow	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cwindow() abort$/;"	f
fugitive#DeleteCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DeleteCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#DidChange	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DidChange(...) abort$/;"	f
fugitive#DiffClose	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DiffClose() abort$/;"	f
fugitive#Diffsplit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Diffsplit(autodir, keepfocus, mods, arg, ...) abort$/;"	f
fugitive#DropCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DropCommand(line1, count, range, bang, mods, arg, ...) abort$/;"	f
fugitive#EditComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EditComplete(A, L, P) abort$/;"	f
fugitive#EfmDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EfmDir(...) abort$/;"	f
fugitive#Execute	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Execute(...) abort$/;"	f
fugitive#Expand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Expand(object) abort$/;"	f
fugitive#ExpireConfig	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ExpireConfig(...) abort$/;"	f
fugitive#FetchComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FetchComplete(A, L, P, ...) abort$/;"	f
fugitive#FileReadCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileReadCmd(...) abort$/;"	f
fugitive#FileWriteCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileWriteCmd(...) abort$/;"	f
fugitive#Find	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Find(object, ...) abort$/;"	f
fugitive#Foldtext	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Foldtext() abort$/;"	f
fugitive#GX	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GX() abort$/;"	f
fugitive#GitVersion	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GitVersion(...) abort$/;"	f
fugitive#GrepCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepCommand(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#GrepComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepComplete(A, L, P) abort$/;"	f
fugitive#Head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Head(...) abort$/;"	f
fugitive#LogCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogCommand(line1, count, range, bang, mods, args, type) abort$/;"	f
fugitive#LogComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogComplete(A, L, P) abort$/;"	f
fugitive#MapCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapCfile(...) abort$/;"	f
fugitive#MapJumps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapJumps(...) abort$/;"	f
fugitive#MergeComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MergeComplete(A, L, P, ...) abort$/;"	f
fugitive#MessageCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MessageCfile() abort$/;"	f
fugitive#MoveCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MoveCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#Object	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Object(...) abort$/;"	f
fugitive#Open	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Open(cmd, bang, mods, arg, ...) abort$/;"	f
fugitive#PagerFor	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PagerFor(argv, ...) abort$/;"	f
fugitive#Parse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Parse(url) abort$/;"	f
fugitive#Path	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Path(url, ...) abort$/;"	f
fugitive#PathComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PathComplete(...) abort$/;"	f
fugitive#PorcelainCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PorcelainCfile() abort$/;"	f
fugitive#PrepareDirEnvGitFlagsArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareDirEnvGitFlagsArgs(...) abort$/;"	f
fugitive#PrepareJob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareJob(...) abort$/;"	f
fugitive#PullComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PullComplete(A, L, P, ...) abort$/;"	f
fugitive#PushComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PushComplete(A, L, P, ...) abort$/;"	f
fugitive#ReadCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadCommand(line1, count, range, bang, mods, arg, ...) abort$/;"	f
fugitive#ReadComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadComplete(A, L, P) abort$/;"	f
fugitive#Real	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Real(url) abort$/;"	f
fugitive#RebaseComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RebaseComplete(A, L, P, ...) abort$/;"	f
fugitive#ReloadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReloadStatus(...) abort$/;"	f
fugitive#Remote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Remote(...) abort$/;"	f
fugitive#RemoteHttpHeaders	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteHttpHeaders(remote) abort$/;"	f
fugitive#RemoteUrl	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteUrl(...) abort$/;"	f
fugitive#RemoveCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoveCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#RenameCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#RenameComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameComplete(A,L,P) abort$/;"	f
fugitive#ResolveUrl	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ResolveUrl(target, ...) abort$/;"	f
fugitive#Result	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Result(...) abort$/;"	f
fugitive#Resume	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Resume() abort$/;"	f
fugitive#RevParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevParse(rev, ...) abort$/;"	f
fugitive#RevertComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevertComplete(A, L, P, ...) abort$/;"	f
fugitive#ShellCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ShellCommand(...) abort$/;"	f
fugitive#SourceCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SourceCmd(...) abort$/;"	f
fugitive#SshConfig	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SshConfig(host, ...) abort$/;"	f
fugitive#SshHostAlias	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SshHostAlias(authority) abort$/;"	f
fugitive#Statusline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Statusline(...) abort$/;"	f
fugitive#UnlinkCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#UnlinkCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#Unquote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Unquote(string) abort$/;"	f
fugitive#UrlDecode	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#UrlDecode(str) abort$/;"	f
fugitive#Wait	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Wait(job_or_jobs, ...) abort$/;"	f
fugitive#WqCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WqCommand(...) abort$/;"	f
fugitive#WriteCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WriteCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#delete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#delete(url, ...) abort$/;"	f
fugitive#filereadable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filereadable(url) abort$/;"	f
fugitive#filewritable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filewritable(url) abort$/;"	f
fugitive#foldtext	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive#getfperm	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfperm(url) abort$/;"	f
fugitive#getfsize	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfsize(url) abort$/;"	f
fugitive#getftime	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftime(url) abort$/;"	f
fugitive#getftype	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftype(url) abort$/;"	f
fugitive#glob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#glob(url, ...) abort$/;"	f
fugitive#isdirectory	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#isdirectory(url) abort$/;"	f
fugitive#readfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#readfile(url, ...) abort$/;"	f
fugitive#repo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
fugitive#resolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#resolve(url) abort$/;"	f
fugitive#setfperm	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#setfperm(url, perm) abort$/;"	f
fugitive#simplify	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#simplify(url) abort$/;"	f
fugitive#statusline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive#writefile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#writefile(lines, url, ...) abort$/;"	f
fugitive_blame	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_diff	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_dummy_events	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_dummy_events$/;"	a
fugitive_job	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_job$/;"	a
fugitive_status	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_status$/;"	a
fugitive_temp	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_temp$/;"	a
funcs.buf_add_highlight	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_add_highlight(bufnr, srcId, hlGroup, line, colStart, colEnd, ...) abort$/;"	f
funcs.buf_attach	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_attach(...)$/;"	f
funcs.buf_clear_namespace	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_clear_namespace(bufnr, srcId, startLine, endLine) abort$/;"	f
funcs.buf_del_keymap	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_del_keymap(bufnr, mode, lhs) abort$/;"	f
funcs.buf_del_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_del_var(bufnr, name)$/;"	f
funcs.buf_detach	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_detach()$/;"	f
funcs.buf_get_changedtick	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_changedtick(bufnr)$/;"	f
funcs.buf_get_lines	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_lines(bufnr, start, end, strict) abort$/;"	f
funcs.buf_get_mark	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_mark(bufnr, name)$/;"	f
funcs.buf_get_name	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_name(bufnr)$/;"	f
funcs.buf_get_option	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_option(bufnr, name)$/;"	f
funcs.buf_get_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_get_var(bufnr, name)$/;"	f
funcs.buf_is_loaded	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_is_loaded(bufnr)$/;"	f
funcs.buf_is_valid	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_is_valid(bufnr)$/;"	f
funcs.buf_line_count	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_line_count(bufnr) abort$/;"	f
funcs.buf_set_keymap	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_keymap(bufnr, mode, lhs, rhs, opts) abort$/;"	f
funcs.buf_set_lines	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_lines(bufnr, start, end, strict, ...) abort$/;"	f
funcs.buf_set_name	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_name(bufnr, name) abort$/;"	f
funcs.buf_set_option	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_option(bufnr, name, val)$/;"	f
funcs.buf_set_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.buf_set_var(bufnr, name, val)$/;"	f
funcs.call_atomic	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_atomic(calls)$/;"	f
funcs.call_dict_function	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_dict_function(dict, method, args) abort$/;"	f
funcs.call_function	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.call_function(method, args) abort$/;"	f
funcs.command	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.command(command) abort$/;"	f
funcs.command_output	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.command_output(cmd)$/;"	f
funcs.create_buf	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.create_buf(listed, scratch) abort$/;"	f
funcs.create_namespace	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.create_namespace(name) abort$/;"	f
funcs.del_current_line	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_current_line()$/;"	f
funcs.del_keymap	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_keymap(mode, lhs) abort$/;"	f
funcs.del_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.del_var(name) abort$/;"	f
funcs.err_write	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.err_write(str)$/;"	f
funcs.err_writeln	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.err_writeln(str)$/;"	f
funcs.eval	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.eval(expr) abort$/;"	f
funcs.exec	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.exec(code, output) abort$/;"	f
funcs.feedkeys	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.feedkeys(keys, mode, escape_csi)$/;"	f
funcs.get_api_info	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_api_info()$/;"	f
funcs.get_current_buf	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_buf()$/;"	f
funcs.get_current_line	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_line()$/;"	f
funcs.get_current_tabpage	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_tabpage()$/;"	f
funcs.get_current_win	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_current_win()$/;"	f
funcs.get_mode	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_mode()$/;"	f
funcs.get_option	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_option(name)$/;"	f
funcs.get_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_var(var)$/;"	f
funcs.get_vvar	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.get_vvar(var)$/;"	f
funcs.input	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.input(keys) abort$/;"	f
funcs.list_bufs	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_bufs()$/;"	f
funcs.list_runtime_paths	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_runtime_paths()$/;"	f
funcs.list_tabpages	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_tabpages()$/;"	f
funcs.list_wins	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.list_wins() abort$/;"	f
funcs.out_write	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.out_write(str)$/;"	f
funcs.set_client_info	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_client_info(...) abort$/;"	f
funcs.set_current_buf	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_buf(bufnr) abort$/;"	f
funcs.set_current_dir	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_dir(dir) abort$/;"	f
funcs.set_current_line	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_line(line)$/;"	f
funcs.set_current_tabpage	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_tabpage(tid) abort$/;"	f
funcs.set_current_win	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_current_win(winid) abort$/;"	f
funcs.set_keymap	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_keymap(mode, lhs, rhs, opts) abort$/;"	f
funcs.set_option	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_option(name, value) abort$/;"	f
funcs.set_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.set_var(name, value) abort$/;"	f
funcs.strwidth	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.strwidth(str)$/;"	f
funcs.subscribe	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.subscribe(...) abort$/;"	f
funcs.tabpage_del_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_del_var(tid, name)$/;"	f
funcs.tabpage_get_number	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_number(tid)$/;"	f
funcs.tabpage_get_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_var(tid, name)$/;"	f
funcs.tabpage_get_win	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_get_win(tid)$/;"	f
funcs.tabpage_is_valid	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_is_valid(tid)$/;"	f
funcs.tabpage_list_wins	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_list_wins(tid)$/;"	f
funcs.tabpage_set_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.tabpage_set_var(tid, name, value)$/;"	f
funcs.unsubscribe	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.unsubscribe(...) abort$/;"	f
funcs.win_close	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_close(winid, ...) abort$/;"	f
funcs.win_del_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_del_var(winid, name) abort$/;"	f
funcs.win_get_buf	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_buf(winid)$/;"	f
funcs.win_get_cursor	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_cursor(winid) abort$/;"	f
funcs.win_get_height	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_height(winid) abort$/;"	f
funcs.win_get_number	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_number(winid) abort$/;"	f
funcs.win_get_option	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_option(winid, name, ...) abort$/;"	f
funcs.win_get_position	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_position(winid) abort$/;"	f
funcs.win_get_tabpage	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_tabpage(winid) abort$/;"	f
funcs.win_get_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_var(winid, name, ...) abort$/;"	f
funcs.win_get_width	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_get_width(winid) abort$/;"	f
funcs.win_is_valid	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_is_valid(winid) abort$/;"	f
funcs.win_set_buf	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_buf(winid, bufnr) abort$/;"	f
funcs.win_set_cursor	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_cursor(winid, pos) abort$/;"	f
funcs.win_set_height	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_height(winid, height) abort$/;"	f
funcs.win_set_option	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_option(winid, name, value) abort$/;"	f
funcs.win_set_var	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_var(winid, name, value) abort$/;"	f
funcs.win_set_width	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:funcs.win_set_width(winid, width) abort$/;"	f
function	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:function(name) abort$/;"	f
function.createSequences	plugged/coc.nvim/bin/prompt.js	/^function createSequences(str) {$/;"	f
function.send	plugged/coc.nvim/bin/prompt.js	/^function send(args) {$/;"	f
functionCallHighlightGroup	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:functionCallHighlightGroup(testname, value)$/;"	f
functionHighlightGroup	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:functionHighlightGroup(testname, value)$/;"	f
functions 	plugged/catppuccin/lua/catppuccin/init.lua	/^			functions = {},$/;"	f
fzf#decls#cmd	plugged/vim-go/autoload/fzf/decls.vim	/^function! fzf#decls#cmd(...) abort$/;"	f
g:NERDDelimiterMap	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^let g:NERDDelimiterMap = s:delimiterMap$/;"	v
g:NERDTree	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoCenter	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenter            = get(g:, 'NERDTreeAutoCenter',            1)$/;"	v
g:NERDTreeAutoCenterThreshold	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenterThreshold   = get(g:, 'NERDTreeAutoCenterThreshold',   3)$/;"	v
g:NERDTreeAutoDeleteBuffer	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeBookmarksFile	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksFile         = get(g:, 'NERDTreeBookmarksFile',         expand('$HOME') . '\/.NERDTreeBookmarks')$/;"	v
g:NERDTreeBookmarksSort	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksSort         = get(g:, 'NERDTreeBookmarksSort',         1)$/;"	v
g:NERDTreeCascadeOpenSingleChildDir	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeOpenSingleChildDir = get(g:, 'NERDTreeCascadeOpenSingleChildDir', 1)$/;"	v
g:NERDTreeCascadeSingleChildDir	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeSingleChildDir     = get(g:, 'NERDTreeCascadeSingleChildDir',     1)$/;"	v
g:NERDTreeCaseSensitiveFS	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCaseSensitiveFS       = get(g:, 'NERDTreeCaseSensitiveFS',       2)$/;"	v
g:NERDTreeCaseSensitiveSort	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCaseSensitiveSort     = get(g:, 'NERDTreeCaseSensitiveSort',     0)$/;"	v
g:NERDTreeChDirMode	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeChDirMode             = get(g:, 'NERDTreeChDirMode',             0)$/;"	v
g:NERDTreeCopyCmd	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyCmd      = get(g:, 'NERDTreeCopyCmd',      'cp -r ')$/;"	v
g:NERDTreeCopyDirCmd	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyDirCmd   = get(g:, 'NERDTreeCopyDirCmd',   'xcopy \/s \/e \/i \/y \/q ')$/;"	v
g:NERDTreeCopyFileCmd	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyFileCmd  = get(g:, 'NERDTreeCopyFileCmd',  'copy \/y ')$/;"	v
g:NERDTreeCreatePrefix	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCreatePrefix          = get(g:, 'NERDTreeCreatePrefix',          'silent')$/;"	v
g:NERDTreeCreator	plugged/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeDirArrowCollapsible	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '~')$/;"	v
g:NERDTreeDirArrowCollapsible	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '▾')$/;"	v
g:NERDTreeDirArrowExpandable	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '+')$/;"	v
g:NERDTreeDirArrowExpandable	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '▸')$/;"	v
g:NERDTreeDirNode	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	plugged/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileLines	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeFileLines             = get(g:, 'NERDTreeFileLines',             0)$/;"	v
g:NERDTreeFileNode	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeGlyphReadOnly	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeGlyphReadOnly = get(g:, 'NERDTreeGlyphReadOnly', 'RO')$/;"	v
g:NERDTreeHighlightCursorline	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHighlightCursorline   = get(g:, 'NERDTreeHighlightCursorline',   1)$/;"	v
g:NERDTreeHijackNetrw	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHijackNetrw           = get(g:, 'NERDTreeHijackNetrw',           1)$/;"	v
g:NERDTreeIgnore	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeIgnore                = get(g:, 'NERDTreeIgnore',                ['\\~$'])$/;"	v
g:NERDTreeKeyMap	plugged/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMapActivateNode	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapActivateNode    = get(g:, 'NERDTreeMapActivateNode',    'o')$/;"	v
g:NERDTreeMapCWD	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCWD             = get(g:, 'NERDTreeMapCWD',             'CD')$/;"	v
g:NERDTreeMapChangeRoot	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChangeRoot      = get(g:, 'NERDTreeMapChangeRoot',      'C')$/;"	v
g:NERDTreeMapChdir	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChdir           = get(g:, 'NERDTreeMapChdir',           'cd')$/;"	v
g:NERDTreeMapCloseChildren	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseChildren   = get(g:, 'NERDTreeMapCloseChildren',   'X')$/;"	v
g:NERDTreeMapCloseDir	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseDir        = get(g:, 'NERDTreeMapCloseDir',        'x')$/;"	v
g:NERDTreeMapCustomOpen	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCustomOpen      = get(g:, 'NERDTreeMapCustomOpen',      '<CR>')$/;"	v
g:NERDTreeMapDeleteBookmark	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapDeleteBookmark  = get(g:, 'NERDTreeMapDeleteBookmark',  'D')$/;"	v
g:NERDTreeMapHelp	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapHelp            = get(g:, 'NERDTreeMapHelp',            '?')$/;"	v
g:NERDTreeMapJumpFirstChild	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpFirstChild  = get(g:, 'NERDTreeMapJumpFirstChild',  'K')$/;"	v
g:NERDTreeMapJumpLastChild	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpLastChild   = get(g:, 'NERDTreeMapJumpLastChild',   'J')$/;"	v
g:NERDTreeMapJumpNextSibling	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpNextSibling = get(g:, 'NERDTreeMapJumpNextSibling', '<C-j>')$/;"	v
g:NERDTreeMapJumpParent	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpParent      = get(g:, 'NERDTreeMapJumpParent',      'p')$/;"	v
g:NERDTreeMapJumpPrevSibling	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpPrevSibling = get(g:, 'NERDTreeMapJumpPrevSibling', '<C-k>')$/;"	v
g:NERDTreeMapJumpRoot	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpRoot        = get(g:, 'NERDTreeMapJumpRoot',        'P')$/;"	v
g:NERDTreeMapMenu	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapMenu            = get(g:, 'NERDTreeMapMenu',            'm')$/;"	v
g:NERDTreeMapOpenExpl	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenExpl        = get(g:, 'NERDTreeMapOpenExpl',        'e')$/;"	v
g:NERDTreeMapOpenInTab	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTab       = get(g:, 'NERDTreeMapOpenInTab',       't')$/;"	v
g:NERDTreeMapOpenInTabSilent	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTabSilent = get(g:, 'NERDTreeMapOpenInTabSilent', 'T')$/;"	v
g:NERDTreeMapOpenRecursively	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenRecursively = get(g:, 'NERDTreeMapOpenRecursively', 'O')$/;"	v
g:NERDTreeMapOpenSplit	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenSplit       = get(g:, 'NERDTreeMapOpenSplit',       'i')$/;"	v
g:NERDTreeMapOpenVSplit	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenVSplit      = get(g:, 'NERDTreeMapOpenVSplit',      's')$/;"	v
g:NERDTreeMapPreview	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreview         = get(g:, 'NERDTreeMapPreview',         'g'.NERDTreeMapActivateNode)$/;"	v
g:NERDTreeMapPreviewSplit	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewSplit    = get(g:, 'NERDTreeMapPreviewSplit',    'g'.NERDTreeMapOpenSplit)$/;"	v
g:NERDTreeMapPreviewVSplit	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewVSplit   = get(g:, 'NERDTreeMapPreviewVSplit',   'g'.NERDTreeMapOpenVSplit)$/;"	v
g:NERDTreeMapQuit	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapQuit            = get(g:, 'NERDTreeMapQuit',            'q')$/;"	v
g:NERDTreeMapRefresh	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefresh         = get(g:, 'NERDTreeMapRefresh',         'r')$/;"	v
g:NERDTreeMapRefreshRoot	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefreshRoot     = get(g:, 'NERDTreeMapRefreshRoot',     'R')$/;"	v
g:NERDTreeMapToggleBookmarks	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleBookmarks = get(g:, 'NERDTreeMapToggleBookmarks', 'B')$/;"	v
g:NERDTreeMapToggleFileLines	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFileLines = get(g:, 'NERDTreeMapToggleFileLines', 'FL')$/;"	v
g:NERDTreeMapToggleFiles	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFiles     = get(g:, 'NERDTreeMapToggleFiles',     'F')$/;"	v
g:NERDTreeMapToggleFilters	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFilters   = get(g:, 'NERDTreeMapToggleFilters',   'f')$/;"	v
g:NERDTreeMapToggleHidden	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleHidden    = get(g:, 'NERDTreeMapToggleHidden',    'I')$/;"	v
g:NERDTreeMapToggleZoom	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleZoom      = get(g:, 'NERDTreeMapToggleZoom',      'A')$/;"	v
g:NERDTreeMapUpdir	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdir           = get(g:, 'NERDTreeMapUpdir',           'u')$/;"	v
g:NERDTreeMapUpdirKeepOpen	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdirKeepOpen   = get(g:, 'NERDTreeMapUpdirKeepOpen',   'U')$/;"	v
g:NERDTreeMarkBookmarks	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMarkBookmarks         = get(g:, 'NERDTreeMarkBookmarks',         1)$/;"	v
g:NERDTreeMenuController	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuDown	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuDown           = get(g:, 'NERDTreeMenuDown',           'j')$/;"	v
g:NERDTreeMenuItem	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeMenuUp	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuUp             = get(g:, 'NERDTreeMenuUp',             'k')$/;"	v
g:NERDTreeMinimalMenu	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalMenu           = get(g:, 'NERDTreeMinimalMenu',           0)$/;"	v
g:NERDTreeMinimalUI	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalUI             = get(g:, 'NERDTreeMinimalUI',             0)$/;"	v
g:NERDTreeMouseMode	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMouseMode             = get(g:, 'NERDTreeMouseMode',             1)$/;"	v
g:NERDTreeNaturalSort	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNaturalSort           = get(g:, 'NERDTreeNaturalSort',           0)$/;"	v
g:NERDTreeNodeDelimiter	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00a0")$/;"	v
g:NERDTreeNodeDelimiter	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00b7")$/;"	v
g:NERDTreeNodeDelimiter	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\x07")$/;"	v
g:NERDTreeNotificationThreshold	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNotificationThreshold = get(g:, 'NERDTreeNotificationThreshold', 100)$/;"	v
g:NERDTreeOldSortOrder	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOpener	plugged/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	plugged/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	plugged/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeQuitOnOpen	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeQuitOnOpen            = get(g:, 'NERDTreeQuitOnOpen',            0)$/;"	v
g:NERDTreeRemoveDirCmd	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rm -rf ')$/;"	v
g:NERDTreeRemoveDirCmd	plugged/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rmdir \/s \/q ')$/;"	v
g:NERDTreeRespectWildIgnore	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeRespectWildIgnore     = get(g:, 'NERDTreeRespectWildIgnore',     0)$/;"	v
g:NERDTreeShowBookmarks	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowBookmarks         = get(g:, 'NERDTreeShowBookmarks',         0)$/;"	v
g:NERDTreeShowFiles	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowFiles             = get(g:, 'NERDTreeShowFiles',             1)$/;"	v
g:NERDTreeShowHidden	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowHidden            = get(g:, 'NERDTreeShowHidden',            0)$/;"	v
g:NERDTreeShowLineNumbers	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowLineNumbers       = get(g:, 'NERDTreeShowLineNumbers',       0)$/;"	v
g:NERDTreeSortDirs	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortDirs              = get(g:, 'NERDTreeSortDirs',              1)$/;"	v
g:NERDTreeSortHiddenFirst	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortHiddenFirst       = get(g:, 'NERDTreeSortHiddenFirst',       1)$/;"	v
g:NERDTreeSortOrder	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortOrder    = get(g:, 'NERDTreeSortOrder', ['\\\/$', '*', '\\.swp$', '\\.bak$', '\\~$'])$/;"	v
g:NERDTreeStatusline	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeStatusline = get(g:, 'NERDTreeStatusline', "%{exists('b:NERDTree')?b:NERDTree.root.path.str():''}")$/;"	v
g:NERDTreeUI	plugged/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:NERDTreeUseTCD	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeUseTCD                = get(g:, 'NERDTreeUseTCD',                0)$/;"	v
g:NERDTreeWinPos	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinPos  = get(g:, 'NERDTreeWinPos', 'left')$/;"	v
g:NERDTreeWinSize	plugged/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinSize = get(g:, 'NERDTreeWinSize', 31)$/;"	v
g:__gutentags_vim_is_leaving	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
g:airline#extensions#example#number_of_cats	plugged/vim-airline/autoload/airline/extensions/example.vim	/^  let g:airline#extensions#example#number_of_cats = 42$/;"	v
g:airline#extensions#localsearch#inverted	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let g:airline#extensions#localsearch#inverted = get(g:, 'airline#extensions#localsearch#inverted', 0)$/;"	v
g:airline#extensions#localsearch#loaded	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let g:airline#extensions#localsearch#loaded = 001$/;"	v
g:airline#extensions#obsession#indicator_text	plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^  let g:airline#extensions#obsession#indicator_text = '$'$/;"	v
g:airline#extensions#quickfix#location_text	plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^  let g:airline#extensions#quickfix#location_text = 'Location'$/;"	v
g:airline#extensions#quickfix#quickfix_text	plugged/vim-airline/autoload/airline/extensions/quickfix.vim	/^  let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'$/;"	v
g:airline#extensions#rufo#symbol	plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^  let g:airline#extensions#rufo#symbol = 'RuFo'$/;"	v
g:airline#extensions#windowswap#indicator_text	plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^  let g:airline#extensions#windowswap#indicator_text = 'WS'$/;"	v
g:airline#themes#catppuccin#palette	plugged/catppuccin/autoload/airline/themes/catppuccin.vim	/^let g:airline#themes#catppuccin#palette = {}$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^  let g:airline#themes#dark#palette.ctrlp = airline#extensions#ctrlp#generate_color_map($/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette = {}$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.accents = {$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.commandline = airline#themes#generate_color_map(s:airline_a_commandline, s:airline_b_commandline, s:airline_c_commandline)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive = airline#themes#generate_color_map(s:airline_a_inactive, s:airline_b_inactive, s:airline_c_inactive)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.inactive_modified = {$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert = airline#themes#generate_color_map(s:airline_a_insert, s:airline_b_insert, s:airline_c_insert)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_modified = {$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.insert_paste = {$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal = airline#themes#generate_color_map(s:airline_a_normal, s:airline_b_normal, s:airline_c_normal)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.normal_modified = {$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace = copy(g:airline#themes#dark#palette.insert)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace.airline_a = [ s:airline_b_insert[0]   , '#af0000' , s:airline_b_insert[2] , 124     , ''     ]$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.replace_modified = g:airline#themes#dark#palette.insert_modified$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.terminal = airline#themes#generate_color_map(s:airline_a_insert, s:airline_b_insert, s:airline_c_insert)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual = airline#themes#generate_color_map(s:airline_a_visual, s:airline_b_visual, s:airline_c_visual)$/;"	v
g:airline#themes#dark#palette	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let g:airline#themes#dark#palette.visual_modified = {$/;"	v
g:airline_inactive_funcrefs	plugged/vim-airline/autoload/airline.vim	/^let g:airline_inactive_funcrefs = get(g:, 'airline_inactive_statusline_funcrefs', [])$/;"	v
g:airline_statusline_funcrefs	plugged/vim-airline/autoload/airline.vim	/^let g:airline_statusline_funcrefs = get(g:, 'airline_statusline_funcrefs', [])$/;"	v
g:autoloaded_fugitive	plugged/vim-fugitive/autoload/fugitive.vim	/^let g:autoloaded_fugitive = 1$/;"	v
g:clap#themes#catppuccin#palette	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let g:clap#themes#catppuccin#palette = s:p$/;"	v
g:coc_global_extensions	plugged/coc.nvim/autoload/coc.vim	/^let g:coc_global_extensions = get(g:, 'coc_global_extensions', [])$/;"	v
g:coc_highlight_maximum_count	plugged/coc.nvim/autoload/coc/highlight.vim	/^let g:coc_highlight_maximum_count = get(g:, 'coc_highlight_maximum_count', 200)$/;"	v
g:coc_max_treeview_width	plugged/coc.nvim/autoload/coc/window.vim	/^let g:coc_max_treeview_width = get(g:, 'coc_max_treeview_width', 40)$/;"	v
g:coc_selected_text	plugged/coc.nvim/autoload/coc.vim	/^let g:coc_selected_text = ''$/;"	v
g:coc_service_initialized	plugged/coc.nvim/plugin/coc.vim	/^let g:coc_service_initialized = 0$/;"	v
g:coc_user_config	plugged/coc.nvim/autoload/coc.vim	/^let g:coc_user_config = get(g:, 'coc_user_config', {})$/;"	v
g:coc_vim_commands	plugged/coc.nvim/autoload/coc.vim	/^let g:coc_vim_commands = []$/;"	v
g:colors_name	colors/PaperColor.vim	/^let g:colors_name = "PaperColor"$/;"	v
g:colors_name	colors/gruvbox.vim	/^let g:colors_name='gruvbox'$/;"	v
g:ctrlp_ext_vars	plugged/vim-go/autoload/ctrlp/decls.vim	/^  let g:ctrlp_ext_vars = [s:go_decls_var]$/;"	v
g:ctrlp_ext_vars	plugged/vim-go/autoload/ctrlp/decls.vim	/^  let g:ctrlp_ext_vars = add(g:ctrlp_ext_vars, s:go_decls_var)$/;"	v
g:current_compiler	plugged/vim-go/compiler/go.vim	/^let g:current_compiler = "go"$/;"	v
g:cursormode_exit_mode	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^  let g:cursormode_exit_mode='n'$/;"	v
g:did_coc_loaded	plugged/coc.nvim/plugin/coc.vim	/^let g:did_coc_loaded = 1$/;"	v
g:fugitive_summary_format	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:gitgutter_async	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_async                        = get(g:, 'gitgutter_async', 1)$/;"	v
g:gitgutter_close_preview_on_escape	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_close_preview_on_escape      = get(g:, 'gitgutter_close_preview_on_escape', 0)$/;"	v
g:gitgutter_diff_args	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_diff_args                    = get(g:, 'gitgutter_diff_args', '')$/;"	v
g:gitgutter_diff_base	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_diff_base                    = get(g:, 'gitgutter_diff_base', '')$/;"	v
g:gitgutter_diff_relative_to	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_diff_relative_to             = get(g:, 'gitgutter_diff_relative_to', 'index')$/;"	v
g:gitgutter_enabled	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_enabled = get(g:, 'gitgutter_enabled', 1)$/;"	v
g:gitgutter_floating_window_options	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_floating_window_options = get(g:, 'gitgutter_floating_window_options', {$/;"	v
g:gitgutter_git_args	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_git_args                     = get(g:, 'gitgutter_git_args', '')$/;"	v
g:gitgutter_git_executable	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_git_executable = get(g:, 'gitgutter_git_executable', 'git')$/;"	v
g:gitgutter_grep	plugged/vim-gitgutter/plugin/gitgutter.vim	/^      let g:gitgutter_grep .= ' --color=never'$/;"	v
g:gitgutter_grep	plugged/vim-gitgutter/plugin/gitgutter.vim	/^    let g:gitgutter_grep = ''$/;"	v
g:gitgutter_grep	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_grep = get(g:, 'gitgutter_grep', default_grep)$/;"	v
g:gitgutter_highlight_linenrs	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_highlight_linenrs = get(g:, 'gitgutter_highlight_linenrs', 0)$/;"	v
g:gitgutter_highlight_lines	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_highlight_lines   = get(g:, 'gitgutter_highlight_lines', 0)$/;"	v
g:gitgutter_log	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_log                          = get(g:, 'gitgutter_log', 0)$/;"	v
g:gitgutter_map_keys	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_map_keys                     = get(g:, 'gitgutter_map_keys', 1)$/;"	v
g:gitgutter_max_signs	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_max_signs = get(g:, 'gitgutter_max_signs', -1)$/;"	v
g:gitgutter_max_signs	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_max_signs = get(g:, 'gitgutter_max_signs', 500)$/;"	v
g:gitgutter_override_sign_column_highlight	colors/gruvbox.vim	/^  let g:gitgutter_override_sign_column_highlight = 0$/;"	v
g:gitgutter_preview_win_floating	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_preview_win_floating = get(g:, 'gitgutter_preview_win_floating', 1)$/;"	v
g:gitgutter_preview_win_floating	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_preview_win_floating = get(g:, 'gitgutter_preview_win_floating', default)$/;"	v
g:gitgutter_preview_win_location	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_preview_win_location = get(g:, 'gitgutter_preview_win_location', 'bo')$/;"	v
g:gitgutter_set_sign_backgrounds	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_set_sign_backgrounds = get(g:, 'gitgutter_set_sign_backgrounds', 0)$/;"	v
g:gitgutter_show_msg_on_hunk_jumping	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_show_msg_on_hunk_jumping     = get(g:, 'gitgutter_show_msg_on_hunk_jumping', 1)$/;"	v
g:gitgutter_sign_added	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_added           = get(g:, 'gitgutter_sign_added', '+')$/;"	v
g:gitgutter_sign_allow_clobber	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_allow_clobber = 1$/;"	v
g:gitgutter_sign_allow_clobber	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_allow_clobber   = get(g:, 'gitgutter_sign_allow_clobber', 0)$/;"	v
g:gitgutter_sign_modified	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_modified        = get(g:, 'gitgutter_sign_modified', '~')$/;"	v
g:gitgutter_sign_modified_removed	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_modified_removed        = get(g:, 'gitgutter_sign_modified_removed', '~_')$/;"	v
g:gitgutter_sign_priority	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_priority     = get(g:, 'gitgutter_sign_priority', 10)$/;"	v
g:gitgutter_sign_removed	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_removed         = get(g:, 'gitgutter_sign_removed', '_')$/;"	v
g:gitgutter_sign_removed_above_and_below	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_sign_removed_above_and_below = get(g:, 'gitgutter_sign_removed_above_and_below', '_¯')$/;"	v
g:gitgutter_sign_removed_first_line	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_removed_first_line = get(g:, 'gitgutter_sign_removed_first_line', '_^')$/;"	v
g:gitgutter_sign_removed_first_line	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let g:gitgutter_sign_removed_first_line = get(g:, 'gitgutter_sign_removed_first_line', '‾')$/;"	v
g:gitgutter_signs	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_signs             = get(g:, 'gitgutter_signs', 1)$/;"	v
g:gitgutter_terminal_reports_focus	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_terminal_reports_focus       = get(g:, 'gitgutter_terminal_reports_focus', 1)$/;"	v
g:gitgutter_use_location_list	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:gitgutter_use_location_list            = get(g:, 'gitgutter_use_location_list', 0)$/;"	v
g:go_echo_command_info	plugged/vim-go/scripts/runtest.vim	/^  let g:go_echo_command_info = 0$/;"	v
g:go_gopls_options	plugged/vim-go/scripts/runtest.vim	/^  let g:go_gopls_options = []$/;"	v
g:go_gotags_bin	plugged/vim-go/ftplugin/go/tagbar.vim	/^  let g:go_gotags_bin = "gotags"$/;"	v
g:go_jump_to_error	plugged/vim-go/ftplugin/go/mappings.vim	/^  let g:go_jump_to_error = 1$/;"	v
g:go_loaded_gosnippets	plugged/vim-go/ftplugin/go/snippets.vim	/^let g:go_loaded_gosnippets = 1$/;"	v
g:go_loaded_install	plugged/vim-go/plugin/go.vim	/^let g:go_loaded_install = 1$/;"	v
g:godef_command	plugged/vim-godef/plugin/godef.vim	/^    let g:godef_command = "godef"$/;"	v
g:godef_same_file_in_same_window	plugged/vim-godef/plugin/godef.vim	/^    let g:godef_same_file_in_same_window=0$/;"	v
g:godef_split	plugged/vim-godef/plugin/godef.vim	/^    let g:godef_split = 1$/;"	v
g:godef_system_function	plugged/vim-godef/plugin/godef.vim	/^    let g:godef_system_function="system"$/;"	v
g:gruvbox_bold	colors/gruvbox.vim	/^  let g:gruvbox_bold=1$/;"	v
g:gruvbox_contrast_dark	colors/gruvbox.vim	/^  let g:gruvbox_contrast_dark='medium'$/;"	v
g:gruvbox_contrast_light	colors/gruvbox.vim	/^  let g:gruvbox_contrast_light='medium'$/;"	v
g:gruvbox_guisp_fallback	colors/gruvbox.vim	/^  let g:gruvbox_guisp_fallback='NONE'$/;"	v
g:gruvbox_improved_strings	colors/gruvbox.vim	/^  let g:gruvbox_improved_strings=0$/;"	v
g:gruvbox_improved_warnings	colors/gruvbox.vim	/^  let g:gruvbox_improved_warnings=0$/;"	v
g:gruvbox_inverse	colors/gruvbox.vim	/^  let g:gruvbox_inverse=1$/;"	v
g:gruvbox_invert_indent_guides	colors/gruvbox.vim	/^  let g:gruvbox_invert_indent_guides=0$/;"	v
g:gruvbox_italic	colors/gruvbox.vim	/^    let g:gruvbox_italic=0$/;"	v
g:gruvbox_italic	colors/gruvbox.vim	/^    let g:gruvbox_italic=1$/;"	v
g:gruvbox_termcolors	colors/gruvbox.vim	/^  let g:gruvbox_termcolors=256$/;"	v
g:gruvbox_undercurl	colors/gruvbox.vim	/^  let g:gruvbox_undercurl=1$/;"	v
g:gruvbox_underline	colors/gruvbox.vim	/^  let g:gruvbox_underline=1$/;"	v
g:gutentags_add_ctrlp_root_markers	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_auto_add_pycscope	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_auto_add_pycscope = 1$/;"	v
g:gutentags_background_update	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_build_inverted_index	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_build_inverted_index_maps	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^    let g:gutentags_cscope_build_inverted_index_maps = 0$/;"	v
g:gutentags_cscope_executable	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_cscope_executable_maps	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^    let g:gutentags_cscope_executable_maps = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', $/;"	v
g:gutentags_fake	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslckout']$/;"	v
g:gutentags_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_pycscope_executable	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_pycscope_executable = 'pycscope'$/;"	v
g:gutentags_pyscopefile	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_pyscopefile = 'pycscope.out'$/;"	v
g:gutentags_res_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_scopefile_maps	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^    let g:gutentags_scopefile_maps = 'cscope.out'$/;"	v
g:gutentags_script_ext	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:indentLine_color_gui	colors/gruvbox.vim	/^  let g:indentLine_color_gui = s:bg2[0]$/;"	v
g:indentLine_color_term	colors/gruvbox.vim	/^  let g:indentLine_color_term = s:bg2[1]$/;"	v
g:indent_guides_auto_colors	colors/gruvbox.vim	/^  let g:indent_guides_auto_colors = 0$/;"	v
g:indent_guides_auto_colors	colors/jellybeans.vim	/^  let g:indent_guides_auto_colors = 0$/;"	v
g:io_fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^let g:io_fugitive = {$/;"	v
g:kind	plugged/unite.vim/test/source.vim	/^let g:kind = {$/;"	v
g:kind	plugged/unite.vim/test/source.vim	/^let g:kind.action_table.open = {$/;"	v
g:lightline#colorscheme#catppuccin#palette	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let g:lightline#colorscheme#catppuccin#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:loaded_airline	plugged/vim-airline/plugin/airline.vim	/^let g:loaded_airline = 1$/;"	v
g:loaded_cursormode	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let g:loaded_cursormode = 1$/;"	v
g:loaded_fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_gitgutter	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let g:loaded_gitgutter = 1$/;"	v
g:loaded_gutentags	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_nerdtree_autoload	plugged/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	plugged/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_git_status	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let g:loaded_nerdtree_git_status = 1$/;"	v
g:loaded_nerdtree_git_status_autoload	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^let g:loaded_nerdtree_git_status_autoload = 1$/;"	v
g:loaded_nerdtree_git_status_job	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let g:loaded_nerdtree_git_status_job = 1$/;"	v
g:loaded_nerdtree_git_status_listener	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^let g:loaded_nerdtree_git_status_listener = 1$/;"	v
g:loaded_nerdtree_git_status_log	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let g:loaded_nerdtree_git_status_log = 1$/;"	v
g:loaded_nerdtree_git_status_util	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^let g:loaded_nerdtree_git_status_util = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_tagbar	plugged/tagbar/autoload/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:loaded_unite	plugged/unite.vim/plugin/unite.vim	/^let g:loaded_unite = 1$/;"	v
g:loaded_unite_source_bookmark	plugged/unite.vim/plugin/unite/bookmark.vim	/^let g:loaded_unite_source_bookmark = 1$/;"	v
g:loaded_unite_source_buffer	plugged/unite.vim/plugin/unite/buffer.vim	/^let g:loaded_unite_source_buffer = 1$/;"	v
g:loaded_unite_source_window	plugged/unite.vim/plugin/unite/window.vim	/^let g:loaded_unite_source_window = 1$/;"	v
g:loaded_vim_airline_zoomwintab	plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^let g:loaded_vim_airline_zoomwintab = 1$/;"	v
g:main_syntax	plugged/vim-go/syntax/gohtmltmpl.vim	/^  let g:main_syntax = 'html'$/;"	v
g:nerdtree_tabs_autoclose	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_autoclose = 1$/;"	v
g:nerdtree_tabs_autofind	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_autofind = 0$/;"	v
g:nerdtree_tabs_focus_on_files	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_focus_on_files = 0$/;"	v
g:nerdtree_tabs_meaningful_tab_names	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_meaningful_tab_names = 1$/;"	v
g:nerdtree_tabs_no_startup_for_diff	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^    let g:nerdtree_tabs_no_startup_for_diff = 1$/;"	v
g:nerdtree_tabs_open_on_console_startup	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_open_on_console_startup = 0$/;"	v
g:nerdtree_tabs_open_on_gui_startup	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_open_on_gui_startup = 1$/;"	v
g:nerdtree_tabs_open_on_new_tab	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_open_on_new_tab = 1$/;"	v
g:nerdtree_tabs_smart_startup_focus	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_smart_startup_focus = 1$/;"	v
g:nerdtree_tabs_startup_cd	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_startup_cd = 1$/;"	v
g:nerdtree_tabs_synchronize_focus	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_synchronize_focus = 1$/;"	v
g:nerdtree_tabs_synchronize_view	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^  let g:nerdtree_tabs_synchronize_view = 1$/;"	v
g:niji_dark_colours	colors/gruvbox.vim	/^let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	colors/gruvbox.vim	/^let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:rainbow_conf	colors/gruvbox.vim	/^   let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	colors/gruvbox.vim	/^   let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	colors/gruvbox.vim	/^   let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_ctermfgs	colors/gruvbox.vim	/^let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_guifgs	colors/gruvbox.vim	/^let g:rainbow_guifgs = [ '#d65d0e', '#cc241d', '#b16286', '#458588' ]$/;"	v
g:rbpt_colorpairs	colors/gruvbox.vim	/^  let g:rbpt_colorpairs =$/;"	v
g:snips_author	plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_author = "yourname"$/;"	v
g:snips_email	plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_email = "yourname@email.com"$/;"	v
g:snips_github	plugged/vim-snippets/plugin/vimsnippets.vim	/^    let g:snips_github = "https:\/\/github.com\/yourname"$/;"	v
g:source	plugged/unite.vim/test/source.vim	/^let g:source = {$/;"	v
g:taboo_tabline	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  let g:taboo_tabline = 0$/;"	v
g:tagbar#icon_closed	plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_closed = g:tagbar_iconchars[0]$/;"	v
g:tagbar#icon_open	plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_open   = g:tagbar_iconchars[1]$/;"	v
g:tagbar_iconchars	plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['+', '-']$/;"	v
g:tagbar_iconchars	plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['▸', '▾']$/;"	v
g:terminal_ansi_colors	colors/PaperColor.vim	/^    let g:terminal_ansi_colors = [color00[0], color01[0], color02[0], color03[0],$/;"	v
g:terminal_color_0	colors/PaperColor.vim	/^  let g:terminal_color_0  = color00[0]$/;"	v
g:terminal_color_0	colors/gruvbox.vim	/^  let g:terminal_color_0 = s:bg0[0]$/;"	v
g:terminal_color_1	colors/PaperColor.vim	/^  let g:terminal_color_1  = color01[0]$/;"	v
g:terminal_color_1	colors/gruvbox.vim	/^  let g:terminal_color_1 = s:gb.neutral_red[0]$/;"	v
g:terminal_color_10	colors/PaperColor.vim	/^  let g:terminal_color_10 = color10[0]$/;"	v
g:terminal_color_10	colors/gruvbox.vim	/^  let g:terminal_color_10 = s:green[0]$/;"	v
g:terminal_color_11	colors/PaperColor.vim	/^  let g:terminal_color_11 = color11[0]$/;"	v
g:terminal_color_11	colors/gruvbox.vim	/^  let g:terminal_color_11 = s:yellow[0]$/;"	v
g:terminal_color_12	colors/PaperColor.vim	/^  let g:terminal_color_12 = color12[0]$/;"	v
g:terminal_color_12	colors/gruvbox.vim	/^  let g:terminal_color_12 = s:blue[0]$/;"	v
g:terminal_color_13	colors/PaperColor.vim	/^  let g:terminal_color_13 = color13[0]$/;"	v
g:terminal_color_13	colors/gruvbox.vim	/^  let g:terminal_color_13 = s:purple[0]$/;"	v
g:terminal_color_14	colors/PaperColor.vim	/^  let g:terminal_color_14 = color14[0]$/;"	v
g:terminal_color_14	colors/gruvbox.vim	/^  let g:terminal_color_14 = s:aqua[0]$/;"	v
g:terminal_color_15	colors/PaperColor.vim	/^  let g:terminal_color_15 = color15[0]$/;"	v
g:terminal_color_15	colors/gruvbox.vim	/^  let g:terminal_color_15 = s:fg1[0]$/;"	v
g:terminal_color_2	colors/PaperColor.vim	/^  let g:terminal_color_2  = color02[0]$/;"	v
g:terminal_color_2	colors/gruvbox.vim	/^  let g:terminal_color_2 = s:gb.neutral_green[0]$/;"	v
g:terminal_color_3	colors/PaperColor.vim	/^  let g:terminal_color_3  = color03[0]$/;"	v
g:terminal_color_3	colors/gruvbox.vim	/^  let g:terminal_color_3 = s:gb.neutral_yellow[0]$/;"	v
g:terminal_color_4	colors/PaperColor.vim	/^  let g:terminal_color_4  = color04[0]$/;"	v
g:terminal_color_4	colors/gruvbox.vim	/^  let g:terminal_color_4 = s:gb.neutral_blue[0]$/;"	v
g:terminal_color_5	colors/PaperColor.vim	/^  let g:terminal_color_5  = color05[0]$/;"	v
g:terminal_color_5	colors/gruvbox.vim	/^  let g:terminal_color_5 = s:gb.neutral_purple[0]$/;"	v
g:terminal_color_6	colors/PaperColor.vim	/^  let g:terminal_color_6  = color06[0]$/;"	v
g:terminal_color_6	colors/gruvbox.vim	/^  let g:terminal_color_6 = s:gb.neutral_aqua[0]$/;"	v
g:terminal_color_7	colors/PaperColor.vim	/^  let g:terminal_color_7  = color07[0]$/;"	v
g:terminal_color_7	colors/gruvbox.vim	/^  let g:terminal_color_7 = s:fg4[0]$/;"	v
g:terminal_color_8	colors/PaperColor.vim	/^  let g:terminal_color_8  = color08[0]$/;"	v
g:terminal_color_8	colors/gruvbox.vim	/^  let g:terminal_color_8 = s:gray[0]$/;"	v
g:terminal_color_9	colors/PaperColor.vim	/^  let g:terminal_color_9  = color09[0]$/;"	v
g:terminal_color_9	colors/gruvbox.vim	/^  let g:terminal_color_9 = s:red[0]$/;"	v
g:test_verbose	plugged/vim-go/scripts/runtest.vim	/^  let g:test_verbose = 0$/;"	v
g:testname	plugged/vim-gitgutter/test/runner.vim	/^let g:testname = expand('%')$/;"	v
g:unite_enable_auto_select	plugged/unite.vim/autoload/unite/init.vim	/^let g:unite_enable_auto_select =$/;"	v
g:unite_force_overwrite_statusline	plugged/unite.vim/autoload/unite/init.vim	/^let g:unite_force_overwrite_statusline =$/;"	v
g:unite_ignore_source_files	plugged/unite.vim/autoload/unite/init.vim	/^let g:unite_ignore_source_files =$/;"	v
g:unite_kind_file_preview_max_filesize	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^  let g:unite_kind_file_preview_max_filesize = 1000000$/;"	v
g:unite_kind_jump_list_after_jump_scroll	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^  let g:unite_kind_jump_list_after_jump_scroll = 25$/;"	v
g:unite_kind_jump_list_after_jump_scroll	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^  let g:unite_kind_jump_list_after_jump_scroll =$/;"	v
g:unite_quick_match_table	plugged/unite.vim/autoload/unite/init.vim	/^let g:unite_quick_match_table =$/;"	v
g:unite_redraw_hold_candidates	plugged/unite.vim/autoload/unite/init.vim	/^let g:unite_redraw_hold_candidates =$/;"	v
g:unite_restore_alternate_file	plugged/unite.vim/autoload/unite/init.vim	/^let g:unite_restore_alternate_file =$/;"	v
g:unite_source_output_shellcmd_colors	plugged/unite.vim/autoload/unite/sources/output_shellcmd.vim	/^let g:unite_source_output_shellcmd_colors =$/;"	v
g:vim_go_root	plugged/vim-go/scripts/runtest.vim	/^let g:vim_go_root = fnamemodify(getcwd(), ':p')$/;"	v
g:vimshell_escape_colors	colors/gruvbox.vim	/^let g:vimshell_escape_colors = [$/;"	v
g<LeftMouse>	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> g<LeftMouse> <LeftMouse>:GoDef<cr>$/;"	m
gather_candidates	plugged/unite.vim/rplugin/python3/denite/source/unite.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gather_candidates	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gd	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gd	plugged/vim-go/ftplugin/go.vim	/^  nnoremap <buffer> <silent> gd :GoDef<cr>$/;"	m
gen_filter_keys	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:gen_filter_keys(line) abort$/;"	f
generate_id	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:generate_id(bufnr) abort$/;"	f
generate_language_option_variables	colors/PaperColor.vim	/^fun! s:generate_language_option_variables()$/;"	f
generate_theme_option_variables	colors/PaperColor.vim	/^fun! s:generate_theme_option_variables()$/;"	f
generate_wildignore_options	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
get	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:get() abort$/;"	f
getChildren	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildren() dict abort$/;"	f
getChildrenByName	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildrenByName(tagname) dict abort$/;"	f
getClosedParentTline	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getClosedParentTline() abort dict$/;"	f
getDataType	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getDataType() abort dict$/;"	f
getDataType	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getDataType() abort dict$/;"	f
getGitWorkdir	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:getGitWorkdir(ntRoot) abort$/;"	f
getIndicator	plugged/nerdtree-git-plugin/after/syntax/nerdtree.vim	/^function! s:getIndicator(status) abort$/;"	f
getKind	plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:getKind(kind) abort dict$/;"	f
getPrototype	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getPrototype	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getPrototype	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getReceiver	plugged/vim-go/autoload/go/impl.vim	/^function! s:getReceiver()$/;"	f
getStatusKey	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! s:getStatusKey(x, y) abort$/;"	f
getTags	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTags() dict abort$/;"	f
getTagsByName	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTagsByName(tagname) dict abort$/;"	f
get_accented_line	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_accented_line(self, group, contents)$/;"	f
get_action_table	plugged/unite.vim/autoload/unite/action.vim	/^function! s:get_action_table(source_name, kind_name, self_func, is_parents_action, source_table) abort "{{{$/;"	f
get_actions	plugged/unite.vim/autoload/unite/sources/action.vim	/^function! s:get_actions(candidates, sources) abort "{{{$/;"	f
get_airline_themes	plugged/vim-airline/plugin/airline.vim	/^function! s:get_airline_themes(a, l, p)$/;"	f
get_alias_table	plugged/unite.vim/autoload/unite/action.vim	/^function! s:get_alias_table(source_name, kind_name, source_table) abort "{{{$/;"	f
get_array	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:get_array(guifg, guibg, ctermfg, ctermbg, opts) abort$/;"	f
get_background_colors	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_background_colors(group) abort$/;"	f
get_bookmark_name	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:get_bookmark_name(args) abort "{{{$/;"	f
get_borderchars	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:get_borderchars(config) abort$/;"	f
get_borderhighlight	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:get_borderhighlight(config) abort$/;"	f
get_buffer_direction	plugged/unite.vim/autoload/unite/view.vim	/^function! s:get_buffer_direction(context) abort "{{{$/;"	f
get_buffer_list	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! s:get_buffer_list(is_bang, is_question, is_plus, is_minus, is_terminal) abort "{{{$/;"	f
get_bufnr	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^function! s:get_bufnr(candidate) abort "{{{$/;"	f
get_candidate_text	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! s:get_candidate_text(candidate) abort "{{{$/;"	f
get_candidates	plugged/unite.vim/autoload/unite/start.vim	/^function! s:get_candidates(sources, context) abort "{{{$/;"	f
get_candidates_action_table	plugged/unite.vim/autoload/unite/action.vim	/^function! s:get_candidates_action_table(action_name, candidates, sources) abort "{{{$/;"	f
get_color	plugged/coc.nvim/plugin/coc.vim	/^function! s:get_color(item, fallback) abort$/;"	f
get_color_map	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:get_color_map()$/;"	f
get_comment_format	plugged/vim-snippets/pythonx/vimsnippets.py	/^def get_comment_format():$/;"	f
get_context_lines	plugged/unite.vim/autoload/unite/sources/line.vim	/^function! s:get_context_lines(context, direction, start) abort "{{{$/;"	f
get_counts	plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^function! s:get_counts()$/;"	f
get_ctags_executable	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
get_cursorline	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:get_cursorline(topline, lines, scrolloff, width, height) abort$/;"	f
get_default_action	plugged/unite.vim/autoload/unite/action.vim	/^function! s:get_default_action(source_name, kind_name) abort "{{{$/;"	f
get_diagnostics	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:get_diagnostics()$/;"	f
get_filename	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^function! s:get_filename(candidate) abort "{{{$/;"	f
get_files	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:get_files(context, files, level, max_unit, ignore_dir) abort "{{{$/;"	f
get_firstline	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:get_firstline(lnum, total, height) abort$/;"	f
get_flavour	plugged/catppuccin/lua/catppuccin/init.lua	/^local function get_flavour(default)$/;"	f
get_foreground_colors	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_foreground_colors(group) abort$/;"	f
get_foreground_fallback_colors	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_foreground_fallback_colors(type)$/;"	f
get_git_status_output	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:get_git_status_output(workdir) abort$/;"	f
get_git_version	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:get_git_version() abort$/;"	f
get_height	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! s:get_height(lines, width) abort$/;"	f
get_height	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:get_height(winid) abort$/;"	f
get_hit_enter_max_length	plugged/unite.vim/autoload/vital/_unite/Vim/Message.vim	/^function! s:get_hit_enter_max_length() abort$/;"	f
get_hl	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:get_hl(group, what, mode) abort$/;"	f
get_hunks_changes	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_changes() abort$/;"	f
get_hunks_coc	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_coc() abort$/;"	f
get_hunks_empty	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_empty() abort$/;"	f
get_hunks_gitgutter	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_gitgutter() abort$/;"	f
get_hunks_gitsigns	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_gitsigns() abort$/;"	f
get_hunks_signify	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:get_hunks_signify() abort$/;"	f
get_icon	plugged/coc.nvim/autoload/coc/notify.vim	/^function! s:get_icon(kind, bg) abort$/;"	f
get_index	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:get_index(next) abort$/;"	f
get_last_status	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^function! s:get_last_status() abort$/;"	f
get_lines	plugged/unite.vim/autoload/unite/sources/line.vim	/^function! s:get_lines(context, direction, bufnr, start, max) abort "{{{$/;"	f
get_list	plugged/unite.vim/autoload/unite/util.vim	/^function! s:get_list() abort "{{{$/;"	f
get_map_str	plugged/tagbar/autoload/tagbar.vim	/^function! s:get_map_str(map) abort$/;"	f
get_message	plugged/unite.vim/autoload/unite/util.vim	/^function! s:get_message() abort "{{{$/;"	f
get_migemo_pattern	plugged/unite.vim/autoload/unite/filters/matcher_migemo.vim	/^function! s:get_migemo_pattern(input) abort$/;"	f
get_mode	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:get_mode()$/;"	f
get_number	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:get_number(index)$/;"	f
get_option	plugged/vim-snippets/pythonx/javascript_snippets.py	/^def get_option(snip, option, default=None):$/;"	f
get_option_vim	plugged/coc.nvim/autoload/coc/vtext.vim	/^function! s:get_option_vim(align, column, wrap) abort$/;"	f
get_paths	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:get_paths(args, context) abort "{{{$/;"	f
get_prelude	plugged/unite.vim/autoload/unite/util.vim	/^function! s:get_prelude() abort "{{{$/;"	f
get_preview_height	plugged/coc.nvim/autoload/coc/list.vim	/^function! s:get_preview_height(lines, config) abort$/;"	f
get_preview_lines	plugged/coc.nvim/autoload/coc/list.vim	/^function! s:get_preview_lines(lines, config) abort$/;"	f
get_priority	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:get_priority(key, hlGroup, priority) abort$/;"	f
get_process	plugged/unite.vim/autoload/unite/util.vim	/^function! s:get_process() abort "{{{$/;"	f
get_prompt_dimension	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! s:get_prompt_dimension(title, default, opts) abort$/;"	f
get_props	plugged/coc.nvim/autoload/coc/notify.vim	/^function! s:get_props(from, to, percent) abort$/;"	f
get_pum_dimension	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:get_pum_dimension(lines, col, config) abort$/;"	f
get_quick_match_table	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:get_quick_match_table() abort "{{{$/;"	f
get_resume_buffer	plugged/unite.vim/autoload/unite/start.vim	/^function! s:get_resume_buffer(buffer_name) abort "{{{$/;"	f
get_score	plugged/unite.vim/autoload/unite/filters/sorter_selecta.py	/^def get_score(string, query_chars):$/;"	f
get_section	plugged/vim-airline/autoload/airline/extensions/default.vim	/^function! s:get_section(winnr, key, ...)$/;"	f
get_separator	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_separator(self, prev_group, group, side)$/;"	f
get_separator_change	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:get_separator_change(new_group, old_group, end_group, sep_size, alt_sep_size)$/;"	f
get_separator_change_with_end	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:get_separator_change_with_end(new_group, old_group, new_end_group, old_end_group, sep_size, alt_sep_size)$/;"	f
get_source_candidates	plugged/unite.vim/autoload/unite/candidates.vim	/^function! s:get_source_candidates(source) abort "{{{$/;"	f
get_string	plugged/unite.vim/autoload/unite/util.vim	/^function! s:get_string() abort "{{{$/;"	f
get_syn	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:get_syn(group, what, mode) abort$/;"	f
get_system	plugged/unite.vim/autoload/unite/util.vim	/^function! s:get_system() abort "{{{$/;"	f
get_topline	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:get_topline(topline, lines, forward, height, width) abort$/;"	f
get_topline	plugged/coc.nvim/autoload/coc/list.vim	/^function! s:get_topline(config, lnum, winheight) abort$/;"	f
get_topline	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:get_topline(winid) abort$/;"	f
get_transitioned_separator	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:get_transitioned_separator(self, prev_group, group, side)$/;"	f
get_tree_winid	plugged/coc.nvim/autoload/coc/ui.vim	/^function! s:get_tree_winid(opts) abort$/;"	f
get_unite_buffer	plugged/unite.vim/autoload/unite/start.vim	/^function! s:get_unite_buffer(buffer_name) abort "{{{$/;"	f
get_visual_content	plugged/vim-go/autoload/go/play.vim	/^function! s:get_visual_content() abort$/;"	f
get_visual_selection	plugged/vim-go/autoload/go/play.vim	/^function! s:get_visual_selection() abort$/;"	f
get_windows	plugged/unite.vim/autoload/unite/sources/window.vim	/^function! s:get_windows(no_current, tabnr) abort "{{{$/;"	f
get_wordcount	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^  function! s:get_wordcount(visual_mode_active)$/;"	f
getchar	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:getchar(...) abort$/;"	f
getchar_safe	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:getchar_safe(...) abort$/;"	f
getfilename	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^function! s:getfilename(cache_dir, filename) abort$/;"	f
getinfo	plugged/vim-go/autoload/go/complete_test.vim	/^func! s:getinfo()$/;"	f
getinfo	plugged/vim-go/autoload/go/lsp_test.vim	/^function! s:getinfo(str, name)$/;"	f
gettime	plugged/tagbar/autoload/tagbar/debug.vim	/^    function! s:gettime() abort$/;"	f
gg	plugged/vim-gitgutter/test/test_gitgutter.vim	/^  normal gg$/;"	m
gi	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
git_diff	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff(...)$/;"	f
git_diff_staged	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:git_diff_staged(...)$/;"	f
git_dir	autoload/plug.vim	/^function! s:git_dir(dir) abort$/;"	f
git_local_branch	autoload/plug.vim	/^function! s:git_local_branch(dir) abort$/;"	f
git_origin_branch	autoload/plug.vim	/^function! s:git_origin_branch(spec)$/;"	f
git_origin_url	autoload/plug.vim	/^function! s:git_origin_url(dir) abort$/;"	f
git_revision	autoload/plug.vim	/^function! s:git_revision(dir) abort$/;"	f
git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
git_version	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:git_version()$/;"	f
git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
gitgutter	plugged/vim-gitgutter/plugin/gitgutter.vim	/^augroup gitgutter$/;"	a
gitgutter#all	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#all(force) abort$/;"	f
gitgutter#async#available	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#available()$/;"	f
gitgutter#async#execute	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! gitgutter#async#execute(cmd, bufnr, handler) abort$/;"	f
gitgutter#buffer_disable	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_disable(...) abort$/;"	f
gitgutter#buffer_enable	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_enable(...) abort$/;"	f
gitgutter#buffer_toggle	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#buffer_toggle(...) abort$/;"	f
gitgutter#debug#debug	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#debug()$/;"	f
gitgutter#debug#log	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! gitgutter#debug#log(message, ...) abort$/;"	f
gitgutter#diff#handler	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#handler(bufnr, diff) abort$/;"	f
gitgutter#diff#hunk_diff	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#hunk_diff(bufnr, full_diff, ...)$/;"	f
gitgutter#diff#parse_diff	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_diff(diff) abort$/;"	f
gitgutter#diff#parse_hunk	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#parse_hunk(line) abort$/;"	f
gitgutter#diff#process_hunks	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#process_hunks(bufnr, hunks) abort$/;"	f
gitgutter#diff#run_diff	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! gitgutter#diff#run_diff(bufnr, from, preserve_full_diff) abort$/;"	f
gitgutter#diff_highlight#process	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! gitgutter#diff_highlight#process(hunk_body)$/;"	f
gitgutter#difforig	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#difforig()$/;"	f
gitgutter#disable	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#disable() abort$/;"	f
gitgutter#enable	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#enable() abort$/;"	f
gitgutter#fold#disable	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#disable()$/;"	f
gitgutter#fold#enable	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#enable()$/;"	f
gitgutter#fold#foldtext	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#foldtext()$/;"	f
gitgutter#fold#is_changed	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#is_changed()$/;"	f
gitgutter#fold#level	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#level(lnum)$/;"	f
gitgutter#fold#toggle	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! gitgutter#fold#toggle()$/;"	f
gitgutter#git	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#git()$/;"	f
gitgutter#highlight#define_highlights	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_highlights() abort$/;"	f
gitgutter#highlight#define_sign_text_highlights	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_sign_text_highlights() abort$/;"	f
gitgutter#highlight#define_signs	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#define_signs() abort$/;"	f
gitgutter#highlight#line_disable	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_disable() abort$/;"	f
gitgutter#highlight#line_enable	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_enable() abort$/;"	f
gitgutter#highlight#line_toggle	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#line_toggle() abort$/;"	f
gitgutter#highlight#linenr_disable	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_disable() abort$/;"	f
gitgutter#highlight#linenr_enable	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_enable() abort$/;"	f
gitgutter#highlight#linenr_toggle	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! gitgutter#highlight#linenr_toggle() abort$/;"	f
gitgutter#hunk#close_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#close_hunk_preview_window()$/;"	f
gitgutter#hunk#cursor_in_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#cursor_in_hunk(hunk) abort$/;"	f
gitgutter#hunk#hunks	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#hunks(bufnr) abort$/;"	f
gitgutter#hunk#in_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#in_hunk(lnum)$/;"	f
gitgutter#hunk#increment_lines_added	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_added(bufnr, count) abort$/;"	f
gitgutter#hunk#increment_lines_modified	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_modified(bufnr, count) abort$/;"	f
gitgutter#hunk#increment_lines_removed	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#increment_lines_removed(bufnr, count) abort$/;"	f
gitgutter#hunk#is_preview_window_open	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function gitgutter#hunk#is_preview_window_open()$/;"	f
gitgutter#hunk#next_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#next_hunk(count) abort$/;"	f
gitgutter#hunk#prev_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#prev_hunk(count) abort$/;"	f
gitgutter#hunk#preview	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#preview() abort$/;"	f
gitgutter#hunk#reset	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#reset(bufnr) abort$/;"	f
gitgutter#hunk#set_hunks	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#set_hunks(bufnr, hunks) abort$/;"	f
gitgutter#hunk#stage	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#stage(...) abort$/;"	f
gitgutter#hunk#summary	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#summary(bufnr) abort$/;"	f
gitgutter#hunk#text_object	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#text_object(inner) abort$/;"	f
gitgutter#hunk#undo	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! gitgutter#hunk#undo() abort$/;"	f
gitgutter#process_buffer	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#process_buffer(bufnr, force) abort$/;"	f
gitgutter#quickfix	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#quickfix(current_file)$/;"	f
gitgutter#setup_maps	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#setup_maps()$/;"	f
gitgutter#sign#clear_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#clear_signs(bufnr) abort$/;"	f
gitgutter#sign#disable	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#disable() abort$/;"	f
gitgutter#sign#enable	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#enable() abort$/;"	f
gitgutter#sign#reset	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#reset()$/;"	f
gitgutter#sign#toggle	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#toggle() abort$/;"	f
gitgutter#sign#update_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! gitgutter#sign#update_signs(bufnr, modified_lines) abort$/;"	f
gitgutter#toggle	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! gitgutter#toggle() abort$/;"	f
gitgutter#utility#base_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#base_path(bufnr)$/;"	f
gitgutter#utility#cd_cmd	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#cd_cmd(bufnr, cmd) abort$/;"	f
gitgutter#utility#clean_smudge_filter_applies	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#clean_smudge_filter_applies(bufnr)$/;"	f
gitgutter#utility#extension	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#extension(bufnr) abort$/;"	f
gitgutter#utility#file	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#file(bufnr)$/;"	f
gitgutter#utility#filename	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#filename(bufnr) abort$/;"	f
gitgutter#utility#get_diff_base	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#get_diff_base(bufnr)$/;"	f
gitgutter#utility#getbufvar	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#getbufvar(buffer, varname, ...)$/;"	f
gitgutter#utility#git_supports_command_line_config_override	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#git_supports_command_line_config_override() abort$/;"	f
gitgutter#utility#has_repo_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#has_repo_path(bufnr)$/;"	f
gitgutter#utility#is_active	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#is_active(bufnr) abort$/;"	f
gitgutter#utility#repo_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#repo_path(bufnr, shellesc) abort$/;"	f
gitgutter#utility#set_repo_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#set_repo_path(bufnr, continuation) abort$/;"	f
gitgutter#utility#setbufvar	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#setbufvar(buffer, varname, val)$/;"	f
gitgutter#utility#shellescape	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#shellescape(arg) abort$/;"	f
gitgutter#utility#supports_overscore_sign	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#supports_overscore_sign()$/;"	f
gitgutter#utility#system	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#system(cmd, ...) abort$/;"	f
gitgutter#utility#warn	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn(message) abort$/;"	f
gitgutter#utility#warn_once	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#warn_once(bufnr, message, key) abort$/;"	f
gitgutter#utility#windows	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! gitgutter#utility#windows()$/;"	f
gitstatus#doctor#Say	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! gitstatus#doctor#Say() abort$/;"	f
gitstatus#getIndicator	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^function! gitstatus#getIndicator(status) abort$/;"	f
gitstatus#isWin	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^function! gitstatus#isWin() abort$/;"	f
gitstatus#job#Spawn	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! gitstatus#job#Spawn(name, cmd, opts) abort$/;"	f
gitstatus#listener#New	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^function! gitstatus#listener#New(opts) abort$/;"	f
gitstatus#log#NewLogger	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^function! gitstatus#log#NewLogger(level) abort$/;"	f
gitstatus#shouldConceal	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^function! gitstatus#shouldConceal() abort$/;"	f
gitstatus#util#BuildGitStatusCommand	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#BuildGitStatusCommand(root, opts) abort$/;"	f
gitstatus#util#BuildGitWorkdirCommand	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#BuildGitWorkdirCommand(root, opts) abort$/;"	f
gitstatus#util#FormatPath	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^        function! gitstatus#util#FormatPath(path) abort$/;"	f
gitstatus#util#FormatPath	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^    function! gitstatus#util#FormatPath(path) abort$/;"	f
gitstatus#util#ParseGitStatusLine	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#ParseGitStatusLine(statusLine, opts) abort$/;"	f
gitstatus#util#ParseGitStatusLines	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#ParseGitStatusLines(root, statusLines, opts) abort$/;"	f
gitstatus#util#UpdateParentDirsStatus	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^function! gitstatus#util#UpdateParentDirsStatus(cache, root, pathStr, statusKey, opts) abort$/;"	f
glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
glob	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^  function! s:glob(expr) abort$/;"	f
glob2_pattern	plugged/unite.vim/autoload/unite/filters.vim	/^function! s:glob2_pattern(glob, is_lua) abort "{{{$/;"	f
glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
globpath	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^  function! s:globpath(path, expr) abort$/;"	f
go#alternate#Switch	plugged/vim-go/autoload/go/alternate.vim	/^function! go#alternate#Switch(bang, cmd) abort$/;"	f
go#asmfmt#Format	plugged/vim-go/autoload/go/asmfmt.vim	/^function! go#asmfmt#Format() abort$/;"	f
go#asmfmt#ToggleAsmFmtAutoSave	plugged/vim-go/autoload/go/asmfmt.vim	/^function! go#asmfmt#ToggleAsmFmtAutoSave() abort$/;"	f
go#auto#asmfmt_autosave	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#asmfmt_autosave()$/;"	f
go#auto#complete_done	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#complete_done()$/;"	f
go#auto#fmt_autosave	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#fmt_autosave()$/;"	f
go#auto#metalinter_autosave	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#metalinter_autosave()$/;"	f
go#auto#modfmt_autosave	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#modfmt_autosave()$/;"	f
go#auto#template_autocreate	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#template_autocreate()$/;"	f
go#auto#update_autocmd	plugged/vim-go/autoload/go/auto.vim	/^function! go#auto#update_autocmd()$/;"	f
go#calls#Callers	plugged/vim-go/autoload/go/calls.vim	/^function! go#calls#Callers() abort$/;"	f
go#cmd#Build	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#Build(bang, ...) abort$/;"	f
go#cmd#BuildTags	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#BuildTags(bang, ...) abort$/;"	f
go#cmd#Generate	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#Generate(bang, ...) abort$/;"	f
go#cmd#Install	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#Install(bang, ...) abort$/;"	f
go#cmd#Run	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#Run(bang, ...) abort$/;"	f
go#cmd#RunTerm	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#RunTerm(bang, mode, files) abort$/;"	f
go#cmd#autowrite	plugged/vim-go/autoload/go/cmd.vim	/^function! go#cmd#autowrite() abort$/;"	f
go#complete#Complete	plugged/vim-go/autoload/go/complete.vim	/^function! go#complete#Complete(findstart, base) abort$/;"	f
go#complete#GetInfo	plugged/vim-go/autoload/go/complete.vim	/^function! go#complete#GetInfo() abort$/;"	f
go#complete#ToggleAutoTypeInfo	plugged/vim-go/autoload/go/complete.vim	/^function! go#complete#ToggleAutoTypeInfo() abort$/;"	f
go#config#AddtagsSkipUnexported	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AddtagsSkipUnexported() abort$/;"	f
go#config#AddtagsTransform	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AddtagsTransform() abort$/;"	f
go#config#AlternateMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AlternateMode() abort$/;"	f
go#config#AsmfmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AsmfmtAutosave() abort$/;"	f
go#config#AutoSameids	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AutoSameids() abort$/;"	f
go#config#AutoTypeInfo	plugged/vim-go/autoload/go/config.vim	/^function! go#config#AutoTypeInfo() abort$/;"	f
go#config#BinPath	plugged/vim-go/autoload/go/config.vim	/^function! go#config#BinPath() abort$/;"	f
go#config#BuildTags	plugged/vim-go/autoload/go/config.vim	/^function! go#config#BuildTags() abort$/;"	f
go#config#CodeCompletionEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#CodeCompletionEnabled() abort$/;"	f
go#config#CodeCompletionIcase	plugged/vim-go/autoload/go/config.vim	/^function! go#config#CodeCompletionIcase() abort$/;"	f
go#config#Debug	plugged/vim-go/autoload/go/config.vim	/^function! go#config#Debug() abort$/;"	f
go#config#DebugAddress	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugAddress() abort$/;"	f
go#config#DebugBreakpointSignText	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugBreakpointSignText() abort$/;"	f
go#config#DebugCommands	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugCommands() abort$/;"	f
go#config#DebugLogOutput	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugLogOutput() abort$/;"	f
go#config#DebugMappings	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugMappings() abort$/;"	f
go#config#DebugPreserveLayout	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugPreserveLayout() abort$/;"	f
go#config#DebugSubstitutePaths	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugSubstitutePaths() abort$/;"	f
go#config#DebugWindows	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DebugWindows() abort$/;"	f
go#config#DeclsIncludes	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DeclsIncludes() abort$/;"	f
go#config#DeclsMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DeclsMode() abort$/;"	f
go#config#DefMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DefMode() abort$/;"	f
go#config#DefReuseBuffer	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DefReuseBuffer() abort$/;"	f
go#config#DiagnosticsEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DiagnosticsEnabled() abort$/;"	f
go#config#DiagnosticsLevel	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DiagnosticsLevel() abort$/;"	f
go#config#DocBalloon	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DocBalloon() abort$/;"	f
go#config#DocMaxHeight	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DocMaxHeight() abort$/;"	f
go#config#DocPopupWindow	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DocPopupWindow() abort$/;"	f
go#config#DocUrl	plugged/vim-go/autoload/go/config.vim	/^function! go#config#DocUrl() abort$/;"	f
go#config#EchoCommandInfo	plugged/vim-go/autoload/go/config.vim	/^function! go#config#EchoCommandInfo() abort$/;"	f
go#config#EchoGoInfo	plugged/vim-go/autoload/go/config.vim	/^function! go#config#EchoGoInfo() abort$/;"	f
go#config#ErrcheckBin	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ErrcheckBin() abort$/;"	f
go#config#FillStructMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FillStructMode() abort$/;"	f
go#config#FmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtAutosave() abort$/;"	f
go#config#FmtCommand	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtCommand() abort$/;"	f
go#config#FmtExperimental	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtExperimental() abort$/;"	f
go#config#FmtFailSilently	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtFailSilently() abort$/;"	f
go#config#FmtOptions	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FmtOptions() abort$/;"	f
go#config#FoldEnable	plugged/vim-go/autoload/go/config.vim	/^function! go#config#FoldEnable(...) abort$/;"	f
go#config#GolintBin	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GolintBin() abort$/;"	f
go#config#GoplsAnalyses	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsAnalyses() abort$/;"	f
go#config#GoplsCompleteUnimported	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsCompleteUnimported() abort$/;"	f
go#config#GoplsDeepCompletion	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsDeepCompletion() abort$/;"	f
go#config#GoplsEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsEnabled() abort$/;"	f
go#config#GoplsGofumpt	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsGofumpt() abort$/;"	f
go#config#GoplsLocal	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsLocal() abort$/;"	f
go#config#GoplsMatcher	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsMatcher() abort$/;"	f
go#config#GoplsOptions	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsOptions() abort$/;"	f
go#config#GoplsSettings	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsSettings() abort$/;"	f
go#config#GoplsStaticCheck	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsStaticCheck() abort$/;"	f
go#config#GoplsTempModfile	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsTempModfile() abort$/;"	f
go#config#GoplsUsePlaceholders	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GoplsUsePlaceholders() abort$/;"	f
go#config#GorenameBin	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GorenameBin() abort$/;"	f
go#config#GorenamePrefill	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GorenamePrefill() abort$/;"	f
go#config#GuruScope	plugged/vim-go/autoload/go/config.vim	/^function! go#config#GuruScope() abort$/;"	f
go#config#HighlightArrayWhitespaceError	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightArrayWhitespaceError() abort$/;"	f
go#config#HighlightBuildConstraints	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightBuildConstraints() abort$/;"	f
go#config#HighlightChanWhitespaceError	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightChanWhitespaceError() abort$/;"	f
go#config#HighlightDebug	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightDebug() abort$/;"	f
go#config#HighlightDiagnosticErrors	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightDiagnosticErrors() abort$/;"	f
go#config#HighlightDiagnosticWarnings	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightDiagnosticWarnings() abort$/;"	f
go#config#HighlightExtraTypes	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightExtraTypes() abort$/;"	f
go#config#HighlightFields	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFields() abort$/;"	f
go#config#HighlightFormatStrings	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFormatStrings() abort$/;"	f
go#config#HighlightFunctionCalls	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFunctionCalls() abort$/;"	f
go#config#HighlightFunctionParameters	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFunctionParameters() abort$/;"	f
go#config#HighlightFunctions	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightFunctions() abort$/;"	f
go#config#HighlightGenerateTags	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightGenerateTags() abort$/;"	f
go#config#HighlightOperators	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightOperators() abort$/;"	f
go#config#HighlightSpaceTabError	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightSpaceTabError() abort$/;"	f
go#config#HighlightStringSpellcheck	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightStringSpellcheck() abort$/;"	f
go#config#HighlightTrailingWhitespaceError	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightTrailingWhitespaceError() abort$/;"	f
go#config#HighlightTypes	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightTypes() abort$/;"	f
go#config#HighlightVariableAssignments	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightVariableAssignments() abort$/;"	f
go#config#HighlightVariableDeclarations	plugged/vim-go/autoload/go/config.vim	/^function! go#config#HighlightVariableDeclarations() abort$/;"	f
go#config#ImplementsMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ImplementsMode() abort$/;"	f
go#config#ImportsAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ImportsAutosave() abort$/;"	f
go#config#ImportsMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ImportsMode() abort$/;"	f
go#config#InfoMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#InfoMode() abort$/;"	f
go#config#ListAutoclose	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ListAutoclose() abort$/;"	f
go#config#ListHeight	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ListHeight() abort$/;"	f
go#config#ListType	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ListType() abort$/;"	f
go#config#ListTypeCommands	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ListTypeCommands() abort$/;"	f
go#config#LspLog	plugged/vim-go/autoload/go/config.vim	/^function! go#config#LspLog() abort$/;"	f
go#config#MetalinterAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterAutosave() abort$/;"	f
go#config#MetalinterAutosaveEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterAutosaveEnabled() abort$/;"	f
go#config#MetalinterCommand	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterCommand() abort$/;"	f
go#config#MetalinterDeadline	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterDeadline() abort$/;"	f
go#config#MetalinterEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#MetalinterEnabled() abort$/;"	f
go#config#ModFmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ModFmtAutosave() abort$/;"	f
go#config#PlayBrowserCommand	plugged/vim-go/autoload/go/config.vim	/^function! go#config#PlayBrowserCommand() abort$/;"	f
go#config#PlayOpenBrowser	plugged/vim-go/autoload/go/config.vim	/^function! go#config#PlayOpenBrowser() abort$/;"	f
go#config#ReferrersMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#ReferrersMode() abort$/;"	f
go#config#RenameCommand	plugged/vim-go/autoload/go/config.vim	/^function! go#config#RenameCommand() abort$/;"	f
go#config#SearchBinPathFirst	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SearchBinPathFirst() abort$/;"	f
go#config#SetAsmfmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetAsmfmtAutosave(value) abort$/;"	f
go#config#SetAutoSameids	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetAutoSameids(value) abort$/;"	f
go#config#SetAutoTypeInfo	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetAutoTypeInfo(value) abort$/;"	f
go#config#SetBuildTags	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetBuildTags(value) abort$/;"	f
go#config#SetDebugDiag	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetDebugDiag(value) abort$/;"	f
go#config#SetFmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetFmtAutosave(value) abort$/;"	f
go#config#SetGuruScope	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetGuruScope(scope) abort$/;"	f
go#config#SetMetalinterAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetMetalinterAutosave(value) abort$/;"	f
go#config#SetModFmtAutosave	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetModFmtAutosave(value) abort$/;"	f
go#config#SetTemplateAutocreate	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetTemplateAutocreate(value) abort$/;"	f
go#config#SetTermCloseOnExit	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetTermCloseOnExit(value) abort$/;"	f
go#config#SetTermEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SetTermEnabled(value) abort$/;"	f
go#config#SnippetEngine	plugged/vim-go/autoload/go/config.vim	/^function! go#config#SnippetEngine() abort$/;"	f
go#config#StatuslineDuration	plugged/vim-go/autoload/go/config.vim	/^function! go#config#StatuslineDuration() abort$/;"	f
go#config#TemplateAutocreate	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TemplateAutocreate() abort$/;"	f
go#config#TemplateFile	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TemplateFile() abort$/;"	f
go#config#TemplateTestFile	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TemplateTestFile() abort$/;"	f
go#config#TemplateUsePkg	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TemplateUsePkg() abort$/;"	f
go#config#TermCloseOnExit	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermCloseOnExit() abort$/;"	f
go#config#TermEnabled	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermEnabled() abort$/;"	f
go#config#TermHeight	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermHeight() abort$/;"	f
go#config#TermMode	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermMode() abort$/;"	f
go#config#TermReuse	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermReuse() abort$/;"	f
go#config#TermWidth	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TermWidth() abort$/;"	f
go#config#TestShowName	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TestShowName() abort$/;"	f
go#config#TestTimeout	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TestTimeout() abort$/;"	f
go#config#TextobjIncludeFunctionDoc	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TextobjIncludeFunctionDoc() abort$/;"	f
go#config#TextobjIncludeVariable	plugged/vim-go/autoload/go/config.vim	/^function! go#config#TextobjIncludeVariable() abort$/;"	f
go#config#Updatetime	plugged/vim-go/autoload/go/config.vim	/^function! go#config#Updatetime() abort$/;"	f
go#config#VersionWarning	plugged/vim-go/autoload/go/config.vim	/^function! go#config#VersionWarning() abort$/;"	f
go#coverage#Browser	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#Browser(bang, ...) abort$/;"	f
go#coverage#Buffer	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#Buffer(bang, ...) abort$/;"	f
go#coverage#BufferToggle	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#BufferToggle(bang, ...) abort$/;"	f
go#coverage#Clear	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#Clear() abort$/;"	f
go#coverage#genmatch	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#genmatch(cov) abort$/;"	f
go#coverage#overlay	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#overlay(file) abort$/;"	f
go#coverage#parsegocoverline	plugged/vim-go/autoload/go/coverage.vim	/^function! go#coverage#parsegocoverline(line) abort$/;"	f
go#debug#BalloonExpr	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#BalloonExpr() abort$/;"	f
go#debug#Breakpoint	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Breakpoint(...) abort$/;"	f
go#debug#Goroutine	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Goroutine() abort$/;"	f
go#debug#Print	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Print(arg) abort$/;"	f
go#debug#Restart	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Restart() abort$/;"	f
go#debug#Set	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Set(symbol, value) abort$/;"	f
go#debug#Stack	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Stack(name) abort$/;"	f
go#debug#Start	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Start(mode, ...) abort$/;"	f
go#debug#Stop	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#Stop() abort$/;"	f
go#debug#TestFunc	plugged/vim-go/autoload/go/debug.vim	/^function! go#debug#TestFunc(...) abort$/;"	f
go#decls#Decls	plugged/vim-go/autoload/go/decls.vim	/^function! go#decls#Decls(mode, ...) abort$/;"	f
go#def#Jump	plugged/vim-go/autoload/go/def.vim	/^function! go#def#Jump(mode, type) abort$/;"	f
go#def#SelectStackEntry	plugged/vim-go/autoload/go/def.vim	/^function! go#def#SelectStackEntry() abort$/;"	f
go#def#Stack	plugged/vim-go/autoload/go/def.vim	/^function! go#def#Stack(...) abort$/;"	f
go#def#StackClear	plugged/vim-go/autoload/go/def.vim	/^function! go#def#StackClear(...) abort$/;"	f
go#def#StackPop	plugged/vim-go/autoload/go/def.vim	/^function! go#def#StackPop(...) abort$/;"	f
go#def#StackUI	plugged/vim-go/autoload/go/def.vim	/^function! go#def#StackUI() abort$/;"	f
go#def#jump_to_declaration	plugged/vim-go/autoload/go/def.vim	/^function! go#def#jump_to_declaration(out, mode, bin_name) abort$/;"	f
go#doc#Open	plugged/vim-go/autoload/go/doc.vim	/^function! go#doc#Open(newmode, mode, ...) abort$/;"	f
go#doc#OpenBrowser	plugged/vim-go/autoload/go/doc.vim	/^function! go#doc#OpenBrowser(...) abort$/;"	f
go#fillstruct#FillStruct	plugged/vim-go/autoload/go/fillstruct.vim	/^function! go#fillstruct#FillStruct() abort$/;"	f
go#fmt#CleanErrors	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#CleanErrors() abort$/;"	f
go#fmt#Format	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#Format(withGoimport) abort$/;"	f
go#fmt#ShowErrors	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#ShowErrors(errors) abort$/;"	f
go#fmt#ToggleFmtAutoSave	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#ToggleFmtAutoSave() abort$/;"	f
go#fmt#run	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#run(bin_name, source, target)$/;"	f
go#fmt#update_file	plugged/vim-go/autoload/go/fmt.vim	/^function! go#fmt#update_file(source, target)$/;"	f
go#guru#Callees	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Callees(selected) abort$/;"	f
go#guru#Callstack	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Callstack(selected) abort$/;"	f
go#guru#ChannelPeers	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#ChannelPeers(selected) abort$/;"	f
go#guru#Describe	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Describe(selected) abort$/;"	f
go#guru#DescribeInfo	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#DescribeInfo(showstatus) abort$/;"	f
go#guru#Freevars	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Freevars(selected) abort$/;"	f
go#guru#Implements	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Implements(selected) abort$/;"	f
go#guru#PointsTo	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#PointsTo(selected) abort$/;"	f
go#guru#Referrers	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Referrers(selected) abort$/;"	f
go#guru#Scope	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Scope(...) abort$/;"	f
go#guru#Whicherrs	plugged/vim-go/autoload/go/guru.vim	/^function! go#guru#Whicherrs(selected) abort$/;"	f
go#iferr#Generate	plugged/vim-go/autoload/go/iferr.vim	/^function! go#iferr#Generate()$/;"	f
go#impl#Complete	plugged/vim-go/autoload/go/impl.vim	/^function! go#impl#Complete(arglead, cmdline, cursorpos) abort$/;"	f
go#impl#Impl	plugged/vim-go/autoload/go/impl.vim	/^function! go#impl#Impl(...) abort$/;"	f
go#implements#Implements	plugged/vim-go/autoload/go/implements.vim	/^function! go#implements#Implements(selected) abort$/;"	f
go#import#SwitchImport	plugged/vim-go/autoload/go/import.vim	/^function! go#import#SwitchImport(enabled, localname, path, bang) abort$/;"	f
go#issue#New	plugged/vim-go/autoload/go/issue.vim	/^function! go#issue#New() abort$/;"	f
go#job#Options	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Options(args)$/;"	f
go#job#Spawn	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Spawn(cmd, args)$/;"	f
go#job#Start	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Start(cmd, options)$/;"	f
go#job#Stop	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Stop(job) abort$/;"	f
go#job#Wait	plugged/vim-go/autoload/go/job.vim	/^function! go#job#Wait(job) abort$/;"	f
go#keyify#Keyify	plugged/vim-go/autoload/go/keyify.vim	/^function! go#keyify#Keyify()$/;"	f
go#lint#Diagnostics	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Diagnostics(bang, ...) abort$/;"	f
go#lint#Errcheck	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Errcheck(bang, ...) abort$/;"	f
go#lint#Golint	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Golint(bang, ...) abort$/;"	f
go#lint#Gometa	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Gometa(bang, autosave, ...) abort$/;"	f
go#lint#ToggleMetaLinterAutoSave	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#ToggleMetaLinterAutoSave() abort$/;"	f
go#lint#Vet	plugged/vim-go/autoload/go/lint.vim	/^function! go#lint#Vet(bang, ...) abort$/;"	f
go#list#Clean	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Clean(listtype) abort$/;"	f
go#list#Close	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Close(listtype) abort$/;"	f
go#list#Get	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Get(listtype) abort$/;"	f
go#list#JumpToFirst	plugged/vim-go/autoload/go/list.vim	/^function! go#list#JumpToFirst(listtype) abort$/;"	f
go#list#Parse	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Parse(listtype, items, title, add) abort$/;"	f
go#list#ParseFormat	plugged/vim-go/autoload/go/list.vim	/^function! go#list#ParseFormat(listtype, errformat, items, title, add) abort$/;"	f
go#list#Populate	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Populate(listtype, items, title) abort$/;"	f
go#list#Type	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Type(for) abort$/;"	f
go#list#Window	plugged/vim-go/autoload/go/list.vim	/^function! go#list#Window(listtype, ...) abort$/;"	f
go#lsp#AddWorkspaceDirectory	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#AddWorkspaceDirectory(...) abort$/;"	f
go#lsp#AnalyzeFile	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#AnalyzeFile(fname) abort$/;"	f
go#lsp#Callers	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Callers(fname, line, col, handler) abort$/;"	f
go#lsp#CleanWorkspaces	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#CleanWorkspaces() abort$/;"	f
go#lsp#ClearDiagnosticHighlights	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#ClearDiagnosticHighlights() abort$/;"	f
go#lsp#Completion	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Completion(fname, line, col, handler) abort$/;"	f
go#lsp#DebugBrowser	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DebugBrowser() abort$/;"	f
go#lsp#Definition	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Definition(fname, line, col, handler) abort$/;"	f
go#lsp#Diagnostics	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Diagnostics(...) abort$/;"	f
go#lsp#DidChange	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DidChange(fname) abort$/;"	f
go#lsp#DidClose	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DidClose(fname) abort$/;"	f
go#lsp#DidOpen	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DidOpen(fname) abort$/;"	f
go#lsp#Doc	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Doc() abort$/;"	f
go#lsp#DocLink	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#DocLink() abort$/;"	f
go#lsp#Exit	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Exit() abort$/;"	f
go#lsp#FillStruct	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#FillStruct() abort$/;"	f
go#lsp#Format	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Format() abort$/;"	f
go#lsp#GetInfo	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#GetInfo()$/;"	f
go#lsp#Hover	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Hover(fname, line, col, handler) abort$/;"	f
go#lsp#Implements	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Implements(fname, line, col, handler) abort$/;"	f
go#lsp#Imports	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Imports() abort$/;"	f
go#lsp#Info	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Info(showstatus)$/;"	f
go#lsp#ModReload	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#ModReload(...) abort$/;"	f
go#lsp#Referrers	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Referrers(fname, line, col, handler) abort$/;"	f
go#lsp#Rename	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Rename(newName) abort$/;"	f
go#lsp#ResetWorkspaceDirectories	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#ResetWorkspaceDirectories() abort$/;"	f
go#lsp#Restart	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#Restart() abort$/;"	f
go#lsp#SameIDs	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#SameIDs(showstatus, fname, line, col, handler) abort$/;"	f
go#lsp#TypeDef	plugged/vim-go/autoload/go/lsp.vim	/^function! go#lsp#TypeDef(fname, line, col, handler) abort$/;"	f
go#lsp#completionitemkind#IsFunction	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^function! go#lsp#completionitemkind#IsFunction(kind) abort$/;"	f
go#lsp#completionitemkind#IsMethod	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^function! go#lsp#completionitemkind#IsMethod(kind) abort$/;"	f
go#lsp#completionitemkind#Vim	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^function! go#lsp#completionitemkind#Vim(kind) abort$/;"	f
go#lsp#filechangetype#FileChangeType	plugged/vim-go/autoload/go/lsp/filechangetype.vim	/^function! go#lsp#filechangetype#FileChangeType(name)$/;"	f
go#lsp#lsp#Position	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! go#lsp#lsp#Position(...)$/;"	f
go#lsp#lsp#PositionOf	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! go#lsp#lsp#PositionOf(content, units, ...) abort$/;"	f
go#lsp#lsp#SeverityToErrorType	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! go#lsp#lsp#SeverityToErrorType(severity) abort$/;"	f
go#lsp#message#ApplyWorkspaceEditResponse	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#ApplyWorkspaceEditResponse(ok) abort$/;"	f
go#lsp#message#ChangeWorkspaceFolders	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#ChangeWorkspaceFolders(add, remove) abort$/;"	f
go#lsp#message#CodeActionFillStruct	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#CodeActionFillStruct(file, line, col) abort$/;"	f
go#lsp#message#CodeActionImports	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#CodeActionImports(file) abort$/;"	f
go#lsp#message#CodeActionRefactorRewrite	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#CodeActionRefactorRewrite(file, startline, startcol, endline, endcol) abort$/;"	f
go#lsp#message#Completion	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Completion(file, line, col) abort$/;"	f
go#lsp#message#ConfigurationResult	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#ConfigurationResult(items) abort$/;"	f
go#lsp#message#Definition	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Definition(file, line, col) abort$/;"	f
go#lsp#message#DidChange	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#DidChange(file, content, version) abort$/;"	f
go#lsp#message#DidChangeWatchedFile	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#DidChangeWatchedFile(file, ct) abort$/;"	f
go#lsp#message#DidClose	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#DidClose(file) abort$/;"	f
go#lsp#message#DidOpen	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#DidOpen(file, content, version) abort$/;"	f
go#lsp#message#ExecuteCommand	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#ExecuteCommand(cmd, args) abort$/;"	f
go#lsp#message#Exit	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Exit() abort$/;"	f
go#lsp#message#Format	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Format(file) abort$/;"	f
go#lsp#message#Hover	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Hover(file, line, col) abort$/;"	f
go#lsp#message#Implementation	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Implementation(file, line, col) abort$/;"	f
go#lsp#message#IncomingCalls	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#IncomingCalls(item) abort$/;"	f
go#lsp#message#Initialize	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Initialize(wd) abort$/;"	f
go#lsp#message#Initialized	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Initialized() abort$/;"	f
go#lsp#message#PrepareCallHierarchy	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#PrepareCallHierarchy(file, line, col) abort$/;"	f
go#lsp#message#PrepareRename	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#PrepareRename(file, line, col) abort$/;"	f
go#lsp#message#References	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#References(file, line, col) abort$/;"	f
go#lsp#message#Rename	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Rename(file, line, col, newName) abort$/;"	f
go#lsp#message#Shutdown	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#Shutdown() abort$/;"	f
go#lsp#message#TypeDefinition	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#TypeDefinition(file, line, col) abort$/;"	f
go#lsp#message#WorkspaceFoldersResult	plugged/vim-go/autoload/go/lsp/message.vim	/^function! go#lsp#message#WorkspaceFoldersResult(dirs) abort$/;"	f
go#mod#Format	plugged/vim-go/autoload/go/mod.vim	/^function! go#mod#Format() abort$/;"	f
go#mod#ToggleModFmtAutoSave	plugged/vim-go/autoload/go/mod.vim	/^function! go#mod#ToggleModFmtAutoSave() abort$/;"	f
go#mod#update_file	plugged/vim-go/autoload/go/mod.vim	/^function! go#mod#update_file(source, target)$/;"	f
go#package#Complete	plugged/vim-go/autoload/go/package.vim	/^function! go#package#Complete(ArgLead, CmdLine, CursorPos) abort$/;"	f
go#package#CompleteMembers	plugged/vim-go/autoload/go/package.vim	/^function! go#package#CompleteMembers(package, member) abort$/;"	f
go#package#FromPath	plugged/vim-go/autoload/go/package.vim	/^function! go#package#FromPath(arg) abort$/;"	f
go#package#ImportPath	plugged/vim-go/autoload/go/package.vim	/^function! go#package#ImportPath() abort$/;"	f
go#package#InGOPATH	plugged/vim-go/autoload/go/package.vim	/^function! go#package#InGOPATH() abort$/;"	f
go#path#BinPath	plugged/vim-go/autoload/go/path.vim	/^function! go#path#BinPath() abort$/;"	f
go#path#CheckBinPath	plugged/vim-go/autoload/go/path.vim	/^function! go#path#CheckBinPath(binpath) abort$/;"	f
go#path#Default	plugged/vim-go/autoload/go/path.vim	/^function! go#path#Default() abort$/;"	f
go#path#FromURI	plugged/vim-go/autoload/go/path.vim	/^function! go#path#FromURI(uri) abort$/;"	f
go#path#GoPath	plugged/vim-go/autoload/go/path.vim	/^function! go#path#GoPath(...) abort$/;"	f
go#path#ToURI	plugged/vim-go/autoload/go/path.vim	/^function! go#path#ToURI(path)$/;"	f
go#play#Share	plugged/vim-go/autoload/go/play.vim	/^function! go#play#Share(count, line1, line2) abort$/;"	f
go#promise#New	plugged/vim-go/autoload/go/promise.vim	/^function! go#promise#New(fn, timeout, default) abort$/;"	f
go#referrers#Referrers	plugged/vim-go/autoload/go/referrers.vim	/^function! go#referrers#Referrers(selected) abort$/;"	f
go#rename#Complete	plugged/vim-go/autoload/go/rename.vim	/^function! go#rename#Complete(lead, cmdline, cursor)$/;"	f
go#rename#Rename	plugged/vim-go/autoload/go/rename.vim	/^function! go#rename#Rename(bang, ...) abort$/;"	f
go#sameids#AutoToggleSameIds	plugged/vim-go/autoload/go/sameids.vim	/^function! go#sameids#AutoToggleSameIds() abort$/;"	f
go#sameids#ClearSameIds	plugged/vim-go/autoload/go/sameids.vim	/^function! go#sameids#ClearSameIds() abort$/;"	f
go#sameids#SameIds	plugged/vim-go/autoload/go/sameids.vim	/^function! go#sameids#SameIds(showstatus) abort$/;"	f
go#sameids#ToggleSameIds	plugged/vim-go/autoload/go/sameids.vim	/^function! go#sameids#ToggleSameIds() abort$/;"	f
go#statusline#Clear	plugged/vim-go/autoload/go/statusline.vim	/^function! go#statusline#Clear(timer_id) abort$/;"	f
go#statusline#Show	plugged/vim-go/autoload/go/statusline.vim	/^function! go#statusline#Show() abort$/;"	f
go#statusline#Update	plugged/vim-go/autoload/go/statusline.vim	/^function! go#statusline#Update(status_dir, status) abort$/;"	f
go#tags#Add	plugged/vim-go/autoload/go/tags.vim	/^function! go#tags#Add(start, end, count, ...) abort$/;"	f
go#tags#Remove	plugged/vim-go/autoload/go/tags.vim	/^function! go#tags#Remove(start, end, count, ...) abort$/;"	f
go#tags#run	plugged/vim-go/autoload/go/tags.vim	/^function! go#tags#run(start, end, offset, mode, fname, test_mode, ...) abort$/;"	f
go#template#ToggleAutoCreate	plugged/vim-go/autoload/go/template.vim	/^function! go#template#ToggleAutoCreate() abort$/;"	f
go#template#create	plugged/vim-go/autoload/go/template.vim	/^function! go#template#create() abort$/;"	f
go#term#ToggleCloseOnExit	plugged/vim-go/autoload/go/term.vim	/^function! go#term#ToggleCloseOnExit() abort$/;"	f
go#term#new	plugged/vim-go/autoload/go/term.vim	/^function! go#term#new(bang, cmd, errorformat) abort$/;"	f
go#term#newmode	plugged/vim-go/autoload/go/term.vim	/^function! go#term#newmode(bang, cmd, errorformat, mode) abort$/;"	f
go#test#Func	plugged/vim-go/autoload/go/test.vim	/^function! go#test#Func(bang, ...) abort$/;"	f
go#test#Test	plugged/vim-go/autoload/go/test.vim	/^function! go#test#Test(bang, compile, ...) abort$/;"	f
go#textobj#Comment	plugged/vim-go/autoload/go/textobj.vim	/^function! go#textobj#Comment(mode) abort$/;"	f
go#textobj#Function	plugged/vim-go/autoload/go/textobj.vim	/^function! go#textobj#Function(mode) abort$/;"	f
go#textobj#FunctionJump	plugged/vim-go/autoload/go/textobj.vim	/^function! go#textobj#FunctionJump(mode, direction) abort$/;"	f
go#textobj#FunctionLocation	plugged/vim-go/autoload/go/textobj.vim	/^function! go#textobj#FunctionLocation(direction, cnt) abort$/;"	f
go#tool#Deps	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Deps() abort$/;"	f
go#tool#DescribeBalloon	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#DescribeBalloon()$/;"	f
go#tool#Exists	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Exists(importpath) abort$/;"	f
go#tool#Files	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Files(...) abort$/;"	f
go#tool#Imports	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Imports() abort$/;"	f
go#tool#Info	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#Info(showstatus) abort$/;"	f
go#tool#List	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#List(package_path) abort$/;"	f
go#tool#PackageName	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#PackageName() abort$/;"	f
go#tool#ValidFiles	plugged/vim-go/autoload/go/tool.vim	/^function! go#tool#ValidFiles(...)$/;"	f
go#ui#CloseWindow	plugged/vim-go/autoload/go/ui.vim	/^function! go#ui#CloseWindow() abort$/;"	f
go#ui#GetReturnWindow	plugged/vim-go/autoload/go/ui.vim	/^function! go#ui#GetReturnWindow() abort$/;"	f
go#ui#OpenDefinition	plugged/vim-go/autoload/go/ui.vim	/^function! go#ui#OpenDefinition(filter) abort$/;"	f
go#ui#OpenWindow	plugged/vim-go/autoload/go/ui.vim	/^function! go#ui#OpenWindow(title, content, filetype) abort$/;"	f
go#uri#Decode	plugged/vim-go/autoload/go/uri.vim	/^function! go#uri#Decode(value) abort$/;"	f
go#uri#Encode	plugged/vim-go/autoload/go/uri.vim	/^function! go#uri#Encode(value) abort$/;"	f
go#uri#EncodePath	plugged/vim-go/autoload/go/uri.vim	/^function! go#uri#EncodePath(value) abort$/;"	f
go#util#Chdir	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Chdir(dir) abort$/;"	f
go#util#ClearHighlights	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ClearHighlights(group) abort$/;"	f
go#util#EchoError	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoError(msg)$/;"	f
go#util#EchoInfo	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoInfo(msg)$/;"	f
go#util#EchoProgress	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoProgress(msg)$/;"	f
go#util#EchoSuccess	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoSuccess(msg)$/;"	f
go#util#EchoWarning	plugged/vim-go/autoload/go/util.vim	/^function! go#util#EchoWarning(msg)$/;"	f
go#util#Exec	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Exec(cmd, ...) abort$/;"	f
go#util#ExecInDir	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ExecInDir(cmd, ...) abort$/;"	f
go#util#ExecInWorkDir	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ExecInWorkDir(cmd, wd, ...) abort$/;"	f
go#util#ExpandPattern	plugged/vim-go/autoload/go/util.vim	/^function go#util#ExpandPattern(...) abort$/;"	f
go#util#GetLines	plugged/vim-go/autoload/go/util.vim	/^function! go#util#GetLines()$/;"	f
go#util#HasDebug	plugged/vim-go/autoload/go/util.vim	/^function! go#util#HasDebug(flag)$/;"	f
go#util#HighlightPositions	plugged/vim-go/autoload/go/util.vim	/^function! go#util#HighlightPositions(group, pos) abort$/;"	f
go#util#IsMac	plugged/vim-go/autoload/go/util.vim	/^function! go#util#IsMac() abort$/;"	f
go#util#IsUsingCygwinShell	plugged/vim-go/autoload/go/util.vim	/^function! go#util#IsUsingCygwinShell()$/;"	f
go#util#IsWin	plugged/vim-go/autoload/go/util.vim	/^function! go#util#IsWin() abort$/;"	f
go#util#Join	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Join(...) abort$/;"	f
go#util#LineEnding	plugged/vim-go/autoload/go/util.vim	/^function! go#util#LineEnding() abort$/;"	f
go#util#ModuleRoot	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ModuleRoot(...) abort$/;"	f
go#util#Offset	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Offset(line, col) abort$/;"	f
go#util#OffsetCursor	plugged/vim-go/autoload/go/util.vim	/^function! go#util#OffsetCursor() abort$/;"	f
go#util#OpenBrowser	plugged/vim-go/autoload/go/util.vim	/^function! go#util#OpenBrowser(url) abort$/;"	f
go#util#ParseErrors	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ParseErrors(lines) abort$/;"	f
go#util#PathListSep	plugged/vim-go/autoload/go/util.vim	/^function! go#util#PathListSep() abort$/;"	f
go#util#PathSep	plugged/vim-go/autoload/go/util.vim	/^function! go#util#PathSep() abort$/;"	f
go#util#SetEnv	plugged/vim-go/autoload/go/util.vim	/^function! go#util#SetEnv(name, value) abort$/;"	f
go#util#ShellError	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ShellError() abort$/;"	f
go#util#Shelljoin	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Shelljoin(arglist, ...) abort$/;"	f
go#util#Shelllist	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Shelllist(arglist, ...) abort$/;"	f
go#util#ShowInfo	plugged/vim-go/autoload/go/util.vim	/^function! go#util#ShowInfo(info)$/;"	f
go#util#StripPathSep	plugged/vim-go/autoload/go/util.vim	/^function! go#util#StripPathSep(path) abort$/;"	f
go#util#StripTrailingSlash	plugged/vim-go/autoload/go/util.vim	/^function! go#util#StripTrailingSlash(paths) abort$/;"	f
go#util#System	plugged/vim-go/autoload/go/util.vim	/^function! go#util#System(str, ...) abort$/;"	f
go#util#TestName	plugged/vim-go/autoload/go/util.vim	/^function go#util#TestName() abort$/;"	f
go#util#Windo	plugged/vim-go/autoload/go/util.vim	/^function! go#util#Windo(command) abort$/;"	f
go#util#archive	plugged/vim-go/autoload/go/util.vim	/^function! go#util#archive()$/;"	f
go#util#camelcase	plugged/vim-go/autoload/go/util.vim	/^function! go#util#camelcase(word) abort$/;"	f
go#util#env	plugged/vim-go/autoload/go/util.vim	/^function! go#util#env(key) abort$/;"	f
go#util#goarch	plugged/vim-go/autoload/go/util.vim	/^function! go#util#goarch() abort$/;"	f
go#util#gobin	plugged/vim-go/autoload/go/util.vim	/^function! go#util#gobin() abort$/;"	f
go#util#gomod	plugged/vim-go/autoload/go/util.vim	/^function! go#util#gomod() abort$/;"	f
go#util#gomodcache	plugged/vim-go/autoload/go/util.vim	/^function! go#util#gomodcache() abort$/;"	f
go#util#goos	plugged/vim-go/autoload/go/util.vim	/^function! go#util#goos() abort$/;"	f
go#util#gopath	plugged/vim-go/autoload/go/util.vim	/^function! go#util#gopath() abort$/;"	f
go#util#goroot	plugged/vim-go/autoload/go/util.vim	/^function! go#util#goroot() abort$/;"	f
go#util#has_job	plugged/vim-go/autoload/go/util.vim	/^function! go#util#has_job(...) abort$/;"	f
go#util#hostosarch	plugged/vim-go/autoload/go/util.vim	/^function! go#util#hostosarch() abort$/;"	f
go#util#pascalcase	plugged/vim-go/autoload/go/util.vim	/^function! go#util#pascalcase(word) abort$/;"	f
go#util#snakecase	plugged/vim-go/autoload/go/util.vim	/^function! go#util#snakecase(word) abort$/;"	f
go#util#snippetcase	plugged/vim-go/autoload/go/util.vim	/^function! go#util#snippetcase(word) abort$/;"	f
go#util#tempdir	plugged/vim-go/autoload/go/util.vim	/^function! go#util#tempdir(prefix) abort$/;"	f
go_packages	plugged/vim-go/autoload/go/impl.vim	/^function! s:go_packages(dirs, arglead) abort$/;"	f
godocWord	plugged/vim-go/autoload/go/doc.vim	/^function! s:godocWord(args) abort$/;"	f
gofiletype_post	plugged/vim-go/plugin/go.vim	/^function! s:gofiletype_post()$/;"	f
gofiletype_pre	plugged/vim-go/plugin/go.vim	/^function! s:gofiletype_pre()$/;"	f
golangcilintcmd	plugged/vim-go/autoload/go/lint.vim	/^function! s:golangcilintcmd(bin_path, haslinter)$/;"	f
gometa	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometa(metalinter) abort$/;"	f
gometa_multiple	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometa_multiple(metalinter) abort$/;"	f
gometaautosave	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometaautosave(metalinter, withList) abort$/;"	f
gometaautosave_multiple	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:gometaautosave_multiple(metalinter) abort$/;"	f
gomod	plugged/vim-go/ftdetect/gofiletype.vim	/^fun! s:gomod()$/;"	f
goroutineID	plugged/vim-go/autoload/go/debug.vim	/^function! s:goroutineID() abort$/;"	f
gotest#assert_buffer	plugged/vim-go/autoload/gotest.vim	/^fun! gotest#assert_buffer(skipHeader, want) abort$/;"	f
gotest#assert_fixture	plugged/vim-go/autoload/gotest.vim	/^fun! gotest#assert_fixture(path) abort$/;"	f
gotest#assert_quickfix	plugged/vim-go/autoload/gotest.vim	/^func! gotest#assert_quickfix(got, want) abort$/;"	f
gotest#load_fixture	plugged/vim-go/autoload/gotest.vim	/^fun! gotest#load_fixture(path) abort$/;"	f
gotest#write_file	plugged/vim-go/autoload/gotest.vim	/^fun! gotest#write_file(path, contents) abort$/;"	f
goto_file	plugged/vim-go/autoload/go/debug.vim	/^function! s:goto_file() abort$/;"	f
goto_markedwin	plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_markedwin(...) abort$/;"	f
goto_original_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:goto_original_window()$/;"	f
goto_tagbar	plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_tagbar(...) abort$/;"	f
goto_win	plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_win(winnr, ...) abort$/;"	f
gr	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
grep_version	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:grep_version()$/;"	f
grey_color	colors/jellybeans.vim	/^  fun! s:grey_color(n)$/;"	f
grey_colour	colors/PaperColor.vim	/^  fun! s:grey_colour(n)$/;"	f
grey_colour	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:grey_colour(n)$/;"	f
grey_level	colors/PaperColor.vim	/^  fun! s:grey_level(n)$/;"	f
grey_level	colors/jellybeans.vim	/^  fun! s:grey_level(n)$/;"	f
grey_level	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:grey_level(n)$/;"	f
grey_number	colors/jellybeans.vim	/^  fun! s:grey_number(x)$/;"	f
grey_number	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:grey_number(x)$/;"	f
group	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^        let group = airline#extensions#tabline#group_of_bufnr(buffers, nr) . "_right"$/;"	v
group_by	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:group_by(xs, f) abort$/;"	f
group_hls	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:group_hls(hls, linecount) abort$/;"	f
group_not_done	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:group_not_done(list, name) abort$/;"	f
gsub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
gui2cui	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:gui2cui(rgb, fallback) abort$/;"	f
guru_cmd	plugged/vim-go/autoload/go/guru.vim	/^function! s:guru_cmd(args) range abort$/;"	f
gutentags#add_job	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#cscope_maps#generate	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^function! gutentags#cscope_maps#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope_maps#init	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^function! gutentags#cscope_maps#init(project_root) abort$/;"	f
gutentags#cscope_maps#on_job_exit	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^function! gutentags#cscope_maps#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_get_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_stderr_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
gutentags#default_stdout_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#error	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#on_vim_leave	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave() abort$/;"	f
gutentags#on_vim_leave_pre	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
gutentags#pycscope#generate	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#pycscope#init	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#init(project_root) abort$/;"	f
gutentags#pycscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#remove_job	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
gy	plugged/coc.nvim/doc/coc-example-config.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
handleCodeAction	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleCodeAction(kind, cmd, msg) abort dict$/;"	f
handleCodeActionError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleCodeActionError(filename, msg) abort dict$/;"	f
handleFormat	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleFormat(msg) abort dict$/;"	f
handleFormatError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleFormatError(filename, msg) abort dict$/;"	f
handleImplements	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleImplements(next, msg) abort dict$/;"	f
handleImplementsError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleImplementsError(next, error) abort dict$/;"	f
handleLeftClick	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick() abort$/;"	f
handleLocations	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleLocations(next, msg) abort$/;"	f
handleMiddleMouse	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse() abort$/;"	f
handleNextInProgress	plugged/vim-go/autoload/go/debug.vim	/^function! s:handleNextInProgress(res)$/;"	f
handleRPCResult	plugged/vim-go/autoload/go/debug.vim	/^function! s:handleRPCResult(resp) abort$/;"	f
handleReferences	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleReferences(next, msg) abort dict$/;"	f
handleRename	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleRename(msg) abort dict$/;"	f
handleRenameError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:handleRenameError(msg) abort dict$/;"	f
handle_double_hunk	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:handle_double_hunk(modified_lines)$/;"	f
handle_exit	plugged/vim-go/autoload/go/term.vim	/^func s:handle_exit(job_id, exit_status, state) abort$/;"	f
handle_list_function_args	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_list_function_args(check_errors, res) abort$/;"	f
handle_list_local_vars	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_list_local_vars(check_errors, res) abort$/;"	f
handle_list_registers	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_list_registers(check_errors, res) abort$/;"	f
handle_set	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_set(check_errors, res) abort$/;"	f
handle_stack_response	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_stack_response(command, check_errors, res) abort$/;"	f
handle_staleness_check_response	plugged/vim-go/autoload/go/debug.vim	/^function! s:handle_staleness_check_response(filename, check_errors, res) abort$/;"	f
handler	plugged/vim-go/autoload/go/auto.vim	/^function! s:handler(timer_id)$/;"	f
has	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:has(list, value) abort$/;"	f
hasPrefix	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:hasPrefix(text, prefix) abort$/;"	f
has_cjk	plugged/vim-snippets/pythonx/vimsnippets.py	/^def has_cjk(s):$/;"	f
has_common_items	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
has_fresh_changes	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:has_fresh_changes(bufnr) abort$/;"	f
has_index	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:has_index(list, index) abort$/;"	f
has_preview_window	plugged/unite.vim/autoload/unite/view.vim	/^function! s:has_preview_window() abort "{{{$/;"	f
has_shadow	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:has_shadow(config) abort$/;"	f
has_vimproc	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^function! s:has_vimproc() abort$/;"	f
hash	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:hash(str) abort$/;"	f
hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
health#coc#check	plugged/coc.nvim/autoload/health/coc.vim	/^function! health#coc#check() abort$/;"	f
hi	plugged/vim-go/syntax/go.vim	/^function! s:hi()$/;"	f
highlight	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^    def highlight(self):$/;"	m	class:Source
highlightFromGroup	plugged/nerdtree-git-plugin/after/syntax/nerdtree.vim	/^function! s:highlightFromGroup(group) abort$/;"	f
highlightMatches	plugged/vim-go/autoload/go/lsp.vim	/^function! s:highlightMatches(errorMatches, warningMatches) abort$/;"	f
highlight_name_for_change	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:highlight_name_for_change(text) abort$/;"	f
histget	plugged/unite.vim/autoload/unite/helper.vim	/^function! s:histget(type) abort "{{{$/;"	f
history_complete	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^function! s:history_complete(arglead, cmdline, cursorpos) abort$/;"	f
hl 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^		hl = function()$/;"	f
hl_group_exists	plugged/vim-airline/autoload/airline/highlighter.vim	/^  function! s:hl_group_exists(group) abort$/;"	f
hoverError	plugged/vim-go/autoload/go/lsp.vim	/^function! s:hoverError(next, diagnostic, msg) abort dict$/;"	f
hoverHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:hoverHandler(next, diagnostic, msg) abort dict$/;"	f
hsluv.dot_product 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.dot_product = function(a, b)$/;"	f
hsluv.from_linear 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.from_linear = function(c)$/;"	f
hsluv.get_bounds 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.get_bounds = function(l)$/;"	f
hsluv.hex_to_hpluv 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.hex_to_hpluv = function(s) return hsluv.rgb_to_hpluv(hsluv.hex_to_rgb(s)) end$/;"	f
hsluv.hex_to_hsluv 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.hex_to_hsluv = function(s) return hsluv.rgb_to_hsluv(hsluv.hex_to_rgb(s)) end$/;"	f
hsluv.hex_to_rgb 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.hex_to_rgb = function(hex)$/;"	f
hsluv.hpluv_to_hex 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.hpluv_to_hex = function(tuple) return hsluv.rgb_to_hex(hsluv.hpluv_to_rgb(tuple)) end$/;"	f
hsluv.hpluv_to_lch 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.hpluv_to_lch = function(tuple)$/;"	f
hsluv.hpluv_to_rgb 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.hpluv_to_rgb = function(tuple) return hsluv.lch_to_rgb(hsluv.hpluv_to_lch(tuple)) end$/;"	f
hsluv.hsluv_to_hex 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.hsluv_to_hex = function(tuple) return hsluv.rgb_to_hex(hsluv.hsluv_to_rgb(tuple)) end$/;"	f
hsluv.hsluv_to_lch 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.hsluv_to_lch = function(tuple)$/;"	f
hsluv.hsluv_to_rgb 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.hsluv_to_rgb = function(tuple) return hsluv.lch_to_rgb(hsluv.hsluv_to_lch(tuple)) end$/;"	f
hsluv.l_to_y 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.l_to_y = function(L)$/;"	f
hsluv.lch_to_hpluv 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.lch_to_hpluv = function(tuple)$/;"	f
hsluv.lch_to_hsluv 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.lch_to_hsluv = function(tuple)$/;"	f
hsluv.lch_to_luv 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.lch_to_luv = function(tuple)$/;"	f
hsluv.lch_to_rgb 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.lch_to_rgb = function(tuple) return hsluv.xyz_to_rgb(hsluv.luv_to_xyz(hsluv.lch_to_luv(tuple))) end$/;"	f
hsluv.luv_to_lch 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.luv_to_lch = function(tuple)$/;"	f
hsluv.luv_to_xyz 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.luv_to_xyz = function(tuple)$/;"	f
hsluv.max_safe_chroma_for_l 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.max_safe_chroma_for_l = function(l)$/;"	f
hsluv.max_safe_chroma_for_lh 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.max_safe_chroma_for_lh = function(l, h)$/;"	f
hsluv.rgb_to_hex 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.rgb_to_hex = function(tuple)$/;"	f
hsluv.rgb_to_hpluv 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.rgb_to_hpluv = function(tuple) return hsluv.lch_to_hpluv(hsluv.rgb_to_lch(tuple)) end$/;"	f
hsluv.rgb_to_hsluv 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.rgb_to_hsluv = function(tuple) return hsluv.lch_to_hsluv(hsluv.rgb_to_lch(tuple)) end$/;"	f
hsluv.rgb_to_lch 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.rgb_to_lch = function(tuple) return hsluv.luv_to_lch(hsluv.xyz_to_luv(hsluv.rgb_to_xyz(tuple))) end$/;"	f
hsluv.rgb_to_xyz 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.rgb_to_xyz = function(tuple)$/;"	f
hsluv.to_linear 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.to_linear = function(c)$/;"	f
hsluv.xyz_to_luv 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.xyz_to_luv = function(tuple)$/;"	f
hsluv.xyz_to_rgb 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.xyz_to_rgb = function(tuple)$/;"	f
hsluv.y_to_l 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^hsluv.y_to_l = function(Y)$/;"	f
hunk_op	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:hunk_op(op, ...)$/;"	f
i	plugged/vim-gitgutter/test/runner.vim	/^      let i += 1$/;"	v
i	plugged/vim-gitgutter/test/runner.vim	/^    let i = 0$/;"	v
ic	plugged/coc.nvim/doc/coc-example-config.vim	/^omap ic <Plug>(coc-classobj-i)$/;"	m
ic	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> ic :<c-u>call go#textobj#Comment('i')<cr>$/;"	m
iconv	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
iconv	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
identify_color_mode	colors/PaperColor.vim	/^fun! s:identify_color_mode()$/;"	f
if	plugged/coc.nvim/doc/coc-example-config.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
if	plugged/vim-go/ftplugin/go.vim	/^  onoremap <buffer> <silent> if :<c-u>call go#textobj#Function('i')<cr>$/;"	m
if type(user_highlights[flavour]) 	plugged/catppuccin/lua/catppuccin/lib/mapper.lua	/^	if type(user_highlights[flavour]) == "function" then user_highlights[flavour] = user_highlights[flavour](C) end$/;"	f
import	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:import(name, ...) abort dict$/;"	f
in_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:in_hunk_preview_window()$/;"	f
incomingCallsHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:incomingCallsHandler(next, msg) abort dict$/;"	f
index_to_lnum	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:index_to_lnum(index) abort$/;"	f
infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
info	plugged/vim-go/autoload/go/guru.vim	/^function! s:info(exit_val, output, mode)$/;"	f
info	plugged/vim-go/autoload/go/lsp.vim	/^function! s:info(show, msg) abort dict$/;"	f
infoDefinitionHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:infoDefinitionHandler(next, showstatus, msg) abort dict$/;"	f
infoFromHoverContent	plugged/vim-go/autoload/go/lsp.vim	/^function! s:infoFromHoverContent(content) abort$/;"	f
init	plugged/vim-airline/plugin/airline.vim	/^function! s:init()$/;"	f
init 	plugged/catppuccin/lua/catppuccin/utils/reactive.lua	/^		init = function() vim.opt.guicursor:append "a:ReactiveCursor" end,$/;"	f
initCustomOpenArgs	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:initCustomOpenArgs() abort$/;"	f
initFoldState	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:initFoldState(known_files) abort dict$/;"	f
initVariable	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:initVariable(var, value) abort$/;"	f
init_bookmark	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:init_bookmark(filename) abort  "{{{$/;"	f
init_buffer	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:init_buffer()$/;"	f
init_continuation	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:init_continuation(context, directory) abort "{{{$/;"	f
init_var	plugged/tagbar/plugin/tagbar.vim	/^function! s:init_var(var, value) abort$/;"	f
initialize_default	plugged/unite.vim/autoload/unite/variables.vim	/^function! s:initialize_default() abort "{{{$/;"	f
inp) vim.api.nvim_command	plugged/catppuccin/lua/catppuccin/init.lua	/^	function(inp) vim.api.nvim_command("colorscheme catppuccin-" .. get_flavour(inp.args)) end,$/;"	f
inputPrompt	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:inputPrompt(action)$/;"	f
input_directory	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:input_directory() abort "{{{$/;"	f
input_helper	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:input_helper(funcname, args) abort$/;"	f
input_overwrite_method	plugged/unite.vim/autoload/unite/kinds/file.vim	/^function! s:input_overwrite_method(dest, src) abort "{{{$/;"	f
input_safe	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:input_safe(...) abort$/;"	f
insert_enter	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:insert_enter(key) abort "{{{$/;"	f
insert_enter2	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:insert_enter2() abort "{{{$/;"	f
insert_leave	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:insert_leave() abort "{{{$/;"	f
insert_selected_candidate	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:insert_selected_candidate() abort "{{{$/;"	f
insert_virtual_text	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:insert_virtual_text() abort$/;"	f
insert_word	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:insert_word(word, finish) abort$/;"	f
inspect	plugged/catppuccin/lua/catppuccin/lib/compiler.lua	/^local function inspect(t)$/;"	f
inspect_type	plugged/coc.nvim/autoload/coc/api.vim	/^function s:inspect_type(v) abort$/;"	f
install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
interface_list	plugged/vim-go/autoload/go/impl.vim	/^function! s:interface_list(pkg) abort$/;"	f
intersect	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
invoke_funcrefs	plugged/vim-airline/autoload/airline.vim	/^function! s:invoke_funcrefs(context, funcrefs)$/;"	f
isEOF	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:isEOF(data) abort$/;"	f
isFoldable	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFoldable() abort dict$/;"	f
isFoldable	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFoldable() abort dict$/;"	f
isFolded	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFolded() abort dict$/;"	f
isFolded	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFolded() abort dict$/;"	f
isKindheader	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isKindheader() abort dict$/;"	f
isKindheader	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isKindheader() abort dict$/;"	f
isNormalTag	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isNormalTag() abort dict$/;"	f
isNormalTag	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:isNormalTag() abort dict$/;"	f
isPseudoTag	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
isPseudoTag	plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
isReady	plugged/vim-go/autoload/go/debug.vim	/^function! s:isReady()$/;"	f
isSplitTag	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isSplitTag() abort dict$/;"	f
isSplitTag	plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:isSplitTag() abort dict$/;"	f
is_absolute	plugged/unite.vim/autoload/unite/exrename.vim	/^function! s:is_absolute(path) abort "{{{$/;"	f
is_absolute	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^  function! s:is_absolute(path) abort$/;"	f
is_added	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_added(from_count, to_count) abort$/;"	f
is_case_tolerant	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:is_case_tolerant() abort$/;"	f
is_cygwin	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:is_cygwin() abort$/;"	f
is_dict	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:is_dict(Value) abort$/;"	f
is_directory	plugged/unite.vim/autoload/unite/exrename.vim	/^function! s:is_directory(candidate) abort "{{{$/;"	f
is_empty_or_none	colors/jellybeans.vim	/^fun! s:is_empty_or_none(str)$/;"	f
is_enabled	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^	local function is_enabled(min_width)$/;"	f
is_excluded_window	plugged/vim-airline/autoload/airline/extensions.vim	/^function! s:is_excluded_window()$/;"	f
is_file_buffer	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:is_file_buffer(bufnr) abort$/;"	f
is_float	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:is_float(Value) abort$/;"	f
is_funcref	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:is_funcref(Value) abort$/;"	f
is_list	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:is_list(Value) abort$/;"	f
is_listed	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! s:is_listed(is_bang, is_question, is_plus, is_minus, is_terminal, bufnr) abort "{{{$/;"	f
is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_mac	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:is_mac() abort$/;"	f
is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
is_modified	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified(from_count, to_count) abort$/;"	f
is_modified_and_added	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified_and_added(from_count, to_count) abort$/;"	f
is_modified_and_removed	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_modified_and_removed(from_count, to_count) abort$/;"	f
is_number	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:is_number(Value) abort$/;"	f
is_numeric	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:is_numeric(Value) abort$/;"	f
is_popup	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:is_popup(winid) abort$/;"	f
is_powershell	autoload/plug.vim	/^function! s:is_powershell(shell)$/;"	f
is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
is_relative	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:is_relative(path) abort$/;"	f
is_removed	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:is_removed(from_count, to_count) abort$/;"	f
is_root_directory	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^  function! s:is_root_directory(path) abort$/;"	f
is_string	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:is_string(Value) abort$/;"	f
is_unix	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:is_unix() abort$/;"	f
is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
is_windows	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:is_windows() abort$/;"	f
isabsolute	autoload/plug.vim	/^function! s:isabsolute(dir) abort$/;"	f
issuebody	plugged/vim-go/autoload/go/issue.vim	/^function! s:issuebody() abort$/;"	f
it("typo", function() assert.are_not.equals(hash { custom_highlight 	plugged/catppuccin/tests/hash_spec.lua	/^	it("typo", function() assert.are_not.equals(hash { custom_highlight = {} }, hash { ustom_highlight = {} }) end)$/;"	f
job	plugged/coc.nvim/autoload/coc/terminal.vim	/^    let job = term_getjob(bufnr)$/;"	v
job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
job_cb	autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
job_exit_cb	autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
job_handler	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:job_handler(job_id, data, event) abort "{{{$/;"	f
job_id	plugged/coc.nvim/autoload/coc/terminal.vim	/^    let job_id = termopen(a:cmd, {$/;"	v
job_id	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:job_id(job)$/;"	f
job_out_cb	autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
join	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:join(...) abort$/;"	f
join_posix_lines	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:join_posix_lines(lines, ...) abort$/;"	f
json	plugged/catppuccin/.github/scripts/update-palette.py	/^import json$/;"	i
json	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^import json$/;"	i
jump	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^function! s:jump(candidate, is_highlight) abort "{{{$/;"	f
jumpToChild	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(node, last) abort$/;"	f
jumpToFirstChild	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node) abort$/;"	f
jumpToLastChild	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node) abort$/;"	f
jumpToNextHunk	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:jumpToNextHunk(node)$/;"	f
jumpToNextSibling	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node) abort$/;"	f
jumpToParent	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node) abort$/;"	f
jumpToPrevHunk	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:jumpToPrevHunk(node)$/;"	f
jumpToPrevSibling	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node) abort$/;"	f
jumpToRoot	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot() abort$/;"	f
jumpToSibling	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(node, forward) abort$/;"	f
jump_column	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^function! s:jump_column(candidate) abort "{{{$/;"	f
jump_to_declaration_cb	plugged/vim-go/autoload/go/def.vim	/^function! s:jump_to_declaration_cb(mode, bin_name, job, exit_status, data) abort dict$/;"	f
jump_to_tab	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:jump_to_tab(offset)$/;"	f
justify_equal_spacing	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:justify_equal_spacing(str, width, ...) abort$/;"	f
keyword_spacing	plugged/vim-snippets/pythonx/javascript_snippets.py	/^def keyword_spacing(snip):$/;"	f
kill	plugged/unite.vim/autoload/unite/sources/process.vim	/^function! s:kill(signal, candidates) abort "{{{$/;"	f
kind	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^  let kind.action_table.highlight = {$/;"	v
kind	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^  let kind.action_table.preview = {$/;"	v
kind	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^  let kind.action_table.replace = {$/;"	v
kind.action_table.above.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.above.func(candidates) abort "{{{$/;"	f
kind.action_table.append.func	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! s:kind.action_table.append.func(candidate) abort "{{{$/;"	f
kind.action_table.argadd.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.argadd.func(candidates) abort "{{{$/;"	f
kind.action_table.backup.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.backup.func(candidates) abort "{{{$/;"	f
kind.action_table.below.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.below.func(candidates) abort "{{{$/;"	f
kind.action_table.cd.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:kind.action_table.cd.func(candidate) abort "{{{$/;"	f
kind.action_table.choose.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.choose.func(candidates) abort "{{{$/;"	f
kind.action_table.copy.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.copy.func(candidates) abort "{{{$/;"	f
kind.action_table.delete.func	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^function! s:kind.action_table.delete.func(candidates) abort "{{{$/;"	f
kind.action_table.delete.func	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^function! s:kind.action_table.delete.func(candidates) abort "{{{$/;"	f
kind.action_table.delete.func	plugged/unite.vim/autoload/unite/kinds/window.vim	/^function! s:kind.action_table.delete.func(candidates) abort "{{{$/;"	f
kind.action_table.diff.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.diff.func(candidates) abort "{{{$/;"	f
kind.action_table.dirdiff.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.dirdiff.func(candidates) abort "{{{$/;"	f
kind.action_table.echo.func	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! s:kind.action_table.echo.func(candidates) abort "{{{$/;"	f
kind.action_table.edit.func	plugged/unite.vim/autoload/unite/kinds/command.vim	/^function! s:kind.action_table.edit.func(candidate) abort "{{{$/;"	f
kind.action_table.edit.func	plugged/unite.vim/autoload/unite/kinds/guicmd.vim	/^function! s:kind.action_table.edit.func(candidate) abort "{{{$/;"	f
kind.action_table.edit.func	plugged/unite.vim/autoload/unite/kinds/source.vim	/^function! s:kind.action_table.edit.func(candidate) abort "{{{$/;"	f
kind.action_table.ex.func	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! s:kind.action_table.ex.func(candidates) abort "{{{$/;"	f
kind.action_table.execute.func	plugged/unite.vim/autoload/unite/kinds/command.vim	/^function! s:kind.action_table.execute.func(candidates) abort "{{{$/;"	f
kind.action_table.execute.func	plugged/unite.vim/autoload/unite/kinds/guicmd.vim	/^function! s:kind.action_table.execute.func(candidate) abort "{{{$/;"	f
kind.action_table.exrename.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.exrename.func(candidates) abort "{{{$/;"	f
kind.action_table.fdelete.func	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^function! s:kind.action_table.fdelete.func(candidates) abort "{{{$/;"	f
kind.action_table.find.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.find.func(candidate) abort "{{{$/;"	f
kind.action_table.goto.func	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^function! s:kind.action_table.goto.func(candidate) abort "{{{$/;"	f
kind.action_table.grep.func	plugged/unite.vim/autoload/unite/kinds/command.vim	/^function! s:kind.action_table.grep.func(candidate) abort "{{{$/;"	f
kind.action_table.grep.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.grep.func(candidates) abort "{{{$/;"	f
kind.action_table.highlight.func	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^  function! kind.action_table.highlight.func(candidate) abort "{{{$/;"	f
kind.action_table.insert.func	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! s:kind.action_table.insert.func(candidate) abort "{{{$/;"	f
kind.action_table.insert.func	plugged/unite.vim/autoload/unite/kinds/completion.vim	/^function! s:kind.action_table.insert.func(candidate) abort "{{{$/;"	f
kind.action_table.insert_directory.func	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! s:kind.action_table.insert_directory.func(candidate) abort "{{{$/;"	f
kind.action_table.jump.func	plugged/unite.vim/autoload/unite/kinds/window.vim	/^function! s:kind.action_table.jump.func(candidate) abort "{{{$/;"	f
kind.action_table.lcd.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:kind.action_table.lcd.func(candidate) abort "{{{$/;"	f
kind.action_table.left.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.left.func(candidates) abort "{{{$/;"	f
kind.action_table.mkdir.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.mkdir.func(candidate) abort "{{{$/;"	f
kind.action_table.move.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.move.func(candidates) abort "{{{$/;"	f
kind.action_table.narrow.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:kind.action_table.narrow.func(candidate) abort "{{{$/;"	f
kind.action_table.nop.func	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! s:kind.action_table.nop.func(candidate) abort "{{{$/;"	f
kind.action_table.only.func	plugged/unite.vim/autoload/unite/kinds/window.vim	/^function! s:kind.action_table.only.func(candidate) abort "{{{$/;"	f
kind.action_table.open.func	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^function! s:kind.action_table.open.func(candidates) abort "{{{$/;"	f
kind.action_table.open.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.open.func(candidates) abort "{{{$/;"	f
kind.action_table.open.func	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^function! s:kind.action_table.open.func(candidate) abort "{{{$/;"	f
kind.action_table.open.func	plugged/unite.vim/autoload/unite/kinds/window.vim	/^function! s:kind.action_table.open.func(candidates) abort "{{{$/;"	f
kind.action_table.persist_open.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.persist_open.func(candidate) abort "{{{$/;"	f
kind.action_table.preview.func	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^function! s:kind.action_table.preview.func(candidate) abort "{{{$/;"	f
kind.action_table.preview.func	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! s:kind.action_table.preview.func(candidate) abort "{{{$/;"	f
kind.action_table.preview.func	plugged/unite.vim/autoload/unite/kinds/completion.vim	/^function! s:kind.action_table.preview.func(candidate) abort "{{{$/;"	f
kind.action_table.preview.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.preview.func(candidate) abort "{{{$/;"	f
kind.action_table.preview.func	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^  function! kind.action_table.preview.func(candidate) abort "{{{$/;"	f
kind.action_table.preview.func	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^function! s:kind.action_table.preview.func(candidate) abort "{{{$/;"	f
kind.action_table.preview.func	plugged/unite.vim/autoload/unite/kinds/window.vim	/^function! s:kind.action_table.preview.func(candidate) abort "{{{$/;"	f
kind.action_table.project_cd.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:kind.action_table.project_cd.func(candidate) abort "{{{$/;"	f
kind.action_table.read.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.read.func(candidates) abort "{{{$/;"	f
kind.action_table.rename.func	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^function! s:kind.action_table.rename.func(candidates) abort "{{{$/;"	f
kind.action_table.rename.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.rename.func(candidates) abort "{{{$/;"	f
kind.action_table.rename.func	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^  function! s:kind.action_table.rename.func(candidates) abort "{{{$/;"	f
kind.action_table.replace.func	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^  function! kind.action_table.replace.func(candidates) abort "{{{$/;"	f
kind.action_table.right.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.right.func(candidates) abort "{{{$/;"	f
kind.action_table.split.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.split.func(candidates) abort "{{{$/;"	f
kind.action_table.splitswitch.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.splitswitch.func(candidates) abort "{{{$/;"	f
kind.action_table.start.func	plugged/unite.vim/autoload/unite/kinds/source.vim	/^function! s:kind.action_table.start.func(candidates) abort "{{{$/;"	f
kind.action_table.start.func	plugged/unite.vim/autoload/unite/kinds/uri.vim	/^function! s:kind.action_table.start.func(candidates) abort "{{{$/;"	f
kind.action_table.switch.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.switch.func(candidates) abort "{{{$/;"	f
kind.action_table.tabnew_cd.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:kind.action_table.tabnew_cd.func(candidate) abort "{{{$/;"	f
kind.action_table.tabnew_lcd.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:kind.action_table.tabnew_lcd.func(candidate) abort "{{{$/;"	f
kind.action_table.tabopen.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.tabopen.func(candidates) abort "{{{$/;"	f
kind.action_table.tabsplit.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.tabsplit.func(candidates) abort "{{{$/;"	f
kind.action_table.tabswitch.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.tabswitch.func(candidates) abort "{{{$/;"	f
kind.action_table.tabvimfiler.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:kind.action_table.tabvimfiler.func(candidate) abort "{{{$/;"	f
kind.action_table.tabvimshell.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:kind.action_table.tabvimshell.func(candidate) abort "{{{$/;"	f
kind.action_table.unite__new_candidate.func	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^function! s:kind.action_table.unite__new_candidate.func(candidate) abort "{{{$/;"	f
kind.action_table.unload.func	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^function! s:kind.action_table.unload.func(candidates) abort "{{{$/;"	f
kind.action_table.vimfiler.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:kind.action_table.vimfiler.func(candidate) abort "{{{$/;"	f
kind.action_table.vimfiler__copy.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.vimfiler__copy.func(candidates) abort "{{{$/;"	f
kind.action_table.vimfiler__delete.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.vimfiler__delete.func(candidates) abort "{{{$/;"	f
kind.action_table.vimfiler__execute.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.vimfiler__execute.func(candidates) abort "{{{$/;"	f
kind.action_table.vimfiler__external_filer.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.vimfiler__external_filer.func(candidate) abort "{{{$/;"	f
kind.action_table.vimfiler__mkdir.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.vimfiler__mkdir.func(candidates) abort "{{{$/;"	f
kind.action_table.vimfiler__move.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.vimfiler__move.func(candidates) abort "{{{$/;"	f
kind.action_table.vimfiler__newfile.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.vimfiler__newfile.func(candidate) abort "{{{$/;"	f
kind.action_table.vimfiler__rename.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.vimfiler__rename.func(candidate) abort "{{{$/;"	f
kind.action_table.vimfiler__shell.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.vimfiler__shell.func(candidate) abort "{{{$/;"	f
kind.action_table.vimfiler__shellcmd.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.vimfiler__shellcmd.func(candidate) abort "{{{$/;"	f
kind.action_table.vimfiler__write.func	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:kind.action_table.vimfiler__write.func(candidate) abort "{{{$/;"	f
kind.action_table.vimgrep.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.vimgrep.func(candidates) abort "{{{$/;"	f
kind.action_table.vimshell.func	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:kind.action_table.vimshell.func(candidate) abort "{{{$/;"	f
kind.action_table.vsplit.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.vsplit.func(candidates) abort "{{{$/;"	f
kind.action_table.vsplitswitch.func	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:kind.action_table.vsplitswitch.func(candidates) abort "{{{$/;"	f
kind.action_table.wipeout.func	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^function! s:kind.action_table.wipeout.func(candidates) abort "{{{$/;"	f
kind.action_table.wunix.func	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! s:kind.action_table.wunix.func(candidates) abort "{{{$/;"	f
kind.action_table.yank.func	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! s:kind.action_table.yank.func(candidates) abort "{{{$/;"	f
kind.action_table.yank_escape.func	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! s:kind.action_table.yank_escape.func(candidate) abort "{{{$/;"	f
known_files.get	plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.get(fname) abort dict$/;"	f
known_files.has	plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.has(fname) abort dict$/;"	f
known_files.put	plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.put(fileinfo, ...) abort dict$/;"	f
known_files.rm	plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.rm(fname) abort dict$/;"	f
l:bin_path	plugged/vim-go/autoload/go/lsp.vim	/^  let l:bin_path = go#path#CheckBinPath("gopls")$/;"	v
l:cmd	plugged/vim-go/autoload/go/lsp.vim	/^      let l:cmd = extend(l:cmd, ['-debug', 'localhost:0'])$/;"	v
l:cmd	plugged/vim-go/autoload/go/lsp.vim	/^  let l:cmd = [l:bin_path]$/;"	v
l:cmdopts	plugged/vim-go/autoload/go/lsp.vim	/^  let l:cmdopts = go#config#GoplsOptions()$/;"	v
l:completion	plugged/vim-go/autoload/go/complete.vim	/^    let l:completion = go#lsp#Completion(expand('%:p'), l:line, l:col, funcref('s:handler', [l:state]))$/;"	v
l:idx	plugged/vim-go/autoload/go/lsp.vim	/^      let l:idx = stridx(l:item, '-debug')$/;"	v
l:lsp	plugged/vim-go/autoload/go/lsp.vim	/^    let l:lsp.sendMessage = funcref('s:noop')$/;"	v
l:lsp	plugged/vim-go/autoload/go/lsp.vim	/^  let l:lsp.job = go#job#Start(l:cmd+l:cmdopts, l:opts)$/;"	v
l:needsDebug	plugged/vim-go/autoload/go/lsp.vim	/^        let l:needsDebug = 0$/;"	v
l:needsDebug	plugged/vim-go/autoload/go/lsp.vim	/^    let l:needsDebug = 1$/;"	v
l:opts	plugged/vim-go/autoload/go/lsp.vim	/^  let l:opts = {$/;"	v
l:start_options	plugged/vim-go/autoload/go/def.vim	/^    let l:start_options.in_io = "file"$/;"	v
l:start_options	plugged/vim-go/autoload/go/def.vim	/^    let l:start_options.in_name = l:tmpname$/;"	v
l:start_options	plugged/vim-go/autoload/go/def.vim	/^  let l:start_options.close_cb = funcref('s:close_cb', [l:start_options.close_cb], l:state)$/;"	v
l:start_options	plugged/vim-go/autoload/go/def.vim	/^  let l:start_options.exit_cb = funcref('s:exit_cb', [l:start_options.exit_cb], l:state)$/;"	v
l:tmpname	plugged/vim-go/autoload/go/def.vim	/^    let l:tmpname = tempname()$/;"	v
languageclient_refresh	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:languageclient_refresh()$/;"	f
last_buffer	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let last_buffer = len(b.buffers) - 1$/;"	v
last_non_empty_line	autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
lazy	autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
lcs	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:lcs(s1, s2)$/;"	f
legacy_airline_ale_get_line_number	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:legacy_airline_ale_get_line_number(cnt, type) abort$/;"	f
levenshtein_distance	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:levenshtein_distance(str1, str2) abort$/;"	f
line_adjustment_for_current_hunk	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:line_adjustment_for_current_hunk() abort$/;"	f
linechars	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
lineinfile	plugged/vim-go/autoload/go/lsp.vim	/^function! s:lineinfile(fname, line) abort$/;"	f
lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
lines	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:lines(str) abort$/;"	f
lint_job	plugged/vim-go/autoload/go/lint.vim	/^function! s:lint_job(metalinter, args, bang, autosave)$/;"	f
list_breakpoints	plugged/vim-go/autoload/go/debug.vim	/^function! s:list_breakpoints()$/;"	f
list_goroutines_handler	plugged/vim-go/autoload/go/debug.vim	/^function s:list_goroutines_handler(currentGoroutineID, check_errors, res) abort$/;"	f
listtype	plugged/vim-go/autoload/go/list.vim	/^function! s:listtype(listtype) abort$/;"	f
load	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:load(filename) abort  "{{{$/;"	f
load	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:load(...) abort dict$/;"	f
load_256_to_GUI_converter	colors/PaperColor.vim	/^fun! s:load_256_to_GUI_converter()$/;"	f
load_GUI_to_256_converter	colors/PaperColor.vim	/^fun! s:load_GUI_to_256_converter()$/;"	f
load_buffer	plugged/coc.nvim/autoload/coc/list.vim	/^function! s:load_buffer(name) abort$/;"	f
load_color_def	colors/jellybeans.vim	/^  fun! s:load_color_def(group, def)$/;"	f
load_colors	colors/jellybeans.vim	/^  fun! s:load_colors(defs)$/;"	f
load_plugin	autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
loaded_nerd_comments	plugged/nerdcommenter/plugin/nerdcommenter.vim	/^let loaded_nerd_comments = 1$/;"	v
loaded_nerd_tree	plugged/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_vim_devicons	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:loaded_vim_devicons() abort$/;"	f
loaded_vim_nerdtree_syntax_highlight	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:loaded_vim_nerdtree_syntax_highlight() abort$/;"	f
loaded_vim_nerdtree_tabs	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:loaded_vim_nerdtree_tabs() abort$/;"	f
local blendChannel 	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^	local blendChannel = function(i)$/;"	f
local distance_line_from_origin 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^local distance_line_from_origin = function(line) return math.abs(line.intercept) \/ math.sqrt((line.slope ^ 2) + 1) end$/;"	f
local function can_merge(v) return type(v) 	plugged/catppuccin/lua/catppuccin/lib/vim/init.lua	/^local function can_merge(v) return type(v) == "table" and (tbl_isempty(v) or not tbl_islist(v)) end$/;"	f
local hash_str 	plugged/catppuccin/lua/catppuccin/lib/hashing.lua	/^local hash_str = function(str) -- djb2, https:\/\/theartincode.stanis.me\/008-djb2\/$/;"	f
local hex_to_rgb 	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^local hex_to_rgb = function(hex_str)$/;"	f
local is_lsp_in_excluded_list 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^local is_lsp_in_excluded_list = function(lsp_name)$/;"	f
local length_of_ray_until_intersect 	plugged/catppuccin/lua/catppuccin/lib/hsluv.lua	/^local length_of_ray_until_intersect = function(theta, line)$/;"	f
local op2 	plugged/catppuccin/lua/catppuccin/lib/vim/bit.lua	/^	local op2 = memoize(function(a)$/;"	f
local status, error 	plugged/catppuccin/tests/init.lua	/^local status, error = pcall(function()$/;"	f
local vi_mode_hl 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^	local vi_mode_hl = function()$/;"	f
lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
logger	plugged/vim-go/autoload/go/debug.vim	/^function! s:logger(prefix, ch, msg) abort$/;"	f
logmessages	plugged/vim-go/scripts/runtest.vim	/^function! s:logmessages() abort$/;"	f
logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
lshift 	plugged/catppuccin/lua/catppuccin/lib/vim/bit.lua	/^	lshift = function(x, n) return bit_tobit(lshift(x % MOD, n % 32)) end,$/;"	f
lshift 	plugged/catppuccin/lua/catppuccin/lib/vim/bit.lua	/^lshift = function(a, disp) -- Lua5.2 inspired$/;"	f
lspfactory.get	plugged/vim-go/autoload/go/lsp.vim	/^function! s:lspfactory.get() dict abort$/;"	f
lspfactory.reset	plugged/vim-go/autoload/go/lsp.vim	/^function! s:lspfactory.reset() dict abort$/;"	f
make_abbr	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! s:make_abbr(bufnr, flags) abort "{{{$/;"	f
make_aliases	plugged/unite.vim/autoload/unite/sources/alias.vim	/^function! s:make_aliases() abort$/;"	f
make_bitop	plugged/catppuccin/lua/catppuccin/lib/vim/bit.lua	/^local function make_bitop(t)$/;"	f
make_bitop_uncached	plugged/catppuccin/lua/catppuccin/lib/vim/bit.lua	/^local function make_bitop_uncached(t, m)$/;"	f
make_box	plugged/vim-snippets/pythonx/vimsnippets.py	/^def make_box(twidth, bwidth=None):$/;"	f
make_cache_commands	plugged/unite.vim/autoload/unite/sources/command.vim	/^function! s:make_cache_commands() abort "{{{$/;"	f
make_cache_functions	plugged/unite.vim/autoload/unite/sources/function.vim	/^function! s:make_cache_functions() abort "{{{$/;"	f
make_candidates	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^        def make_candidates(row):$/;"	f	function:Source.gather_candidates
make_default_description	plugged/unite.vim/autoload/unite/sources/alias.vim	/^function! s:make_default_description(source_name, args) abort$/;"	f
make_word	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! s:make_word(bufnr) abort "{{{$/;"	f
manual_update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
map_accum	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
map_keys	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:map_keys()$/;"	f
mark_window	plugged/tagbar/autoload/tagbar.vim	/^function! s:mark_window() abort$/;"	f
matchaddpos	plugged/vim-go/autoload/go/util.vim	/^function! s:matchaddpos(group, pos) abort$/;"	f
matcher.filter	plugged/unite.vim/autoload/unite/filters/matcher_context.vim	/^function! s:matcher.filter(candidates, context) abort "{{{$/;"	f
matcher.filter	plugged/unite.vim/autoload/unite/filters/matcher_default.vim	/^function! s:matcher.filter(candidates, context) abort "{{{$/;"	f
matcher.filter	plugged/unite.vim/autoload/unite/filters/matcher_fuzzy.vim	/^function! s:matcher.filter(candidates, context) abort "{{{$/;"	f
matcher.filter	plugged/unite.vim/autoload/unite/filters/matcher_glob.vim	/^function! s:matcher.filter(candidates, context) abort "{{{$/;"	f
matcher.filter	plugged/unite.vim/autoload/unite/filters/matcher_hide_current_file.vim	/^function! s:matcher.filter(candidates, context) abort "{{{$/;"	f
matcher.filter	plugged/unite.vim/autoload/unite/filters/matcher_hide_hidden_files.vim	/^function! s:matcher.filter(candidates, context) abort "{{{$/;"	f
matcher.filter	plugged/unite.vim/autoload/unite/filters/matcher_migemo.vim	/^function! s:matcher.filter(candidates, context) abort "{{{$/;"	f
matcher.filter	plugged/unite.vim/autoload/unite/filters/matcher_project_files.vim	/^function! s:matcher.filter(candidates, context) abort "{{{$/;"	f
matcher.filter	plugged/unite.vim/autoload/unite/filters/matcher_project_ignore_files.vim	/^function! s:matcher.filter(candidates, context) abort "{{{$/;"	f
matcher.filter	plugged/unite.vim/autoload/unite/filters/matcher_regexp.vim	/^function! s:matcher.filter(candidates, context) abort "{{{$/;"	f
matcher.pattern	plugged/unite.vim/autoload/unite/filters/matcher_context.vim	/^function! s:matcher.pattern(input) abort "{{{$/;"	f
matcher.pattern	plugged/unite.vim/autoload/unite/filters/matcher_default.vim	/^function! s:matcher.pattern(input) abort "{{{$/;"	f
matcher.pattern	plugged/unite.vim/autoload/unite/filters/matcher_fuzzy.vim	/^function! s:matcher.pattern(input) abort "{{{$/;"	f
matcher.pattern	plugged/unite.vim/autoload/unite/filters/matcher_glob.vim	/^function! s:matcher.pattern(input) abort "{{{$/;"	f
matcher.pattern	plugged/unite.vim/autoload/unite/filters/matcher_migemo.vim	/^function! s:matcher.pattern(input) abort "{{{$/;"	f
matcher.pattern	plugged/unite.vim/autoload/unite/filters/matcher_regexp.vim	/^function! s:matcher.pattern(input) abort "{{{$/;"	f
max_by	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:max_by(list, expr) abort$/;"	f
max_firstline	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:max_firstline(lines, height, width) abort$/;"	f
maybe_map_scope	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:maybe_map_scope(scopestr) abort$/;"	f
memoize	plugged/catppuccin/lua/catppuccin/lib/vim/bit.lua	/^local function memoize(f)$/;"	f
message	plugged/vim-go/autoload/go/debug.vim	/^function! s:message(buf, data) abort$/;"	f
metalinterautosavecomplete	plugged/vim-go/autoload/go/lint.vim	/^function! s:metalinterautosavecomplete(metalinter, filepath, job, exit_code, messages)$/;"	f
metalintercmd	plugged/vim-go/autoload/go/lint.vim	/^function! s:metalintercmd(metalinter, haslinter)$/;"	f
mfe.Ip	plugged/coc.nvim/build/index.js	/^`)},r.push(async()=>{let x=this.documents.getDocument(d);!x||!x.attached||x.version!==m||(await x.applyEdits([f]),c.version=x.version)})}}else qr.is(u)?await this.createFile(cC(u.uri),u.options,r):vr.is(u)?await this.deleteFile(cC(u.uri),u.options,r):Yr.is(u)&&await this.renameFile(cC(u.oldUri),cC(u.newUri),u.options,r);if(r.length===0)return!0;t||(this.editState={edit:{documentChanges:i,changeAnnotations:e.changeAnnotations},changes:a,recovers:r,applied:!0}),this.nvim.redrawVim()}catch(s){return yfe.error("Error on applyEdits:",e,s),t||this.window.showErrorMessage(`Error on applyEdits: ${s}`),await this.undoChanges(r),!1}return t||o||this.window.showInformationMessage("Use ':wa' to save changes or ':CocCommand workspace.inspectEdit' to inspect."),!0}async undoChanges(e){for(;e.length>0;){let t=e.pop();await Promise.resolve(t())}}async inspectEdit(){if(!this.editState){this.window.showWarningMessage("No workspace edit to inspect");return}await new Ep(this.nvim,this.keymaps).show(this.editState)}async undoWorkspaceEdit(){let{editState:e}=this;if(!e||!e.applied){this.window.showWarningMessage("No workspace edit to undo");return}e.applied=!1,await this.undoChanges(e.recovers)}async redoWorkspaceEdit(){let{editState:e}=this;if(!e||e.applied){this.window.showWarningMessage("No workspace edit to redo");return}this.editState=void 0,await this.applyEdit(e.edit)}validateChanges(e){let{documents:t}=this;for(let i of e)if(xi.is(i)){let{uri:r,version:o}=i.textDocument,s=t.getDocument(r);if(typeof o=="number"&&o>0){if(!s)throw A4(r);if(s.version!=o)throw new Error(`${r} changed before apply edit`)}else if(!s&&!Kg(r))throw Pv(r)}else if(qr.is(i)||vr.is(i)){if(!Kg(i.uri))throw Pv(i.uri)}else if(Yr.is(i)&&(!Kg(i.oldUri)||!Kg(i.newUri)))throw Pv(i.oldUri)}async findFiles(e,t,i,r){let o=this.workspaceFolderControl.workspaceFolders;if(r?.isCancellationRequested||!o.length||i===0)return[];i=i??1\/0;let s=o.map(h=>Y.parse(h.uri).fsPath),a;typeof e!="string"?(a=e.pattern,s=[e.baseUri.fsPath]):a=e;let l=[],u=!1,c=new AbortController;r&&r.onCancellationRequested(()=>{c.abort()});for(let h of s){let d=await Zy.glob(a,{signal:c.signal,dot:!0,cwd:h,nodir:!0,absolute:!1});if(r?.isCancellationRequested)break;for(let g of d)if(!(t&&vfe(h,g,t))&&(l.push(Y.file(E.join(h,g))),l.length===i)){u=!0;break}if(u)break}return l}async fireWaitUntilEvent(e,t,i){let r=!0,o=[];e.fire({...t,waitUntil:s=>{if(!r)throw H4("waitUntil");let a=new Promise(u=>{setTimeout(u,this.operationTimeout)}),l=Promise.race([s,a]).then(u=>{if(u&&Hl.is(u))return this.applyEdit(u,!0)});o.push(l)}}),r=!1,await Promise.all(o)}}});function Ip(){return hC>dC.length-16&&(OX.default.randomFillSync(dC),hC=0),dC.slice(hC,hC+=16)}var OX,dC,hC,vE=k(()=>{OX=co(require("crypto")),dC=new Uint8Array(256),hC=dC.length});function gC(n,e=0){return mn[n[e+0]]+mn[n[e+1]]+mn[n[e+2]]+mn[n[e+3]]+"-"+mn[n[e+4]]+mn[n[e+5]]+"-"+mn[n[e+6]]+mn[n[e+7]]+"-"+mn[n[e+8]]+mn[n[e+9]]+"-"+mn[n[e+10]]+mn[n[e+11]]+mn[n[e+12]]+mn[n[e+13]]+mn[n[e+14]]+mn[n[e+15]]}var mn,wE=k(()=>{mn=[];for(let n=0;n<256;++n)mn.push((n+256).toString(16).slice(1))});function wfe(n,e,t){let i=e&&t||0,r=e||new Array(16);n=n||{};let o=n.node||AX,s=n.clockseq!==void 0?n.clockseq:xE;if(o==null||s==null){let d=n.random||(n.rng||Ip)();o==null&&(o=AX=[d[0]|1,d[1],d[2],d[3],d[4],d[5]]),s==null&&(s=xE=(d[6]<<8|d[7])&16383)}let a=n.msecs!==void 0?n.msecs:Date.now(),l=n.nsecs!==void 0?n.nsecs:SE+1,u=a-CE+(l-SE)\/1e4;if(u<0&&n.clockseq===void 0&&(s=s+1&16383),(u<0||a>CE)&&n.nsecs===void 0&&(l=0),l>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids\/sec");CE=a,SE=l,xE=s,a+=122192928e5;let c=((a&268435455)*1e4+l)%4294967296;r[i++]=c>>>24&255,r[i++]=c>>>16&255,r[i++]=c>>>8&255,r[i++]=c&255;let h=a\/4294967296*1e4&268435455;r[i++]=h>>>8&255,r[i++]=h&255,r[i++]=h>>>24&15|16,r[i++]=h>>>16&255,r[i++]=s>>>8|128,r[i++]=s&255;for(let d=0;d<6;++d)r[i+d]=o[d];return e||gC(r)}var AX,xE,CE,SE,mu,NX=k(()=>{vE();wE();CE=0,SE=0;mu=wfe});var HX,DE,BX=k(()=>{HX=co(require("crypto")),DE={randomUUID:HX.default.randomUUID}});function xfe(n,e,t){if(DE.randomUUID&&!e&&!n)return DE.randomUUID();n=n||{};let i=n.random||(n.rng||Ip)();if(i[6]=i[6]&15|64,i[8]=i[8]&63|128,e){t=t||0;for(let r=0;r<16;++r)e[t+r]=i[r];return e}return gC(i)}var Te,WX=k(()=>{BX();vE();wE();Te=xfe});var gt=k(()=>{NX();WX()});var UX=v((NNe,YX)=>{var TE=4294967296,qX=[];for(Lh=0;Lh<256;Lh++)qX[Lh]=(Lh>15?"":"0")+Lh.toString(16);var Lh,Fp=YX.exports=function(n,e){n instanceof Buffer?(this.buffer=n,this.offset=e||0):Object.prototype.toString.call(n)=="[object Uint8Array]"?(this.buffer=new Buffer(n),this.offset=e||0):(this.buffer=this.buffer||new Buffer(8),this.offset=0,this.setValue.apply(this,arguments))};Fp.MAX_INT=Math.pow(2,53);Fp.MIN_INT=-Math.pow(2,53);Fp.prototype={constructor:Fp,_2scomp:function(){for(var n=this.buffer,e=this.offset,t=1,i=e+7;i>=e;i--){var r=(n[i]^255)+t;n[i]=r&255,t=r>>8}},setValue:function(n,e){var t=!1;if(arguments.length==1)if(typeof n=="number"){if(t=n<0,n=Math.abs(n),e=n%TE,n=n\/TE,n>TE)throw new RangeError(n+" is outside Int64 range");n=n|0}else if(typeof n=="string")n=(n+"").replace(\/^0x\/,""),e=n.substr(-8),n=n.length>8?n.substr(0,n.length-8):"",n=parseInt(n,16),e=parseInt(e,16);else throw new Error(n+" must be a Number or String");for(var i=this.buffer,r=this.offset,o=7;o>=0;o--)i[r+o]=e&255,e=o==4?n:e>>>8;t&&this._2scomp()},toNumber:function(n){for(var e=this.buffer,t=this.offset,i=e[t]&128,r=0,o=1,s=7,a=1;s>=0;s--,a*=256){var l=e[t+s];i&&(l=(l^255)+o,o=l>>8,l=l&255),r+=l*a}return!n&&r>=Fp.MAX_INT?i?-1\/0:1\/0:i?-r:r},valueOf:function(){return this.toNumber(!1)},toString:function(n){return this.valueOf().toString(n||10)},toOctetString:function(n){for(var e=new Array(8),t=this.buffer,i=this.offset,r=0;r<8;r++)e[r]=qX[t[i+r]];return e.join(n||"")},toBuffer:function(n){if(n&&this.offset===0)return this.buffer;var e=new Buffer(8);return this.buffer.copy(e,0,this.offset,this.offset+8),e},copy:function(n,e){this.buffer.copy(n,e||0,this.offset,this.offset+8)},compare:function(n){if((this.buffer[this.offset]&128)!=(n.buffer[n.offset]&128))return n.buffer[n.offset]-this.buffer[this.offset];for(var e=0;e<8;e++)if(this.buffer[this.offset+e]!==n.buffer[n.offset+e])return this.buffer[this.offset+e]-n.buffer[n.offset+e];return 0},equals:function(n){return this.compare(n)===0},inspect:function(){return"[Int64 value:"+this+" octets:"+this.toOctetString(" ")+"]"}}});var tG=v(jp=>{var JX=require("events").EventEmitter,Cfe=require("util"),Sfe=require("os"),HNe=require("assert"),Mp=UX(),Xa=Sfe.endianness()=="BE";function $X(n){return Math.pow(2,Math.ceil(Math.log(n)\/Math.LN2))}function tn(n){this.buf=Buffer.alloc($X(n||8192)),this.readOffset=0,this.writeOffset=0}jp.Accumulator=tn;tn.prototype.writeAvail=function(){return this.buf.length-this.writeOffset};tn.prototype.readAvail=function(){return this.writeOffset-this.readOffset};tn.prototype.reserve=function(n){if(!(n<this.writeAvail())&&(this.readOffset>0&&(this.buf.copy(this.buf,0,this.readOffset,this.writeOffset),this.writeOffset-=this.readOffset,this.readOffset=0),!(n<this.writeAvail()))){var e=Buffer.alloc($X(this.buf.length+n-this.writeAvail()));this.buf.copy(e),this.buf=e}};tn.prototype.append=function(n){if(Buffer.isBuffer(n))this.reserve(n.length),n.copy(this.buf,this.writeOffset,0,n.length),this.writeOffset+=n.length;else{var e=Buffer.byteLength(n);this.reserve(e),this.buf.write(n,this.writeOffset),this.writeOffset+=e}};tn.prototype.assertReadableSize=function(n){if(this.readAvail()<n)throw new Error("wanted to read "+n+" bytes but only have "+this.readAvail())};tn.prototype.peekString=function(n){return this.assertReadableSize(n),this.buf.toString("utf-8",this.readOffset,this.readOffset+n)};tn.prototype.readString=function(n){var e=this.peekString(n);return this.readOffset+=n,e};tn.prototype.peekInt=function(n){switch(this.assertReadableSize(n),n){case 1:return this.buf.readInt8(this.readOffset,n);case 2:return Xa?this.buf.readInt16BE(this.readOffset,n):this.buf.readInt16LE(this.readOffset,n);case 4:return Xa?this.buf.readInt32BE(this.readOffset,n):this.buf.readInt32LE(this.readOffset,n);case 8:var e=this.buf.slice(this.readOffset,this.readOffset+8);return Xa?new Mp(e):new Mp(VX(e));default:throw new Error("invalid integer size "+n)}};tn.prototype.readInt=function(n){var e=this.peekInt(n);return e instanceof Mp&&isFinite(e.valueOf())&&(e=e.valueOf()),this.readOffset+=n,e};tn.prototype.peekDouble=function(){return this.assertReadableSize(8),Xa?this.buf.readDoubleBE(this.readOffset):this.buf.readDoubleLE(this.readOffset)};tn.prototype.readDouble=function(){var n=this.peekDouble();return this.readOffset+=8,n};tn.prototype.readAdvance=function(n){if(n>0)this.assertReadableSize(n);else if(n<0&&this.readOffset+n<0)throw new Error("advance with negative offset "+n+" would seek off the start of the buffer");this.readOffset+=n};tn.prototype.writeByte=function(n){this.reserve(1),this.buf.writeInt8(n,this.writeOffset),++this.writeOffset};tn.prototype.writeInt=function(n,e){switch(this.reserve(e),e){case 1:this.buf.writeInt8(n,this.writeOffset);break;case 2:Xa?this.buf.writeInt16BE(n,this.writeOffset):this.buf.writeInt16LE(n,this.writeOffset);break;case 4:Xa?this.buf.writeInt32BE(n,this.writeOffset):this.buf.writeInt32LE(n,this.writeOffset);break;default:throw new Error("unsupported integer size "+e)}this.writeOffset+=e};tn.prototype.writeDouble=function(n){this.reserve(8),Xa?this.buf.writeDoubleBE(n,this.writeOffset):this.buf.writeDoubleLE(n,this.writeOffset),this.writeOffset+=8};var PE=0,_E=1,RE=2,EE=3,LE=4,bC=5,mC=6,XX=7,GX=8,zX=9,KX=10,QX=11,Dfe=12,kE=0,ZX=1,Tfe=127,kfe=32767,Pfe=2147483647;function sr(){JX.call(this),this.buf=new tn,this.state=kE}Cfe.inherits(sr,JX);jp.BunserBuf=sr;sr.prototype.append=function(n,e){if(e)return this.buf.append(n),this.process(e);try{this.buf.append(n)}catch(t){this.emit("error",t);return}this.processLater()};sr.prototype.processLater=function(){var n=this;process.nextTick(function(){try{n.process(!1)}catch(e){n.emit("error",e)}})};sr.prototype.process=function(n){if(this.state==kE){if(this.buf.readAvail()<2)return;if(this.expectCode(0),this.expectCode(1),this.pduLen=this.decodeInt(!0),this.pduLen===!1){this.buf.readAdvance(-2);return}this.buf.reserve(this.pduLen),this.state=ZX}if(this.state==ZX){if(this.buf.readAvail()<this.pduLen)return;var e=this.decodeAny();if(n)return e;this.emit("value",e),this.state=kE}!n&&this.buf.readAvail()>0&&this.processLater()};sr.prototype.raise=function(n){throw new Error(n+", in Buffer of length "+this.buf.buf.length+" ("+this.buf.readAvail()+" readable) at offset "+this.buf.readOffset+" buffer: "+JSON.stringify(this.buf.buf.slice(this.buf.readOffset,this.buf.readOffset+32).toJSON()))};sr.prototype.expectCode=function(n){var e=this.buf.readInt(1);e!=n&&this.raise("expected bser opcode "+n+" but got "+e)};sr.prototype.decodeAny=function(){var n=this.buf.peekInt(1);switch(n){case EE:case LE:case bC:case mC:return this.decodeInt();case XX:return this.buf.readAdvance(1),this.buf.readDouble();case GX:return this.buf.readAdvance(1),!0;case zX:return this.buf.readAdvance(1),!1;case KX:return this.buf.readAdvance(1),null;case RE:return this.decodeString();case PE:return this.decodeArray();case _E:return this.decodeObject();case QX:return this.decodeTemplate();default:this.raise("unhandled bser opcode "+n)}};sr.prototype.decodeArray=function(){this.expectCode(PE);for(var n=this.decodeInt(),e=[],t=0;t<n;++t)e.push(this.decodeAny());return e};sr.prototype.decodeObject=function(){this.expectCode(_E);for(var n=this.decodeInt(),e={},t=0;t<n;++t){var i=this.decodeString(),r=this.decodeAny();e[i]=r}return e};sr.prototype.decodeTemplate=function(){this.expectCode(QX);for(var n=this.decodeArray(),e=this.decodeInt(),t=[],i=0;i<e;++i){for(var r={},o=0;o<n.length;++o){if(this.buf.peekInt(1)==Dfe){this.buf.readAdvance(1);continue}var s=this.decodeAny();r[n[o]]=s}t.push(r)}return t};sr.prototype.decodeString=function(){this.expectCode(RE);var n=this.decodeInt();return this.buf.readString(n)};sr.prototype.decodeInt=function(n){if(n&&this.buf.readAvail()<1)return!1;this.buf.assertReadableSize(1);var e=this.buf.peekInt(1),t=0;switch(e){case EE:t=1;break;case LE:t=2;break;case bC:t=4;break;case mC:t=8;break;default:this.raise("invalid bser int encoding "+e)}return n&&this.buf.readAvail()<1+t?!1:(this.buf.readAdvance(1),this.buf.readInt(t))};function _fe(n){var e=new sr,t=e.append(n,!0);if(e.buf.readAvail())throw Error("excess data found after input buffer, use BunserBuf instead");if(typeof t>"u")throw Error("no bser found in string and no error raised!?");return t}jp.loadFromBuffer=_fe;function VX(n){for(var e=Buffer.alloc(n.length),t=0;t<n.length;t++)e[t]=n[n.length-1-t];return e}function eG(n,e){var t=e.toBuffer();if(Xa){n.writeByte(mC),n.append(t);return}var i=VX(t);n.writeByte(mC),n.append(i)}function pC(n,e){var t=Math.abs(e);t<=Tfe?(n.writeByte(EE),n.writeInt(e,1)):t<=kfe?(n.writeByte(LE),n.writeInt(e,2)):t<=Pfe?(n.writeByte(bC),n.writeInt(e,4)):eG(n,new Mp(e))}function fC(n,e){switch(typeof e){case"number":isFinite(e)&&Math.floor(e)===e?pC(n,e):(n.writeByte(XX),n.writeDouble(e));return;case"string":n.writeByte(RE),pC(n,Buffer.byteLength(e)),n.append(e);return;case"boolean":n.writeByte(e?GX:zX);return;case"object":if(e===null){n.writeByte(KX);return}if(e instanceof Mp){eG(n,e);return}if(Array.isArray(e)){n.writeByte(PE),pC(n,e.length);for(var t=0;t<e.length;++t)fC(n,e[t]);return}n.writeByte(_E);for(var i=Object.keys(e),r=i.length,t=0;t<i.length;++t){var o=i[t],s=e[o];typeof s>"u"&&r--}pC(n,r);for(var t=0;t<i.length;++t){var o=i[t],s=e[o];if(!(typeof s>"u")){fC(n,o);try{fC(n,s)}catch(c){throw new Error(c.message+" (while serializing object property with name `"+o+"')")}}}return;default:throw new Error("cannot serialize type "+typeof e+" to BSER")}}function Rfe(n){var e=new tn;e.writeByte(0),e.writeByte(1),e.writeByte(bC),e.writeInt(0,4),fC(e,n);var t=e.writeOffset,i=t-7;return e.writeOffset=3,e.writeInt(i,4),e.writeOffset=t,e.buf.slice(0,t)}jp.dumpToBuffer=Rfe});var lG=v((WNe,aG)=>{"use strict";var Efe=require("net"),oG=require("events").EventEmitter,Lfe=require("util"),Ife=require("child_process"),sG=tG(),iG=["subscription","log"];function Hs(n){var e=this;oG.call(this),this.watchmanBinaryPath="watchman",n&&n.watchmanBinaryPath&&(this.watchmanBinaryPath=n.watchmanBinaryPath.trim()),this.commands=[]}Lfe.inherits(Hs,oG);aG.exports.Client=Hs;Hs.prototype.sendNextCommand=function(){this.currentCommand||(this.currentCommand=this.commands.shift(),this.currentCommand&&this.socket.write(sG.dumpToBuffer(this.currentCommand.cmd)))};Hs.prototype.cancelCommands=function(n){var e=new Error(n),t=this.commands;this.commands=[],this.currentCommand&&(t.unshift(this.currentCommand),this.currentCommand=null),t.forEach(function(i){i.cb(e)})};Hs.prototype.connect=function(){var n=this;function e(l){n.bunser=new sG.BunserBuf,n.bunser.on("value",function(u){for(var c=!1,h=0;h<iG.length;h++){var d=iG[h];d in u&&(c=d)}if(c)n.emit(c,u);else if(n.currentCommand){var g=n.currentCommand;if(n.currentCommand=null,"error"in u){var f=new Error(u.error);f.watchmanResponse=u,g.cb(f)}else g.cb(null,u)}n.sendNextCommand()}),n.bunser.on("error",function(u){n.emit("error",u)}),n.socket=Efe.createConnection(l),n.socket.on("connect",function(){n.connecting=!1,n.emit("connect"),n.sendNextCommand()}),n.socket.on("error",function(u){n.connecting=!1,n.emit("error",u)}),n.socket.on("data",function(u){n.bunser&&n.bunser.append(u)}),n.socket.on("end",function(){n.socket=null,n.bunser=null,n.cancelCommands("The watchman connection was closed"),n.emit("end")})}if(process.env.WATCHMAN_SOCK){e(process.env.WATCHMAN_SOCK);return}var t=["--no-pretty","get-sockname"],i=null,r=!1;function o(l){r||(r=!0,l.code==="EACCES"||l.errno==="EACCES"?l.message="The Watchman CLI is installed but cannot be spawned because of a permission problem":(l.code==="ENOENT"||l.errno==="ENOENT")&&(l.message="Watchman was not found in PATH.  See https:\/\/facebook.github.io\/watchman\/docs\/install.html for installation instructions"),console.error("Watchman: ",l.message),n.emit("error",l))}try{i=Ife.spawn(this.watchmanBinaryPath,t,{stdio:["ignore","pipe","pipe"],windowsHide:!0})}catch(l){o(l);return}var s=[],a=[];i.stdout.on("data",function(l){s.push(l)}),i.stderr.on("data",function(l){l=l.toString("utf8"),a.push(l),console.error(l)}),i.on("error",function(l){o(l)}),i.on("close",function(l,u){if(l!==0){o(new Error(n.watchmanBinaryPath+" "+t.join(" ")+" returned with exit code="+l+", signal="+u+", stderr= "+a.join("")));return}try{var c=JSON.parse(s.join(""));if("error"in c){var h=new Error(c.error);h.watchmanResponse=c,n.emit("error",h);return}e(c.sockname)}catch(d){n.emit("error",d)}})};Hs.prototype.command=function(n,e){if(e=e||function(){},this.commands.push({cmd:n,cb:e}),!this.socket){if(!this.connecting){this.connecting=!0,this.connect();return}return}this.sendNextCommand()};var nG={"cmd-watch-del-all":"3.1.1","cmd-watch-project":"3.1",relative_root:"3.3","term-dirname":"3.1","term-idirname":"3.1",wildmatch:"3.7"};function Ffe(n,e){n=n.split("."),e=e.split(".");for(var t=0;t<3;t++){var i=parseInt(n[t]||"0")-parseInt(e[t]||"0");if(i!=0)return i}return 0}function rG(n,e){return e in nG?Ffe(n,nG[e])>=0:!1}Hs.prototype._synthesizeCapabilityCheck=function(n,e,t){n.capabilities={};var i=n.version;return e.forEach(function(r){n.capabilities[r]=rG(i,r)}),t.forEach(function(r){var o=rG(i,r);n.capabilities[r]=o,o||(n.error="client required capability `"+r+"` is not supported by this server")}),n};Hs.prototype.capabilityCheck=function(n,e){var t=n.optional||[],i=n.required||[],r=this;this.command(["version",{optional:t,required:i}],function(o,s){if(o){e(o);return}if(!("capabilities"in s)&&(s=r._synthesizeCapabilityCheck(s,t,i),s.error)){o=new Error(s.error),o.watchmanResponse=s,e(o);return}e(null,s)})};Hs.prototype.end=function(){this.cancelCommands("The client was ended"),this.socket&&(this.socket.end(),this.socket=null),this.bunser=null}});function jfe(n){return!(n=="\/"||n=="\/tmp"||n=="\/private\/tmp"||n==Bt.tmpdir()||St(n,Bt.homedir(),!0)||E.parse(n).base==n)}var IE,Mfe,bu,FE=k(()=>{"use strict";gt();Ee();pt();fe();IE=te("core-watchman"),Mfe=["relative_root","cmd-watch-project","wildmatch","field-new"],bu=class n{constructor(e,t){this.channel=t;this._disposed=!1;let i=lG();this.client=new i.Client({watchmanBinaryPath:e}),this.client.setMaxListeners(300)}checkCapability(){let{client:e}=this;return new Promise((t,i)=>{e.capabilityCheck({optional:[],required:Mfe},(r,o)=>{if(r)return t(!1);let{capabilities:s}=o;for(let a of Object.keys(s))if(!s[a])return t(!1);t(!0)})})}async watchProject(e){let t=await this.command(["watch-project",e]),{watch:i,warning:r,relative_path:o}=t;return i?(r&&IE.warn(r),this.watch=i,this.relative_path=o,IE.info(`watchman watching project: ${e}`),this.appendOutput(`watchman watching project: ${e}`),!0):!1}command(e){return new Promise((t,i)=>{this.client.command(e,(r,o)=>{if(r)return i(r);t(o)})})}async subscribe(e,t){let{watch:i,relative_path:r}=this;if(!i)throw new Error("watchman not watching");let{clock:o}=await this.command(["clock",i]),s=mu(),a={expression:["allof",["match","**\/*","wholename"]],fields:["name","size","new","exists","type","mtime_ms","ctime_ms"],since:o},l=i;if(r&&(a.relative_root=r,l=E.join(i,r)),!this.client)return;let{subscribe:u}=await this.command(["subscribe",i,s,a]);return this.appendOutput(`subscribing "${e}" in ${l}`),this.client.on("subscription",c=>{if(!c||c.subscription!=s)return;let{files:h}=c;if(!h||(h=h.filter(g=>g.type=="f"&&wi(g.name,e,{dot:!0})),!h.length))return;let d=Object.assign({},c);this.relative_path&&(d.root=E.resolve(c.root,this.relative_path)),this.appendOutput(`file change detected: ${JSON.stringify(d,null,2)}`),t(d)}),{dispose:()=>{this.unsubscribe(u)},subscribe:u}}unsubscribe(e){if(this._disposed)return Promise.resolve();let{watch:t}=this;if(t)return this.appendOutput(`unsubscribe "${e}" in: ${t}`),this.command(["unsubscribe",t,e]).catch(i=>{i.message?.includes("The client was ended")&&IE.error(i)})}dispose(){this._disposed||(this._disposed=!0,this.client&&(this.client.end(),this.client=void 0))}appendOutput(e,t="Info"){this.channel&&this.channel.appendLine(`[${t}  - ${new Date().toLocaleTimeString()}] ${e}`)}static async createClient(e,t,i){if(!jfe(t))throw new Error(`Watch for ${t} is ignored`);let r;try{if(r=new n(e,i),!await r.checkCapability())throw new Error("required capabilities do not exist.");if(!await r.watchProject(t))throw new Error("unable to watch");return r}catch(o){throw r&&r.dispose(),o}}}});var Ofe,Op,ME,uG=k(()=>{"use strict";$e();Ee();se();Le();pt();fe();ie();FE();Ofe=te("fileSystemWatcher"),Op=class n{constructor(e,t){this.workspaceFolder=e;this.watchmanPath=t;this.clientsMap=new Map;this.disposables=[];this.creating=new Set;this._onDidCreateClient=new p.Emitter;this.disabled=!1;this.onDidCreateClient=this._onDidCreateClient.event}static{this.watchers=new Set}attach(e){this.channel=e;let t=i=>{let r=Y.parse(i.uri).fsPath;this.createClient(r)};this.workspaceFolder.workspaceFolders.forEach(i=>{t(i)}),this.workspaceFolder.onDidChangeWorkspaceFolders(i=>{i.added.forEach(r=>{t(r)}),i.removed.forEach(r=>{let o=Y.parse(r.uri).fsPath,s=this.clientsMap.get(o);s&&(this.clientsMap.delete(o),s.dispose())})},null,this.disposables)}waitClient(e){return this.clientsMap.has(e)?Promise.resolve():new Promise(t=>{let i=this.onDidCreateClient(r=>{r==e&&(i.dispose(),t())})})}async createClient(e){if(!(this.watchmanPath==null||this.has(e)||this.disabled))try{let t=await this.getWatchmanPath();this.creating.add(e);let i=await bu.createClient(t,e,this.channel);this.creating.delete(e),this.clientsMap.set(e,i);for(let r of n.watchers)r.listen(e,i);this._onDidCreateClient.fire(e)}catch(t){this.creating.delete(e),this.channel&&this.channel.appendLine(`Error on create watchman client: ${t}`)}}async getWatchmanPath(){let e=this.watchmanPath;return process.env.WATCHMAN_SOCK||(e=await Wo(this.watchmanPath,{all:!1})),e}has(e){let t=Array.from(this.clientsMap.keys());return t.push(...this.creating),t.some(i=>Di(i,e))}createFileSystemWatcher(e,t,i,r){let o=new ME(e,t,i,r),s=typeof e=="string"?void 0:e.baseUri.fsPath;for(let[a,l]of this.clientsMap.entries())s&&St(a,s,!0)&&(s=void 0),o.listen(a,l);return s&&this.createClient(s),n.watchers.add(o),o}dispose(){this._onDidCreateClient.dispose();for(let e of this.clientsMap.values())e&&e.dispose();this.clientsMap.clear(),n.watchers.clear(),z(this.disposables)}},ME=class{constructor(e,t,i,r){this.globPattern=e;this.ignoreCreateEvents=t;this.ignoreChangeEvents=i;this.ignoreDeleteEvents=r;this._onDidCreate=new p.Emitter;this._onDidChange=new p.Emitter;this._onDidDelete=new p.Emitter;this._onDidRename=new p.Emitter;this.disposables=[];this._disposed=!1;this.onDidCreate=this._onDidCreate.event;this.onDidChange=this._onDidChange.event;this.onDidDelete=this._onDidDelete.event;this.onDidRename=this._onDidRename.event;this._onDidListen=new p.Emitter;this.onDidListen=this._onDidListen.event}listen(e,t){let{globPattern:i,ignoreCreateEvents:r,ignoreChangeEvents:o,ignoreDeleteEvents:s}=this,a,l;if(typeof i=="string")a=i;else if(a=i.pattern,l=i.baseUri.fsPath,!St(e,l,!0))return;let u=c=>{let{root:h,files:d}=c;l&&!Di(h,l)?d=d.filter(g=>{if(g.type!="f")return!1;let f=E.join(h,g.name);return St(l,f)?wi(E.relative(l,f),a,{dot:!0}):!1}):d=d.filter(g=>g.type=="f"&&wi(g.name,a,{dot:!0}));for(let g of d){let f=Y.file(E.join(h,g.name));g.exists?g.new===!0?r||this._onDidCreate.fire(f):o||this._onDidChange.fire(f):s||this._onDidDelete.fire(f)}if(d.length==2&&d[0].exists!==d[1].exists){let g=d.find(m=>m.exists!==!0),f=d.find(m=>m.exists===!0);g.size==f.size&&this._onDidRename.fire({oldUri:Y.file(E.join(h,g.name)),newUri:Y.file(E.join(h,f.name))})}if(d.length>2&&d.length%2==0){let[g,f]=Gw(d,m=>m.exists===!1);if(g.length==f.length)for(let m of g){let b=f.find(w=>w.size==m.size&&w.mtime_ms==m.mtime_ms);b&&this._onDidRename.fire({oldUri:Y.file(E.join(h,m.name)),newUri:Y.file(E.join(h,b.name))})}}};t.subscribe(a,u).then(c=>{if(c){if(this._onDidListen.fire(),this.subscribe=c.subscribe,this._disposed)return c.dispose();this.disposables.push(c)}},c=>{c instanceof Error&&c.message.includes("client was ended")||Ofe.error(`Error on subscribe ${a}`,c)})}dispose(){this._disposed=!0,Op.watchers.delete(this),this._onDidRename.dispose(),this._onDidCreate.dispose(),this._onDidChange.dispose(),z(this.disposables)}}});function cG(n){return n=="n"||n=="o"||n=="x"||n=="v"?"<C-U>":n=="i"?"<C-o>":n=="s"?"<Esc>":""}function Nfe(n){return typeof n=="number"?n:F.bufnr}var Afe,Ap,hG=k(()=>{"use strict";je();Ee();ie();Ce();Afe=te("core-keymaps");Ap=class{constructor(){this.keymaps=new Map}attach(e){this.nvim=e}async doKeymap(e,t){let i=this.keymaps.get(e)??this.keymaps.get("coc-"+e);if(!i)return Afe.error(`keymap for ${e} not found`),t;let[r,o]=i,s=await Promise.resolve(r());return o&&await this.nvim.command(`silent! call repeat#set("\\\\<Plug>(coc-${e})", -1)`),s??t}registerKeymap(e,t,i,r={}){if(!t)throw new Error(`Invalid key ${t} of registerKeymap`);let o=`coc-${t}`;if(this.keymaps.has(o))throw new Error(`${t} already exists.`);let s=`<Plug>(${o})`;r=Object.assign({sync:!0,cancel:!0,silent:!0,repeat:!1},r);let{nvim:a}=this;this.keymaps.set(o,[i,!!r.repeat]);let l=r.sync?"request":"notify",u=r.cancel?1:0;for(let c of e)c=="i"?a.setKeymap(c,s,`coc#_insert_key('${l}', '${o}', ${u})`,{expr:!0,noremap:!0,silent:r.silent}):a.setKeymap(c,s,`:${cG(c)}call coc#rpc#${l}('doKeymap', ['${o}'])<cr>`,{noremap:!0,silent:r.silent});return p.Disposable.create(()=>{this.keymaps.delete(o);for(let c of e)a.deleteKeymap(c,s)})}registerExprKeymap(e,t,i,r=!1,o=!0){let s=Nfe(r),a=`${e}-${b_(t)}${r?`-${s}`:""}`,{nvim:l}=this,u;e=="i"?u=`coc#_insert_key('request', '${a}', ${o?"1":"0"})`:u=`coc#rpc#request('doKeymap', ['${a}'])`;let c={noremap:!0,silent:!0,expr:!0,nowait:!0};return r?l.createBuffer(s).setKeymap(e,t,u,c):l.setKeymap(e,t,u,c),this.keymaps.set(a,[i,!1]),p.Disposable.create(()=>{this.keymaps.delete(a),r?l.createBuffer(s).deleteKeymap(e,t):l.deleteKeymap(e,t)})}registerLocalKeymap(e,t,i,r,o){let{nvim:s}=this,a=s.createBuffer(e),l=`local-${e}-${t}-${b_(i)}`;this.keymaps.set(l,[r,!1]);let u=o?"notify":"request",c=cG(t);return a.setKeymap(t,i,`:${c}call coc#rpc#${u}('doKeymap', ['${l}'])<CR>`,{silent:!0,nowait:!0,noremap:!0}),p.Disposable.create(()=>{this.keymaps.delete(l),a.deleteKeymap(t,i)})}}});var dG,Np,gG=k(()=>{"use strict";je();Ee();se();ie();Ce();dG=te("watchers"),Np=class{constructor(){this.optionCallbacks=new Map;this.globalCallbacks=new Map;this.disposables=[];this._onDidRuntimePathChange=new p.Emitter;this.onDidRuntimePathChange=this._onDidRuntimePathChange.event;F.on("OptionSet",async(e,t,i)=>{let r=Array.from(this.optionCallbacks.get(e)??[]);await Promise.allSettled(r.map(o=>(async()=>{try{await Promise.resolve(o(t,i))}catch(s){this.nvim.errWriteLine(`Error on OptionSet '${e}': ${Jr(s)}`),dG.error("Error on OptionSet callback:",s)}})()))},null,this.disposables),F.on("GlobalChange",async(e,t,i)=>{let r=Array.from(this.globalCallbacks.get(e)??[]);await Promise.allSettled(r.map(o=>(async()=>{try{await Promise.resolve(o(t,i))}catch(s){this.nvim.errWriteLine(`Error on GlobalChange '${e}': ${Jr(s)}`),dG.error("Error on GlobalChange callback:",s)}})()))},null,this.disposables)}get options(){return Array.from(this.optionCallbacks.keys())}attach(e,t){this.nvim=e,this.env=t,this.watchOption("runtimepath",(i,r)=>{let o=i.split(","),a=r.split(",").filter(l=>!o.includes(l));a.length>0&&this._onDidRuntimePathChange.fire(a),this.env.runtimepath=r},this.disposables)}watchOption(e,t,i){let r=this.optionCallbacks.get(e);r||(r=new Set,this.optionCallbacks.set(e,r)),r.add(t);let o=`autocmd! coc_dynamic_option OptionSet ${e} call coc#rpc#notify('OptionSet',[expand('<amatch>'), v:option_old, v:option_new])`;this.nvim.command(o,!0);let s=p.Disposable.create(()=>{let a=this.optionCallbacks.get(e);a.delete(t),a.size===0&&this.nvim.command(`autocmd! coc_dynamic_option OptionSet ${e}`,!0)});return i&&i.push(s),s}watchGlobal(e,t,i){let{nvim:r}=this,o=this.globalCallbacks.get(e);o||(o=new Set,this.globalCallbacks.set(e,o)),o.add(t),r.call("coc#_watch",e,!0);let s=p.Disposable.create(()=>{let a=this.globalCallbacks.get(e);a.delete(t),a.size===0&&r.call("coc#_unwatch",e,!0)});return i&&i.push(s),s}dispose(){z(this.disposables),this._onDidRuntimePathChange.dispose()}}});function Hp(n){if(!(!n||!E.isAbsolute(n)))return{name:E.basename(n),uri:Y.file(n).toString()}}var yC,Hfe,Bfe,Wfe,qfe,Bp,vC=k(()=>{"use strict";$e();je();Ee();se();Le();qi();Is();pt();fe();Ye();ie();Xo();yC=(i=>(i[i.Buffer=0]="Buffer",i[i.LanguageServer=1]="LanguageServer",i[i.Global=2]="Global",i))(yC||{}),Hfe=te("core-workspaceFolder"),Bfe=[0,1,2],Wfe=ve(5e3,50);qfe=Pi.as(Ls.ExtensionContribution),Bp=class{constructor(e){this.configurations=e;this._onDidChangeWorkspaceFolders=new p.Emitter;this.onDidChangeWorkspaceFolders=this._onDidChangeWorkspaceFolders.event;this.rootPatterns=new Map;this._workspaceFolders=[];this._tokenSources=new Set;F.on("VimLeavePre",this.cancelAll,this),this.updateConfiguration(!0),this.configurations.onDidChange(t=>{(t.affectsConfiguration("workspace")||t.affectsConfiguration("coc.preferences"))&&this.updateConfiguration(!1)})}updateConfiguration(e){let t=this.configurations.initialConfiguration,i=t.get("workspace"),r=t.get("coc.preferences.rootPatterns");if(this.config={rootPatterns:le(r)?pe(i.rootPatterns):r,ignoredFiletypes:pe(i.ignoredFiletypes),bottomUpFiletypes:pe(i.bottomUpFiletypes),ignoredFolders:pe(i.ignoredFolders),workspaceFolderCheckCwd:!!i.workspaceFolderCheckCwd,workspaceFolderFallbackCwd:!!i.workspaceFolderFallbackCwd},e){let o=t.get("languageserver",{});this.addServerRootPatterns(o)}}addServerRootPatterns(e){for(let t of Object.keys(Ke(e))){let i=e[t],{filetypes:r,rootPatterns:o}=i;Array.isArray(r)&&!le(o)&&r.filter(s=>typeof s=="string").forEach(s=>{this.addRootPattern(s,o)})}}cancelAll(){for(let e of this._tokenSources)e.cancel()}setWorkspaceFolders(e){if(!e||!Array.isArray(e))return;let t=e.map(i=>Hp(i));this._workspaceFolders=t.filter(i=>i!=null)}getWorkspaceFolder(e){if(e.scheme!=="file")return;let t=Array.from(this._workspaceFolders).map(o=>Y.parse(o.uri).fsPath);t.sort((o,s)=>s.length-o.length);let i=e.fsPath,r=t.find(o=>St(o,i,!0));return Hp(r)}getRelativePath(e,t){let i,r="";if(typeof e=="string"?(i=Y.file(e),r=e):typeof e<"u"&&(i=e,r=e.fsPath),!i)return r;let o=this.getWorkspaceFolder(i);if(!o)return r;typeof t>"u"&&this._workspaceFolders&&(t=this._workspaceFolders.length>1);let s=E.relative(Y.parse(o.uri).fsPath,i.fsPath);return s=s==""?i.fsPath:s,t&&o.name&&(s=`${o.name}\/${s}`),s}get workspaceFolders(){return this._workspaceFolders}addRootPattern(e,t){let i=this.rootPatterns.get(e)??[];for(let r of t)i.includes(r)||i.push(r);this.rootPatterns.set(e,i)}resolveRoot(e,t,i,r){if(e.buftype!==""||e.schema!=="file")return null;let o=Y.parse(e.uri),s=La(o.fsPath)?E.normalize(o.fsPath):E.dirname(o.fsPath),{ignoredFiletypes:a,ignoredFolders:l,workspaceFolderCheckCwd:u,workspaceFolderFallbackCwd:c,bottomUpFiletypes:h}=this.config;if(a?.includes(e.filetype))return null;l=Array.isArray(l)?l.filter(g=>g&&g.length>0).map(g=>r(g)):[];let d=null;for(let g of Bfe){let f=this.getRootPatterns(e,g);if(f&&f.length){let m=h.includes("*")||h.includes(e.filetype),b=Xg(s,f,t,m,u,l);if(b){d=b;break}}}return!d&&c&&!$g(t,l)&&St(t,s,!0)&&(d=t),d&&this.addWorkspaceFolder(d,i),d}addWorkspaceFolder(e,t){let i=Hp(e);if(i)return this._workspaceFolders.findIndex(r=>r.uri==i.uri)==-1&&(this._workspaceFolders.push(i),t&&this._onDidChangeWorkspaceFolders.fire({added:[i],removed:[]})),i}renameWorkspaceFolder(e,t){let i=Hp(t);if(!i)return;let r=this._workspaceFolders.findIndex(s=>Y.parse(s.uri).fsPath==e);if(r==-1)return;let o=this.workspaceFolders[r];this._workspaceFolders.splice(r,1,i),this._onDidChangeWorkspaceFolders.fire({removed:[o],added:[i]})}removeWorkspaceFolder(e){let t=Hp(e);if(!t)return;let i=this._workspaceFolders.findIndex(r=>r.uri==t.uri);i!=-1&&(this._workspaceFolders.splice(i,1),this._onDidChangeWorkspaceFolders.fire({removed:[t],added:[]}))}getRootPatterns(e,t){return t==0?e.getVar("root_patterns",[])||[]:t==1?this.getServerRootPatterns(e.languageId):this.config.rootPatterns}reset(){this.rootPatterns.clear(),this._workspaceFolders=[]}getServerRootPatterns(e){let t=qfe.getRootPatternsByFiletype(e);return t=t.concat(pe(this.rootPatterns.get(e))),Oi(t)}checkFolder(e,t,i){return rJ(e,t,i)}async checkPatterns(e,t){if(le(e))return!1;let i=e.map(u=>Y.parse(u.uri).fsPath),r=!1,o=new p.CancellationTokenSource;this._tokenSources.add(o);let s=o.token,a=setTimeout(()=>{o.cancel()},Wfe),l=await Promise.allSettled(i.map(u=>this.checkFolder(u,t,s).then(c=>{this._tokenSources.delete(o),c&&(r=!0,clearTimeout(a),o.cancel())})));return clearTimeout(a),l.forEach(u=>{u.status==="rejected"&&!Lc(u.reason)&&Hfe.error("checkPatterns error:",t,u.reason)}),r}}});var Wp,pG=k(()=>{"use strict";je();se();Wp=class{constructor(e,t){this._create=e;this.disposables=[];this.itemsMap=new Map;let{disposables:i}=this;for(let r of t.attached())this.create(r);t.onDidOpenTextDocument(r=>{this.create(t.getDocument(r.bufnr))},null,i),t.onDidChangeDocument(r=>{this.onChange(r)},null,i),t.onDidCloseDocument(r=>{this.delete(r.bufnr)},null,i),F.on("LinesChanged",this.onTextChange,this,i)}onTextChange(e){let t=this.itemsMap.get(e);t&&typeof t.item.onTextChange=="function"&&t.item.onTextChange()}get items(){return Array.from(this.itemsMap.values()).map(e=>e.item)}getItem(e){if(typeof e=="number")return this.itemsMap.get(e)?.item;let t=Array.from(this.itemsMap.values()).find(i=>i.uri==e);return t?t.item:void 0}create(e){let t=this.itemsMap.get(e.bufnr);t&&t.item.dispose();let i=this._create(e);i&&this.itemsMap.set(e.bufnr,{uri:e.uri,item:i})}onChange(e){let t=this.itemsMap.get(e.bufnr);t&&typeof t.item.onChange=="function"&&t.item.onChange(e)}delete(e){let t=this.itemsMap.get(e);t&&(t.item.dispose(),this.itemsMap.delete(e))}reset(){for(let e of this.itemsMap.values())e.item.dispose();this.itemsMap.clear()}dispose(){z(this.disposables);for(let e of this.itemsMap.values())e.item.dispose();this._create=void 0,this.itemsMap.clear()}}});var qp,fG=k(()=>{"use strict";fe();Ye();qp=class{constructor(e){this.filepath=e}fetch(e){let t=this.load();if(!e)return t;let i=e.split(".");for(let r of i){if(typeof t[r]>"u")return;t=t[r]}return t}exists(e){let t=this.load(),i=e.split(".");for(let r of i){if(typeof t[r]>"u")return!1;t=t[r]}return!0}delete(e){let t=this.load(),i=t,r=e.split("."),o=r.length;for(let s=0;s<o&&!(typeof t[r[s]]>"u");s++){if(s==o-1){delete t[r[s]],B.writeFileSync(this.filepath,JSON.stringify(i,null,2),"utf8");break}t=t[r[s]]}}push(e,t){let i=Ke(this.load()),r=i,o=e.split("."),s=o.length;for(let a=0;a<s;a++){let l=o[a];if(a==s-1){r[l]=t;let u=E.dirname(this.filepath);B.mkdirSync(u,{recursive:!0}),B.writeFileSync(this.filepath,JSON.stringify(i,null,2));break}typeof r[l]>"u"&&(r[l]={}),r=r[l]}}load(){let e=E.dirname(this.filepath);if(!B.existsSync(e))return B.mkdirSync(e,{recursive:!0}),B.writeFileSync(this.filepath,"{}","utf8"),{};try{let i=B.readFileSync(this.filepath,"utf8");return JSON.parse(i.trim())}catch{return B.writeFileSync(this.filepath,"{}","utf8"),{}}}clear(){B.existsSync(this.filepath)&&B.writeFileSync(this.filepath,"{}","utf8")}destroy(){B.existsSync(this.filepath)&&B.unlinkSync(this.filepath)}}});var jE,Yp,OE=k(()=>{"use strict";gt();jE=["\\u280B","\\u2819","\\u2839","\\u2838","\\u283C","\\u2834","\\u2826","\\u2827","\\u2807","\\u280F"],Yp=class{constructor(){this.items=new Map;this.shownIds=new Set;this._text="";this.interval=setInterval(()=>{this.setStatusText()},100).unref()}dispose(){this.items.clear(),this.shownIds.clear(),clearInterval(this.interval)}reset(){this.items.clear(),this.shownIds.clear()}createStatusBarItem(e,t=!1){let i=mu(),r={text:"",priority:e,isProgress:t,show:()=>{this.shownIds.add(i),this.setStatusText()},hide:()=>{this.shownIds.delete(i),this.setStatusText()},dispose:()=>{this.shownIds.delete(i),this.items.delete(i),this.setStatusText()}};return this.items.set(i,r),r}getText(){if(this.shownIds.size==0)return"";let t=Math.floor(new Date().getMilliseconds()\/100),i="",r=[];for(let[o,s]of this.items)this.shownIds.has(o)&&r.push(s);r.sort((o,s)=>o.priority-s.priority);for(let o of r)o.isProgress?i=`${i} ${jE[t]} ${o.text}`:i=`${i} ${o.text}`;return i}setStatusText(){let e=this.getText(),{nvim:t}=this;e!=this._text&&t&&(this._text=e,t.pauseNotification(),this.nvim.setVar("coc_status",e,!0),this.nvim.call("coc#util#do_autocmd",["CocStatusChange"],!0),t.resumeNotification(!1,!0))}}});var Up,mG=k(()=>{"use strict";je();se();ie();Up=class{constructor(e,t){this.nvim=e;this.id=t;this.disposables=[];this._onExit=new p.Emitter;this._onStderr=new p.Emitter;this._onStdout=new p.Emitter;this.onExit=this._onExit.event;this.onStdout=this._onStdout.event;this.onStderr=this._onStderr.event;F.on("TaskExit",(i,r)=>{i==this.id&&this._onExit.fire(r)},null,this.disposables),F.on("TaskStderr",(i,r)=>{i==this.id&&this._onStderr.fire(r)},null,this.disposables),F.on("TaskStdout",(i,r)=>{i==this.id&&this._onStdout.fire(r)},null,this.disposables)}async start(e){let{nvim:t}=this;return await t.call("coc#task#start",[this.id,e])}async stop(){let{nvim:e}=this;await e.call("coc#task#stop",[this.id])}get running(){let{nvim:e}=this;return e.call("coc#task#running",[this.id])}dispose(){let{nvim:e}=this;e.call("coc#task#stop",[this.id],!0),this._onStdout.dispose(),this._onStderr.dispose(),this._onExit.dispose(),z(this.disposables)}}});var AE,Yfe,NE,y,be=k(()=>{"use strict";$e();Q5();V5();iX();U_();rX();IX();FX();jX();uG();jR();hG();uu();gG();vC();je();Ee();pG();fG();np();Qg();OE();X_();mG();oi();Is();fe();Ye();ru();AE=te("workspace"),Yfe=["showMessage","runTerminalCommand","openTerminal","showQuickpick","menuPick","openLocalConfig","showPrompt","createStatusBarItem","createOutputChannel","showOutputChannel","requestInput","echoLines","getCursorPosition","moveTo","getOffset","getSelectedRange","selectRange","createTerminal"],NE=class{constructor(){this.statusLine=new Yp;yJ().then(o=>{this.fuzzyExports=o}),dh.create().then(o=>{this.strWdith=o}),F.on("VimResized",(o,s)=>{Object.assign(Ke(this.env),{columns:o,lines:s})}),Object.defineProperty(this.statusLine,"nvim",{get:()=>this.nvim});let e=this.configurations=new Sp(BZ,new Dp(this));this.workspaceFolderControl=new Bp(this.configurations);let t=this.documentsManager=new _p(this.configurations,this.workspaceFolderControl);this.contentProvider=new kp(t),this.watchers=new Np,this.autocmds=new Tp,this.keymaps=new Ap,this.files=new Lp(t,this.configurations,this.workspaceFolderControl,this.keymaps),this.editors=new Rp(t),this.onDidRuntimePathChange=this.watchers.onDidRuntimePathChange,this.onDidChangeWorkspaceFolders=this.workspaceFolderControl.onDidChangeWorkspaceFolders,this.onDidChangeConfiguration=this.configurations.onDidChange,this.onDidOpenTextDocument=t.onDidOpenTextDocument,this.onDidChangeTextDocument=t.onDidChangeDocument,this.onDidCloseTextDocument=t.onDidCloseDocument,this.onDidSaveTextDocument=t.onDidSaveTextDocument,this.onWillSaveTextDocument=t.onWillSaveTextDocument,this.onDidCreateFiles=this.files.onDidCreateFiles,this.onDidRenameFiles=this.files.onDidRenameFiles,this.onDidDeleteFiles=this.files.onDidDeleteFiles,this.onWillCreateFiles=this.files.onWillCreateFiles,this.onWillRenameFiles=this.files.onWillRenameFiles,this.onWillDeleteFiles=this.files.onWillDeleteFiles;let r=e.initialConfiguration.get("coc.preferences").watchmanPath??WZ;this.fileSystemWatchers=new Op(this.workspaceFolderControl,r)}get initialConfiguration(){return this.configurations.initialConfiguration}async init(e){let{nvim:t}=this;for(let o of Yfe)Object.defineProperty(this,o,{get:()=>(...s)=>{let a=`$/;"	f
mfe.bfe	plugged/coc.nvim/build/index.js	/^`)}render(e,t=0,i=-1){e.setLines(this.lines,{start:t,end:i,strictIndexing:!1},!0);for(let r of this._highlights)e.addHighlight({hlGroup:r.hlGroup,colStart:r.colStart,colEnd:r.colEnd,line:t+r.lnum,srcId:-1})}}});function mfe(n,e){if(typeof n.lnum!="number")return;let t=n.lnum;if(e){let i=hE(e.edits);t=oC(oe.create(t-1,0),i).line+1}return t}function bfe(n,e){let t=new Map;for(let i of n){let r=yX(i)??null,o=r?e[r]?.label:null,s=t.get(o);s?s.push(i):t.set(o,[i])}return t}var ffe,Ep,MX=k(()=>{"use strict";ye();$e();je();se();Le();pt();fe();Kr();$a();ffe=0,Ep=class{constructor(e,t){this.nvim=e;this.keymaps=t;this.disposables=[];this.items=[];this.renameMap=new Map;F.on("BufUnload",i=>{i==this.bufnr&&this.dispose()},null,this.disposables)}addFile(e,t,i){this.items.push({index:t.length,filepath:e,lnum:i})}async show(e){let{nvim:t}=this,i=ffe++;t.pauseNotification(),t.command(`tabe +setl\\\\ buftype=nofile CocWorkspaceEdit${i}`,!0),t.command("setl bufhidden=wipe nolist",!0),t.command("setl nobuflisted wrap undolevels=-1 filetype=cocedits noswapfile",!0),await t.resumeNotification(!0);let r=await t.buffer,o=await t.call("getcwd");this.bufnr=r.id;let s=h=>{let d=Y.parse(h).fsPath;return St(o,d,!0)?E.relative(o,d):d},a=h=>E.isAbsolute(h)?h:E.join(o,h),l=new fn,u=pe(e.edit.documentChanges),c=bfe(u,e.edit.changeAnnotations??{});for(let[h,d]of c.entries()){h&&(l.addLine(h,"MoreMsg"),l.addLine(""));for(let g of d)if(xi.is(g)){let f=e.changes[g.textDocument.uri],m=s(g.textDocument.uri);l.addTexts([{text:"Change",hlGroup:"Title"},{text:" "},{text:m,hlGroup:"Directory"},{text:`:${f.lnum}`,hlGroup:"LineNr"}]),this.addFile(m,l,f.lnum),l.addLine(""),this.addChangedLines(l,f,m,f.lnum),l.addLine("")}else if(qr.is(g)||vr.is(g)){let f=vr.is(g)?"Delete":"Create",m=s(g.uri);l.addTexts([{text:f,hlGroup:"Title"},{text:" "},{text:m,hlGroup:"Directory"}]),this.addFile(m,l),l.addLine("")}else if(Yr.is(g)){let f=s(g.oldUri),m=s(g.newUri);l.addTexts([{text:"Rename",hlGroup:"Title"},{text:" "},{text:f,hlGroup:"Directory"},{text:"->",hlGroup:"Comment"},{text:m,hlGroup:"Directory"}]),this.renameMap.set(f,m),this.addFile(m,l),l.addLine("")}}t.pauseNotification(),l.render(r),r.setOption("modifiable",!1,!0),await t.resumeNotification(!0),this.disposables.push(this.keymaps.registerLocalKeymap(r.id,"n","<CR>",async()=>{let h=await t.call("line","."),d=await t.call("col","."),g;for(let D=this.items.length-1;D>=0;D--){let M=this.items[D];if(h>=M.index){g=M;break}}if(!g)return;let f=Y.file(a(g.filepath)).toString(),m=this.renameMap.has(g.filepath)?this.renameMap.get(g.filepath):g.filepath;await t.call("coc#util#open_file",["tab drop",a(m)]);let w=pe(e.edit.documentChanges).find(D=>xi.is(D)&&D.textDocument.uri==f),x=mfe(g,w);x!==void 0&&await t.call("cursor",[x,d]),t.redrawVim()},!0)),this.disposables.push(this.keymaps.registerLocalKeymap(r.id,"n","<esc>",async()=>{t.command("bwipeout!",!0)},!0))}addChangedLines(e,t,i,r){let o=Mi(t.oldLines.join(`$/;"	f
mfe.cC	plugged/coc.nvim/build/index.js	/^`).length-1,e.addText(a[1],"DiffDelete")):e.addText(a[1],"DiffAdd")}}dispose(){z(this.disposables)}}});function vfe(n,e,t){let i=E.join(n,e);if(typeof t!="string"){let r=t.baseUri.fsPath;if(!St(r,i))return!1;let o=E.relative(r,i);return wi(o,t.pattern,{dot:!0})}return wi(e,t,{dot:!0})}function cC(n){return Y.parse(n).fsPath}var yfe,Lp,jX=k(()=>{"use strict";ye();$e();je();Ee();MX();qi();pt();fe();ie();Ce();Kr();yfe=te("core-files"),Lp=class{constructor(e,t,i,r){this.documents=e;this.configurations=t;this.workspaceFolderControl=i;this.keymaps=r;this.operationTimeout=500;this._onDidCreateFiles=new p.Emitter;this._onDidRenameFiles=new p.Emitter;this._onDidDeleteFiles=new p.Emitter;this._onWillCreateFiles=new p.Emitter;this._onWillRenameFiles=new p.Emitter;this._onWillDeleteFiles=new p.Emitter;this.onDidCreateFiles=this._onDidCreateFiles.event;this.onDidRenameFiles=this._onDidRenameFiles.event;this.onDidDeleteFiles=this._onDidDeleteFiles.event;this.onWillCreateFiles=this._onWillCreateFiles.event;this.onWillRenameFiles=this._onWillRenameFiles.event;this.onWillDeleteFiles=this._onWillDeleteFiles.event}attach(e,t,i){this.nvim=e,this.env=t,this.window=i}async openTextDocument(e){e=typeof e=="string"?Y.file(e):e;let t=this.documents.getDocument(e.toString());if(t)return t;let i=e.scheme;if(i=="file"){if(!B.existsSync(e.fsPath))throw kv(e.fsPath);B.accessSync(e.fsPath,B.constants.R_OK)}return i=="untitled"?(await this.nvim.call("coc#util#open_file",["tab drop",e.path]),await this.documents.document):await this.loadResource(e.toString(),null)}async jumpTo(e,t,i){i||(i=this.configurations.initialConfiguration.get("coc.preferences.jumpCommand","edit"));let{nvim:r}=this,o=e instanceof Y?e:Y.parse(e),s=this.documents.getDocument(o.with({fragment:""}).toString()),a=s?s.bufnr:-1;if(!t&&o.scheme==="file"&&o.fragment){let l=o.fragment.split(","),u=parseInt(l[0],10);if(!isNaN(u)){let c=l.length>0&&\/^\\d+$\/.test(l[1])?parseInt(l[1],10):void 0;t=oe.create(u-1,c==null?0:c-1)}}if(a!=-1&&i=="edit"){if(r.pauseNotification(),r.command("silent! normal! m'",!0),r.command(`buffer ${a}`,!0),r.command("if &filetype ==# '' | filetype detect | endif",!0),t){let l=s.getline(t.line),u=ot(l,t.character)+1;r.call("cursor",[t.line+1,u],!0)}await r.resumeNotification(!0)}else{let{fsPath:l,scheme:u}=o,c=t==null?null:[t.line,t.character];if(u=="file"){let h=Vi(l);await this.nvim.call("coc#util#jump",[i,h,c])}else await this.nvim.call("coc#util#jump",[i,e.toString(),c])}}async openResource(e){let{nvim:t}=this,i=Y.parse(e);if(\/^https?\/.test(i.scheme)){await t.call("coc#ui#open_url",e);return}await this.jumpTo(e),await this.documents.document}async loadResource(e,t){let i=this.documents.getDocument(e);if(i)return i;t===void 0&&(t=this.configurations.getConfiguration("workspace").get("openResourceCommand","tab drop"));let r=Y.parse(e),o=r.scheme==="file"?r.fsPath:e,s;if(t){let a=await this.nvim.call("win_getid");s=await this.nvim.call("coc#util#open_file",[t,o]),await this.nvim.call("win_gotoid",[a])}else s=(await this.nvim.call("coc#ui#open_files",[[o]]))[0];return await this.documents.createDocument(s)}async loadResources(e){let{documents:t}=this,i=e.map(o=>{let s=Y.parse(o);return s.scheme=="file"?s.fsPath:o}),r=await this.nvim.call("coc#ui#open_files",[i]);return await Promise.all(r.map(o=>t.createDocument(o)))}async createFile(e,t={},i){let{nvim:r}=this,o=B.existsSync(e);if(o&&!t.overwrite&&!t.ignoreIfExists)throw Ak(e);if(!o||t.overwrite){let s=new p.CancellationTokenSource;await this.fireWaitUntilEvent(this._onWillCreateFiles,{files:[Y.file(e)],token:s.token},i),s.cancel();let a=E.dirname(e);if(!B.existsSync(a)){let c,h=a;for(;![".","\/",E.parse(a).root].includes(h);){if(B.existsSync(E.dirname(h))){c=h;break}h=E.dirname(h)}B.mkdirSync(a,{recursive:!0}),i&&i.push(()=>{B.rmSync(c,{force:!0,recursive:!0})})}B.writeFileSync(e,"","utf8"),i&&i.push(()=>{B.rmSync(e,{force:!0,recursive:!0})});let u=(await this.loadResource(e)).bufnr;i&&i.push(()=>(F.fire("BufUnload",[u]),r.command(`silent! bd! ${u}`))),this._onDidCreateFiles.fire({files:[Y.file(e)]})}}async deleteFile(e,t={},i){let{ignoreIfNotExists:r,recursive:o}=t,s=await or(e),a=s&&s.isDirectory();if(!s&&!r)throw kv(e);if(s==null)return;let l=Y.file(e);if(await this.fireWaitUntilEvent(this._onWillDeleteFiles,{files:[l]},i),!a){let h=await this.nvim.call("bufnr",[e]);h&&(F.fire("BufUnload",[h]),await this.nvim.command(`silent! bwipeout ${h}`),i&&i.push(()=>this.loadResource(l.toString())))}let u=E.join(Bt.tmpdir(),"coc-"+process.pid);B.mkdirSync(u,{recursive:!0});let c=Uy.createHash("md5").update(e).digest("hex");if(a&&o){let h=E.join(u,c),d=E.dirname(e);B.renameSync(e,h),i&&i.push(async()=>{B.mkdirSync(d,{recursive:!0}),B.renameSync(h,e)})}else if(a)B.rmdirSync(e),i&&i.push(()=>{B.mkdirSync(e)});else{let h=E.join(u,c),d=E.dirname(e);B.renameSync(e,h),i&&i.push(()=>{B.mkdirSync(d,{recursive:!0}),B.renameSync(h,e)})}this._onDidDeleteFiles.fire({files:[l]})}async renameFile(e,t,i={},r){let{nvim:o}=this,{overwrite:s,ignoreIfExists:a}=i;if(t===e)return;let l=B.existsSync(t);if(l&&a&&!s)return;if(l&&!s)throw Ak(t);let u=await or(e),c=u&&u.isDirectory()?0:await o.call("bufloaded",[e]);if(!c&&!u)throw kv(e);let h={newUri:Y.parse(t),oldUri:Y.parse(e)};if(i.skipEvent||await this.fireWaitUntilEvent(this._onWillRenameFiles,{files:[h]},r),c){let d=await o.call("coc#ui#rename_file",[e,t,u!=null]);await this.documents.onBufCreate(d)}else{if(u.isDirectory())for(let d of this.documents.attached("file")){let g=Y.parse(d.uri);if(St(e,g.fsPath,!1)){let f=g.fsPath.replace(e,t),m=await o.call("coc#ui#rename_file",[g.fsPath,f,!1]);await this.documents.onBufCreate(m)}}B.renameSync(e,t)}r&&r.push(()=>this.renameFile(t,e,{skipEvent:!0})),i.skipEvent||this._onDidRenameFiles.fire({files:[h]})}async promptAnnotations(e,t){let i=t?mX(e,t):[],r=[];for(let o of i){let s=t[o];await this.window.showMenuPicker(["Yes","No"],{position:"center",title:"Confirm edits",content:s.label+(s.description?" "+s.description:"")})!==0&&r.push(o)}return r}async applyEdit(e,t){let i=vX(e),r=[],o=!1;try{let s=await this.promptAnnotations(i,e.changeAnnotations);s.length>0&&(i=bX(i,s));let a={},l=await this.documents.getCurrentUri();o=i.every(u=>xi.is(u)&&u.textDocument.uri===l),this.validateChanges(i);for(let u of i)if(xi.is(u)){let{textDocument:c,edits:h}=u,{uri:d}=c,g=await this.loadResource(d),f=await g.applyEdits(h,!1,d===l);if(f){let m=g.version,{newText:b,range:w}=f;a[d]={uri:d,lnum:w.start.line+1,newLines:g.getLines(w.start.line,w.end.line),oldLines:b.endsWith(`$/;"	f
mfe.gC	plugged/coc.nvim/build/index.js	/^`)},r.push(async()=>{let x=this.documents.getDocument(d);!x||!x.attached||x.version!==m||(await x.applyEdits([f]),c.version=x.version)})}}else qr.is(u)?await this.createFile(cC(u.uri),u.options,r):vr.is(u)?await this.deleteFile(cC(u.uri),u.options,r):Yr.is(u)&&await this.renameFile(cC(u.oldUri),cC(u.newUri),u.options,r);if(r.length===0)return!0;t||(this.editState={edit:{documentChanges:i,changeAnnotations:e.changeAnnotations},changes:a,recovers:r,applied:!0}),this.nvim.redrawVim()}catch(s){return yfe.error("Error on applyEdits:",e,s),t||this.window.showErrorMessage(`Error on applyEdits: ${s}`),await this.undoChanges(r),!1}return t||o||this.window.showInformationMessage("Use ':wa' to save changes or ':CocCommand workspace.inspectEdit' to inspect."),!0}async undoChanges(e){for(;e.length>0;){let t=e.pop();await Promise.resolve(t())}}async inspectEdit(){if(!this.editState){this.window.showWarningMessage("No workspace edit to inspect");return}await new Ep(this.nvim,this.keymaps).show(this.editState)}async undoWorkspaceEdit(){let{editState:e}=this;if(!e||!e.applied){this.window.showWarningMessage("No workspace edit to undo");return}e.applied=!1,await this.undoChanges(e.recovers)}async redoWorkspaceEdit(){let{editState:e}=this;if(!e||e.applied){this.window.showWarningMessage("No workspace edit to redo");return}this.editState=void 0,await this.applyEdit(e.edit)}validateChanges(e){let{documents:t}=this;for(let i of e)if(xi.is(i)){let{uri:r,version:o}=i.textDocument,s=t.getDocument(r);if(typeof o=="number"&&o>0){if(!s)throw A4(r);if(s.version!=o)throw new Error(`${r} changed before apply edit`)}else if(!s&&!Kg(r))throw Pv(r)}else if(qr.is(i)||vr.is(i)){if(!Kg(i.uri))throw Pv(i.uri)}else if(Yr.is(i)&&(!Kg(i.oldUri)||!Kg(i.newUri)))throw Pv(i.oldUri)}async findFiles(e,t,i,r){let o=this.workspaceFolderControl.workspaceFolders;if(r?.isCancellationRequested||!o.length||i===0)return[];i=i??1\/0;let s=o.map(h=>Y.parse(h.uri).fsPath),a;typeof e!="string"?(a=e.pattern,s=[e.baseUri.fsPath]):a=e;let l=[],u=!1,c=new AbortController;r&&r.onCancellationRequested(()=>{c.abort()});for(let h of s){let d=await Zy.glob(a,{signal:c.signal,dot:!0,cwd:h,nodir:!0,absolute:!1});if(r?.isCancellationRequested)break;for(let g of d)if(!(t&&vfe(h,g,t))&&(l.push(Y.file(E.join(h,g))),l.length===i)){u=!0;break}if(u)break}return l}async fireWaitUntilEvent(e,t,i){let r=!0,o=[];e.fire({...t,waitUntil:s=>{if(!r)throw H4("waitUntil");let a=new Promise(u=>{setTimeout(u,this.operationTimeout)}),l=Promise.race([s,a]).then(u=>{if(u&&Hl.is(u))return this.applyEdit(u,!0)});o.push(l)}}),r=!1,await Promise.all(o)}}});function Ip(){return hC>dC.length-16&&(OX.default.randomFillSync(dC),hC=0),dC.slice(hC,hC+=16)}var OX,dC,hC,vE=k(()=>{OX=co(require("crypto")),dC=new Uint8Array(256),hC=dC.length});function gC(n,e=0){return mn[n[e+0]]+mn[n[e+1]]+mn[n[e+2]]+mn[n[e+3]]+"-"+mn[n[e+4]]+mn[n[e+5]]+"-"+mn[n[e+6]]+mn[n[e+7]]+"-"+mn[n[e+8]]+mn[n[e+9]]+"-"+mn[n[e+10]]+mn[n[e+11]]+mn[n[e+12]]+mn[n[e+13]]+mn[n[e+14]]+mn[n[e+15]]}var mn,wE=k(()=>{mn=[];for(let n=0;n<256;++n)mn.push((n+256).toString(16).slice(1))});function wfe(n,e,t){let i=e&&t||0,r=e||new Array(16);n=n||{};let o=n.node||AX,s=n.clockseq!==void 0?n.clockseq:xE;if(o==null||s==null){let d=n.random||(n.rng||Ip)();o==null&&(o=AX=[d[0]|1,d[1],d[2],d[3],d[4],d[5]]),s==null&&(s=xE=(d[6]<<8|d[7])&16383)}let a=n.msecs!==void 0?n.msecs:Date.now(),l=n.nsecs!==void 0?n.nsecs:SE+1,u=a-CE+(l-SE)\/1e4;if(u<0&&n.clockseq===void 0&&(s=s+1&16383),(u<0||a>CE)&&n.nsecs===void 0&&(l=0),l>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids\/sec");CE=a,SE=l,xE=s,a+=122192928e5;let c=((a&268435455)*1e4+l)%4294967296;r[i++]=c>>>24&255,r[i++]=c>>>16&255,r[i++]=c>>>8&255,r[i++]=c&255;let h=a\/4294967296*1e4&268435455;r[i++]=h>>>8&255,r[i++]=h&255,r[i++]=h>>>24&15|16,r[i++]=h>>>16&255,r[i++]=s>>>8|128,r[i++]=s&255;for(let d=0;d<6;++d)r[i+d]=o[d];return e||gC(r)}var AX,xE,CE,SE,mu,NX=k(()=>{vE();wE();CE=0,SE=0;mu=wfe});var HX,DE,BX=k(()=>{HX=co(require("crypto")),DE={randomUUID:HX.default.randomUUID}});function xfe(n,e,t){if(DE.randomUUID&&!e&&!n)return DE.randomUUID();n=n||{};let i=n.random||(n.rng||Ip)();if(i[6]=i[6]&15|64,i[8]=i[8]&63|128,e){t=t||0;for(let r=0;r<16;++r)e[t+r]=i[r];return e}return gC(i)}var Te,WX=k(()=>{BX();vE();wE();Te=xfe});var gt=k(()=>{NX();WX()});var UX=v((NNe,YX)=>{var TE=4294967296,qX=[];for(Lh=0;Lh<256;Lh++)qX[Lh]=(Lh>15?"":"0")+Lh.toString(16);var Lh,Fp=YX.exports=function(n,e){n instanceof Buffer?(this.buffer=n,this.offset=e||0):Object.prototype.toString.call(n)=="[object Uint8Array]"?(this.buffer=new Buffer(n),this.offset=e||0):(this.buffer=this.buffer||new Buffer(8),this.offset=0,this.setValue.apply(this,arguments))};Fp.MAX_INT=Math.pow(2,53);Fp.MIN_INT=-Math.pow(2,53);Fp.prototype={constructor:Fp,_2scomp:function(){for(var n=this.buffer,e=this.offset,t=1,i=e+7;i>=e;i--){var r=(n[i]^255)+t;n[i]=r&255,t=r>>8}},setValue:function(n,e){var t=!1;if(arguments.length==1)if(typeof n=="number"){if(t=n<0,n=Math.abs(n),e=n%TE,n=n\/TE,n>TE)throw new RangeError(n+" is outside Int64 range");n=n|0}else if(typeof n=="string")n=(n+"").replace(\/^0x\/,""),e=n.substr(-8),n=n.length>8?n.substr(0,n.length-8):"",n=parseInt(n,16),e=parseInt(e,16);else throw new Error(n+" must be a Number or String");for(var i=this.buffer,r=this.offset,o=7;o>=0;o--)i[r+o]=e&255,e=o==4?n:e>>>8;t&&this._2scomp()},toNumber:function(n){for(var e=this.buffer,t=this.offset,i=e[t]&128,r=0,o=1,s=7,a=1;s>=0;s--,a*=256){var l=e[t+s];i&&(l=(l^255)+o,o=l>>8,l=l&255),r+=l*a}return!n&&r>=Fp.MAX_INT?i?-1\/0:1\/0:i?-r:r},valueOf:function(){return this.toNumber(!1)},toString:function(n){return this.valueOf().toString(n||10)},toOctetString:function(n){for(var e=new Array(8),t=this.buffer,i=this.offset,r=0;r<8;r++)e[r]=qX[t[i+r]];return e.join(n||"")},toBuffer:function(n){if(n&&this.offset===0)return this.buffer;var e=new Buffer(8);return this.buffer.copy(e,0,this.offset,this.offset+8),e},copy:function(n,e){this.buffer.copy(n,e||0,this.offset,this.offset+8)},compare:function(n){if((this.buffer[this.offset]&128)!=(n.buffer[n.offset]&128))return n.buffer[n.offset]-this.buffer[this.offset];for(var e=0;e<8;e++)if(this.buffer[this.offset+e]!==n.buffer[n.offset+e])return this.buffer[this.offset+e]-n.buffer[n.offset+e];return 0},equals:function(n){return this.compare(n)===0},inspect:function(){return"[Int64 value:"+this+" octets:"+this.toOctetString(" ")+"]"}}});var tG=v(jp=>{var JX=require("events").EventEmitter,Cfe=require("util"),Sfe=require("os"),HNe=require("assert"),Mp=UX(),Xa=Sfe.endianness()=="BE";function $X(n){return Math.pow(2,Math.ceil(Math.log(n)\/Math.LN2))}function tn(n){this.buf=Buffer.alloc($X(n||8192)),this.readOffset=0,this.writeOffset=0}jp.Accumulator=tn;tn.prototype.writeAvail=function(){return this.buf.length-this.writeOffset};tn.prototype.readAvail=function(){return this.writeOffset-this.readOffset};tn.prototype.reserve=function(n){if(!(n<this.writeAvail())&&(this.readOffset>0&&(this.buf.copy(this.buf,0,this.readOffset,this.writeOffset),this.writeOffset-=this.readOffset,this.readOffset=0),!(n<this.writeAvail()))){var e=Buffer.alloc($X(this.buf.length+n-this.writeAvail()));this.buf.copy(e),this.buf=e}};tn.prototype.append=function(n){if(Buffer.isBuffer(n))this.reserve(n.length),n.copy(this.buf,this.writeOffset,0,n.length),this.writeOffset+=n.length;else{var e=Buffer.byteLength(n);this.reserve(e),this.buf.write(n,this.writeOffset),this.writeOffset+=e}};tn.prototype.assertReadableSize=function(n){if(this.readAvail()<n)throw new Error("wanted to read "+n+" bytes but only have "+this.readAvail())};tn.prototype.peekString=function(n){return this.assertReadableSize(n),this.buf.toString("utf-8",this.readOffset,this.readOffset+n)};tn.prototype.readString=function(n){var e=this.peekString(n);return this.readOffset+=n,e};tn.prototype.peekInt=function(n){switch(this.assertReadableSize(n),n){case 1:return this.buf.readInt8(this.readOffset,n);case 2:return Xa?this.buf.readInt16BE(this.readOffset,n):this.buf.readInt16LE(this.readOffset,n);case 4:return Xa?this.buf.readInt32BE(this.readOffset,n):this.buf.readInt32LE(this.readOffset,n);case 8:var e=this.buf.slice(this.readOffset,this.readOffset+8);return Xa?new Mp(e):new Mp(VX(e));default:throw new Error("invalid integer size "+n)}};tn.prototype.readInt=function(n){var e=this.peekInt(n);return e instanceof Mp&&isFinite(e.valueOf())&&(e=e.valueOf()),this.readOffset+=n,e};tn.prototype.peekDouble=function(){return this.assertReadableSize(8),Xa?this.buf.readDoubleBE(this.readOffset):this.buf.readDoubleLE(this.readOffset)};tn.prototype.readDouble=function(){var n=this.peekDouble();return this.readOffset+=8,n};tn.prototype.readAdvance=function(n){if(n>0)this.assertReadableSize(n);else if(n<0&&this.readOffset+n<0)throw new Error("advance with negative offset "+n+" would seek off the start of the buffer");this.readOffset+=n};tn.prototype.writeByte=function(n){this.reserve(1),this.buf.writeInt8(n,this.writeOffset),++this.writeOffset};tn.prototype.writeInt=function(n,e){switch(this.reserve(e),e){case 1:this.buf.writeInt8(n,this.writeOffset);break;case 2:Xa?this.buf.writeInt16BE(n,this.writeOffset):this.buf.writeInt16LE(n,this.writeOffset);break;case 4:Xa?this.buf.writeInt32BE(n,this.writeOffset):this.buf.writeInt32LE(n,this.writeOffset);break;default:throw new Error("unsupported integer size "+e)}this.writeOffset+=e};tn.prototype.writeDouble=function(n){this.reserve(8),Xa?this.buf.writeDoubleBE(n,this.writeOffset):this.buf.writeDoubleLE(n,this.writeOffset),this.writeOffset+=8};var PE=0,_E=1,RE=2,EE=3,LE=4,bC=5,mC=6,XX=7,GX=8,zX=9,KX=10,QX=11,Dfe=12,kE=0,ZX=1,Tfe=127,kfe=32767,Pfe=2147483647;function sr(){JX.call(this),this.buf=new tn,this.state=kE}Cfe.inherits(sr,JX);jp.BunserBuf=sr;sr.prototype.append=function(n,e){if(e)return this.buf.append(n),this.process(e);try{this.buf.append(n)}catch(t){this.emit("error",t);return}this.processLater()};sr.prototype.processLater=function(){var n=this;process.nextTick(function(){try{n.process(!1)}catch(e){n.emit("error",e)}})};sr.prototype.process=function(n){if(this.state==kE){if(this.buf.readAvail()<2)return;if(this.expectCode(0),this.expectCode(1),this.pduLen=this.decodeInt(!0),this.pduLen===!1){this.buf.readAdvance(-2);return}this.buf.reserve(this.pduLen),this.state=ZX}if(this.state==ZX){if(this.buf.readAvail()<this.pduLen)return;var e=this.decodeAny();if(n)return e;this.emit("value",e),this.state=kE}!n&&this.buf.readAvail()>0&&this.processLater()};sr.prototype.raise=function(n){throw new Error(n+", in Buffer of length "+this.buf.buf.length+" ("+this.buf.readAvail()+" readable) at offset "+this.buf.readOffset+" buffer: "+JSON.stringify(this.buf.buf.slice(this.buf.readOffset,this.buf.readOffset+32).toJSON()))};sr.prototype.expectCode=function(n){var e=this.buf.readInt(1);e!=n&&this.raise("expected bser opcode "+n+" but got "+e)};sr.prototype.decodeAny=function(){var n=this.buf.peekInt(1);switch(n){case EE:case LE:case bC:case mC:return this.decodeInt();case XX:return this.buf.readAdvance(1),this.buf.readDouble();case GX:return this.buf.readAdvance(1),!0;case zX:return this.buf.readAdvance(1),!1;case KX:return this.buf.readAdvance(1),null;case RE:return this.decodeString();case PE:return this.decodeArray();case _E:return this.decodeObject();case QX:return this.decodeTemplate();default:this.raise("unhandled bser opcode "+n)}};sr.prototype.decodeArray=function(){this.expectCode(PE);for(var n=this.decodeInt(),e=[],t=0;t<n;++t)e.push(this.decodeAny());return e};sr.prototype.decodeObject=function(){this.expectCode(_E);for(var n=this.decodeInt(),e={},t=0;t<n;++t){var i=this.decodeString(),r=this.decodeAny();e[i]=r}return e};sr.prototype.decodeTemplate=function(){this.expectCode(QX);for(var n=this.decodeArray(),e=this.decodeInt(),t=[],i=0;i<e;++i){for(var r={},o=0;o<n.length;++o){if(this.buf.peekInt(1)==Dfe){this.buf.readAdvance(1);continue}var s=this.decodeAny();r[n[o]]=s}t.push(r)}return t};sr.prototype.decodeString=function(){this.expectCode(RE);var n=this.decodeInt();return this.buf.readString(n)};sr.prototype.decodeInt=function(n){if(n&&this.buf.readAvail()<1)return!1;this.buf.assertReadableSize(1);var e=this.buf.peekInt(1),t=0;switch(e){case EE:t=1;break;case LE:t=2;break;case bC:t=4;break;case mC:t=8;break;default:this.raise("invalid bser int encoding "+e)}return n&&this.buf.readAvail()<1+t?!1:(this.buf.readAdvance(1),this.buf.readInt(t))};function _fe(n){var e=new sr,t=e.append(n,!0);if(e.buf.readAvail())throw Error("excess data found after input buffer, use BunserBuf instead");if(typeof t>"u")throw Error("no bser found in string and no error raised!?");return t}jp.loadFromBuffer=_fe;function VX(n){for(var e=Buffer.alloc(n.length),t=0;t<n.length;t++)e[t]=n[n.length-1-t];return e}function eG(n,e){var t=e.toBuffer();if(Xa){n.writeByte(mC),n.append(t);return}var i=VX(t);n.writeByte(mC),n.append(i)}function pC(n,e){var t=Math.abs(e);t<=Tfe?(n.writeByte(EE),n.writeInt(e,1)):t<=kfe?(n.writeByte(LE),n.writeInt(e,2)):t<=Pfe?(n.writeByte(bC),n.writeInt(e,4)):eG(n,new Mp(e))}function fC(n,e){switch(typeof e){case"number":isFinite(e)&&Math.floor(e)===e?pC(n,e):(n.writeByte(XX),n.writeDouble(e));return;case"string":n.writeByte(RE),pC(n,Buffer.byteLength(e)),n.append(e);return;case"boolean":n.writeByte(e?GX:zX);return;case"object":if(e===null){n.writeByte(KX);return}if(e instanceof Mp){eG(n,e);return}if(Array.isArray(e)){n.writeByte(PE),pC(n,e.length);for(var t=0;t<e.length;++t)fC(n,e[t]);return}n.writeByte(_E);for(var i=Object.keys(e),r=i.length,t=0;t<i.length;++t){var o=i[t],s=e[o];typeof s>"u"&&r--}pC(n,r);for(var t=0;t<i.length;++t){var o=i[t],s=e[o];if(!(typeof s>"u")){fC(n,o);try{fC(n,s)}catch(c){throw new Error(c.message+" (while serializing object property with name `"+o+"')")}}}return;default:throw new Error("cannot serialize type "+typeof e+" to BSER")}}function Rfe(n){var e=new tn;e.writeByte(0),e.writeByte(1),e.writeByte(bC),e.writeInt(0,4),fC(e,n);var t=e.writeOffset,i=t-7;return e.writeOffset=3,e.writeInt(i,4),e.writeOffset=t,e.buf.slice(0,t)}jp.dumpToBuffer=Rfe});var lG=v((WNe,aG)=>{"use strict";var Efe=require("net"),oG=require("events").EventEmitter,Lfe=require("util"),Ife=require("child_process"),sG=tG(),iG=["subscription","log"];function Hs(n){var e=this;oG.call(this),this.watchmanBinaryPath="watchman",n&&n.watchmanBinaryPath&&(this.watchmanBinaryPath=n.watchmanBinaryPath.trim()),this.commands=[]}Lfe.inherits(Hs,oG);aG.exports.Client=Hs;Hs.prototype.sendNextCommand=function(){this.currentCommand||(this.currentCommand=this.commands.shift(),this.currentCommand&&this.socket.write(sG.dumpToBuffer(this.currentCommand.cmd)))};Hs.prototype.cancelCommands=function(n){var e=new Error(n),t=this.commands;this.commands=[],this.currentCommand&&(t.unshift(this.currentCommand),this.currentCommand=null),t.forEach(function(i){i.cb(e)})};Hs.prototype.connect=function(){var n=this;function e(l){n.bunser=new sG.BunserBuf,n.bunser.on("value",function(u){for(var c=!1,h=0;h<iG.length;h++){var d=iG[h];d in u&&(c=d)}if(c)n.emit(c,u);else if(n.currentCommand){var g=n.currentCommand;if(n.currentCommand=null,"error"in u){var f=new Error(u.error);f.watchmanResponse=u,g.cb(f)}else g.cb(null,u)}n.sendNextCommand()}),n.bunser.on("error",function(u){n.emit("error",u)}),n.socket=Efe.createConnection(l),n.socket.on("connect",function(){n.connecting=!1,n.emit("connect"),n.sendNextCommand()}),n.socket.on("error",function(u){n.connecting=!1,n.emit("error",u)}),n.socket.on("data",function(u){n.bunser&&n.bunser.append(u)}),n.socket.on("end",function(){n.socket=null,n.bunser=null,n.cancelCommands("The watchman connection was closed"),n.emit("end")})}if(process.env.WATCHMAN_SOCK){e(process.env.WATCHMAN_SOCK);return}var t=["--no-pretty","get-sockname"],i=null,r=!1;function o(l){r||(r=!0,l.code==="EACCES"||l.errno==="EACCES"?l.message="The Watchman CLI is installed but cannot be spawned because of a permission problem":(l.code==="ENOENT"||l.errno==="ENOENT")&&(l.message="Watchman was not found in PATH.  See https:\/\/facebook.github.io\/watchman\/docs\/install.html for installation instructions"),console.error("Watchman: ",l.message),n.emit("error",l))}try{i=Ife.spawn(this.watchmanBinaryPath,t,{stdio:["ignore","pipe","pipe"],windowsHide:!0})}catch(l){o(l);return}var s=[],a=[];i.stdout.on("data",function(l){s.push(l)}),i.stderr.on("data",function(l){l=l.toString("utf8"),a.push(l),console.error(l)}),i.on("error",function(l){o(l)}),i.on("close",function(l,u){if(l!==0){o(new Error(n.watchmanBinaryPath+" "+t.join(" ")+" returned with exit code="+l+", signal="+u+", stderr= "+a.join("")));return}try{var c=JSON.parse(s.join(""));if("error"in c){var h=new Error(c.error);h.watchmanResponse=c,n.emit("error",h);return}e(c.sockname)}catch(d){n.emit("error",d)}})};Hs.prototype.command=function(n,e){if(e=e||function(){},this.commands.push({cmd:n,cb:e}),!this.socket){if(!this.connecting){this.connecting=!0,this.connect();return}return}this.sendNextCommand()};var nG={"cmd-watch-del-all":"3.1.1","cmd-watch-project":"3.1",relative_root:"3.3","term-dirname":"3.1","term-idirname":"3.1",wildmatch:"3.7"};function Ffe(n,e){n=n.split("."),e=e.split(".");for(var t=0;t<3;t++){var i=parseInt(n[t]||"0")-parseInt(e[t]||"0");if(i!=0)return i}return 0}function rG(n,e){return e in nG?Ffe(n,nG[e])>=0:!1}Hs.prototype._synthesizeCapabilityCheck=function(n,e,t){n.capabilities={};var i=n.version;return e.forEach(function(r){n.capabilities[r]=rG(i,r)}),t.forEach(function(r){var o=rG(i,r);n.capabilities[r]=o,o||(n.error="client required capability `"+r+"` is not supported by this server")}),n};Hs.prototype.capabilityCheck=function(n,e){var t=n.optional||[],i=n.required||[],r=this;this.command(["version",{optional:t,required:i}],function(o,s){if(o){e(o);return}if(!("capabilities"in s)&&(s=r._synthesizeCapabilityCheck(s,t,i),s.error)){o=new Error(s.error),o.watchmanResponse=s,e(o);return}e(null,s)})};Hs.prototype.end=function(){this.cancelCommands("The client was ended"),this.socket&&(this.socket.end(),this.socket=null),this.bunser=null}});function jfe(n){return!(n=="\/"||n=="\/tmp"||n=="\/private\/tmp"||n==Bt.tmpdir()||St(n,Bt.homedir(),!0)||E.parse(n).base==n)}var IE,Mfe,bu,FE=k(()=>{"use strict";gt();Ee();pt();fe();IE=te("core-watchman"),Mfe=["relative_root","cmd-watch-project","wildmatch","field-new"],bu=class n{constructor(e,t){this.channel=t;this._disposed=!1;let i=lG();this.client=new i.Client({watchmanBinaryPath:e}),this.client.setMaxListeners(300)}checkCapability(){let{client:e}=this;return new Promise((t,i)=>{e.capabilityCheck({optional:[],required:Mfe},(r,o)=>{if(r)return t(!1);let{capabilities:s}=o;for(let a of Object.keys(s))if(!s[a])return t(!1);t(!0)})})}async watchProject(e){let t=await this.command(["watch-project",e]),{watch:i,warning:r,relative_path:o}=t;return i?(r&&IE.warn(r),this.watch=i,this.relative_path=o,IE.info(`watchman watching project: ${e}`),this.appendOutput(`watchman watching project: ${e}`),!0):!1}command(e){return new Promise((t,i)=>{this.client.command(e,(r,o)=>{if(r)return i(r);t(o)})})}async subscribe(e,t){let{watch:i,relative_path:r}=this;if(!i)throw new Error("watchman not watching");let{clock:o}=await this.command(["clock",i]),s=mu(),a={expression:["allof",["match","**\/*","wholename"]],fields:["name","size","new","exists","type","mtime_ms","ctime_ms"],since:o},l=i;if(r&&(a.relative_root=r,l=E.join(i,r)),!this.client)return;let{subscribe:u}=await this.command(["subscribe",i,s,a]);return this.appendOutput(`subscribing "${e}" in ${l}`),this.client.on("subscription",c=>{if(!c||c.subscription!=s)return;let{files:h}=c;if(!h||(h=h.filter(g=>g.type=="f"&&wi(g.name,e,{dot:!0})),!h.length))return;let d=Object.assign({},c);this.relative_path&&(d.root=E.resolve(c.root,this.relative_path)),this.appendOutput(`file change detected: ${JSON.stringify(d,null,2)}`),t(d)}),{dispose:()=>{this.unsubscribe(u)},subscribe:u}}unsubscribe(e){if(this._disposed)return Promise.resolve();let{watch:t}=this;if(t)return this.appendOutput(`unsubscribe "${e}" in: ${t}`),this.command(["unsubscribe",t,e]).catch(i=>{i.message?.includes("The client was ended")&&IE.error(i)})}dispose(){this._disposed||(this._disposed=!0,this.client&&(this.client.end(),this.client=void 0))}appendOutput(e,t="Info"){this.channel&&this.channel.appendLine(`[${t}  - ${new Date().toLocaleTimeString()}] ${e}`)}static async createClient(e,t,i){if(!jfe(t))throw new Error(`Watch for ${t} is ignored`);let r;try{if(r=new n(e,i),!await r.checkCapability())throw new Error("required capabilities do not exist.");if(!await r.watchProject(t))throw new Error("unable to watch");return r}catch(o){throw r&&r.dispose(),o}}}});var Ofe,Op,ME,uG=k(()=>{"use strict";$e();Ee();se();Le();pt();fe();ie();FE();Ofe=te("fileSystemWatcher"),Op=class n{constructor(e,t){this.workspaceFolder=e;this.watchmanPath=t;this.clientsMap=new Map;this.disposables=[];this.creating=new Set;this._onDidCreateClient=new p.Emitter;this.disabled=!1;this.onDidCreateClient=this._onDidCreateClient.event}static{this.watchers=new Set}attach(e){this.channel=e;let t=i=>{let r=Y.parse(i.uri).fsPath;this.createClient(r)};this.workspaceFolder.workspaceFolders.forEach(i=>{t(i)}),this.workspaceFolder.onDidChangeWorkspaceFolders(i=>{i.added.forEach(r=>{t(r)}),i.removed.forEach(r=>{let o=Y.parse(r.uri).fsPath,s=this.clientsMap.get(o);s&&(this.clientsMap.delete(o),s.dispose())})},null,this.disposables)}waitClient(e){return this.clientsMap.has(e)?Promise.resolve():new Promise(t=>{let i=this.onDidCreateClient(r=>{r==e&&(i.dispose(),t())})})}async createClient(e){if(!(this.watchmanPath==null||this.has(e)||this.disabled))try{let t=await this.getWatchmanPath();this.creating.add(e);let i=await bu.createClient(t,e,this.channel);this.creating.delete(e),this.clientsMap.set(e,i);for(let r of n.watchers)r.listen(e,i);this._onDidCreateClient.fire(e)}catch(t){this.creating.delete(e),this.channel&&this.channel.appendLine(`Error on create watchman client: ${t}`)}}async getWatchmanPath(){let e=this.watchmanPath;return process.env.WATCHMAN_SOCK||(e=await Wo(this.watchmanPath,{all:!1})),e}has(e){let t=Array.from(this.clientsMap.keys());return t.push(...this.creating),t.some(i=>Di(i,e))}createFileSystemWatcher(e,t,i,r){let o=new ME(e,t,i,r),s=typeof e=="string"?void 0:e.baseUri.fsPath;for(let[a,l]of this.clientsMap.entries())s&&St(a,s,!0)&&(s=void 0),o.listen(a,l);return s&&this.createClient(s),n.watchers.add(o),o}dispose(){this._onDidCreateClient.dispose();for(let e of this.clientsMap.values())e&&e.dispose();this.clientsMap.clear(),n.watchers.clear(),z(this.disposables)}},ME=class{constructor(e,t,i,r){this.globPattern=e;this.ignoreCreateEvents=t;this.ignoreChangeEvents=i;this.ignoreDeleteEvents=r;this._onDidCreate=new p.Emitter;this._onDidChange=new p.Emitter;this._onDidDelete=new p.Emitter;this._onDidRename=new p.Emitter;this.disposables=[];this._disposed=!1;this.onDidCreate=this._onDidCreate.event;this.onDidChange=this._onDidChange.event;this.onDidDelete=this._onDidDelete.event;this.onDidRename=this._onDidRename.event;this._onDidListen=new p.Emitter;this.onDidListen=this._onDidListen.event}listen(e,t){let{globPattern:i,ignoreCreateEvents:r,ignoreChangeEvents:o,ignoreDeleteEvents:s}=this,a,l;if(typeof i=="string")a=i;else if(a=i.pattern,l=i.baseUri.fsPath,!St(e,l,!0))return;let u=c=>{let{root:h,files:d}=c;l&&!Di(h,l)?d=d.filter(g=>{if(g.type!="f")return!1;let f=E.join(h,g.name);return St(l,f)?wi(E.relative(l,f),a,{dot:!0}):!1}):d=d.filter(g=>g.type=="f"&&wi(g.name,a,{dot:!0}));for(let g of d){let f=Y.file(E.join(h,g.name));g.exists?g.new===!0?r||this._onDidCreate.fire(f):o||this._onDidChange.fire(f):s||this._onDidDelete.fire(f)}if(d.length==2&&d[0].exists!==d[1].exists){let g=d.find(m=>m.exists!==!0),f=d.find(m=>m.exists===!0);g.size==f.size&&this._onDidRename.fire({oldUri:Y.file(E.join(h,g.name)),newUri:Y.file(E.join(h,f.name))})}if(d.length>2&&d.length%2==0){let[g,f]=Gw(d,m=>m.exists===!1);if(g.length==f.length)for(let m of g){let b=f.find(w=>w.size==m.size&&w.mtime_ms==m.mtime_ms);b&&this._onDidRename.fire({oldUri:Y.file(E.join(h,m.name)),newUri:Y.file(E.join(h,b.name))})}}};t.subscribe(a,u).then(c=>{if(c){if(this._onDidListen.fire(),this.subscribe=c.subscribe,this._disposed)return c.dispose();this.disposables.push(c)}},c=>{c instanceof Error&&c.message.includes("client was ended")||Ofe.error(`Error on subscribe ${a}`,c)})}dispose(){this._disposed=!0,Op.watchers.delete(this),this._onDidRename.dispose(),this._onDidCreate.dispose(),this._onDidChange.dispose(),z(this.disposables)}}});function cG(n){return n=="n"||n=="o"||n=="x"||n=="v"?"<C-U>":n=="i"?"<C-o>":n=="s"?"<Esc>":""}function Nfe(n){return typeof n=="number"?n:F.bufnr}var Afe,Ap,hG=k(()=>{"use strict";je();Ee();ie();Ce();Afe=te("core-keymaps");Ap=class{constructor(){this.keymaps=new Map}attach(e){this.nvim=e}async doKeymap(e,t){let i=this.keymaps.get(e)??this.keymaps.get("coc-"+e);if(!i)return Afe.error(`keymap for ${e} not found`),t;let[r,o]=i,s=await Promise.resolve(r());return o&&await this.nvim.command(`silent! call repeat#set("\\\\<Plug>(coc-${e})", -1)`),s??t}registerKeymap(e,t,i,r={}){if(!t)throw new Error(`Invalid key ${t} of registerKeymap`);let o=`coc-${t}`;if(this.keymaps.has(o))throw new Error(`${t} already exists.`);let s=`<Plug>(${o})`;r=Object.assign({sync:!0,cancel:!0,silent:!0,repeat:!1},r);let{nvim:a}=this;this.keymaps.set(o,[i,!!r.repeat]);let l=r.sync?"request":"notify",u=r.cancel?1:0;for(let c of e)c=="i"?a.setKeymap(c,s,`coc#_insert_key('${l}', '${o}', ${u})`,{expr:!0,noremap:!0,silent:r.silent}):a.setKeymap(c,s,`:${cG(c)}call coc#rpc#${l}('doKeymap', ['${o}'])<cr>`,{noremap:!0,silent:r.silent});return p.Disposable.create(()=>{this.keymaps.delete(o);for(let c of e)a.deleteKeymap(c,s)})}registerExprKeymap(e,t,i,r=!1,o=!0){let s=Nfe(r),a=`${e}-${b_(t)}${r?`-${s}`:""}`,{nvim:l}=this,u;e=="i"?u=`coc#_insert_key('request', '${a}', ${o?"1":"0"})`:u=`coc#rpc#request('doKeymap', ['${a}'])`;let c={noremap:!0,silent:!0,expr:!0,nowait:!0};return r?l.createBuffer(s).setKeymap(e,t,u,c):l.setKeymap(e,t,u,c),this.keymaps.set(a,[i,!1]),p.Disposable.create(()=>{this.keymaps.delete(a),r?l.createBuffer(s).deleteKeymap(e,t):l.deleteKeymap(e,t)})}registerLocalKeymap(e,t,i,r,o){let{nvim:s}=this,a=s.createBuffer(e),l=`local-${e}-${t}-${b_(i)}`;this.keymaps.set(l,[r,!1]);let u=o?"notify":"request",c=cG(t);return a.setKeymap(t,i,`:${c}call coc#rpc#${u}('doKeymap', ['${l}'])<CR>`,{silent:!0,nowait:!0,noremap:!0}),p.Disposable.create(()=>{this.keymaps.delete(l),a.deleteKeymap(t,i)})}}});var dG,Np,gG=k(()=>{"use strict";je();Ee();se();ie();Ce();dG=te("watchers"),Np=class{constructor(){this.optionCallbacks=new Map;this.globalCallbacks=new Map;this.disposables=[];this._onDidRuntimePathChange=new p.Emitter;this.onDidRuntimePathChange=this._onDidRuntimePathChange.event;F.on("OptionSet",async(e,t,i)=>{let r=Array.from(this.optionCallbacks.get(e)??[]);await Promise.allSettled(r.map(o=>(async()=>{try{await Promise.resolve(o(t,i))}catch(s){this.nvim.errWriteLine(`Error on OptionSet '${e}': ${Jr(s)}`),dG.error("Error on OptionSet callback:",s)}})()))},null,this.disposables),F.on("GlobalChange",async(e,t,i)=>{let r=Array.from(this.globalCallbacks.get(e)??[]);await Promise.allSettled(r.map(o=>(async()=>{try{await Promise.resolve(o(t,i))}catch(s){this.nvim.errWriteLine(`Error on GlobalChange '${e}': ${Jr(s)}`),dG.error("Error on GlobalChange callback:",s)}})()))},null,this.disposables)}get options(){return Array.from(this.optionCallbacks.keys())}attach(e,t){this.nvim=e,this.env=t,this.watchOption("runtimepath",(i,r)=>{let o=i.split(","),a=r.split(",").filter(l=>!o.includes(l));a.length>0&&this._onDidRuntimePathChange.fire(a),this.env.runtimepath=r},this.disposables)}watchOption(e,t,i){let r=this.optionCallbacks.get(e);r||(r=new Set,this.optionCallbacks.set(e,r)),r.add(t);let o=`autocmd! coc_dynamic_option OptionSet ${e} call coc#rpc#notify('OptionSet',[expand('<amatch>'), v:option_old, v:option_new])`;this.nvim.command(o,!0);let s=p.Disposable.create(()=>{let a=this.optionCallbacks.get(e);a.delete(t),a.size===0&&this.nvim.command(`autocmd! coc_dynamic_option OptionSet ${e}`,!0)});return i&&i.push(s),s}watchGlobal(e,t,i){let{nvim:r}=this,o=this.globalCallbacks.get(e);o||(o=new Set,this.globalCallbacks.set(e,o)),o.add(t),r.call("coc#_watch",e,!0);let s=p.Disposable.create(()=>{let a=this.globalCallbacks.get(e);a.delete(t),a.size===0&&r.call("coc#_unwatch",e,!0)});return i&&i.push(s),s}dispose(){z(this.disposables),this._onDidRuntimePathChange.dispose()}}});function Hp(n){if(!(!n||!E.isAbsolute(n)))return{name:E.basename(n),uri:Y.file(n).toString()}}var yC,Hfe,Bfe,Wfe,qfe,Bp,vC=k(()=>{"use strict";$e();je();Ee();se();Le();qi();Is();pt();fe();Ye();ie();Xo();yC=(i=>(i[i.Buffer=0]="Buffer",i[i.LanguageServer=1]="LanguageServer",i[i.Global=2]="Global",i))(yC||{}),Hfe=te("core-workspaceFolder"),Bfe=[0,1,2],Wfe=ve(5e3,50);qfe=Pi.as(Ls.ExtensionContribution),Bp=class{constructor(e){this.configurations=e;this._onDidChangeWorkspaceFolders=new p.Emitter;this.onDidChangeWorkspaceFolders=this._onDidChangeWorkspaceFolders.event;this.rootPatterns=new Map;this._workspaceFolders=[];this._tokenSources=new Set;F.on("VimLeavePre",this.cancelAll,this),this.updateConfiguration(!0),this.configurations.onDidChange(t=>{(t.affectsConfiguration("workspace")||t.affectsConfiguration("coc.preferences"))&&this.updateConfiguration(!1)})}updateConfiguration(e){let t=this.configurations.initialConfiguration,i=t.get("workspace"),r=t.get("coc.preferences.rootPatterns");if(this.config={rootPatterns:le(r)?pe(i.rootPatterns):r,ignoredFiletypes:pe(i.ignoredFiletypes),bottomUpFiletypes:pe(i.bottomUpFiletypes),ignoredFolders:pe(i.ignoredFolders),workspaceFolderCheckCwd:!!i.workspaceFolderCheckCwd,workspaceFolderFallbackCwd:!!i.workspaceFolderFallbackCwd},e){let o=t.get("languageserver",{});this.addServerRootPatterns(o)}}addServerRootPatterns(e){for(let t of Object.keys(Ke(e))){let i=e[t],{filetypes:r,rootPatterns:o}=i;Array.isArray(r)&&!le(o)&&r.filter(s=>typeof s=="string").forEach(s=>{this.addRootPattern(s,o)})}}cancelAll(){for(let e of this._tokenSources)e.cancel()}setWorkspaceFolders(e){if(!e||!Array.isArray(e))return;let t=e.map(i=>Hp(i));this._workspaceFolders=t.filter(i=>i!=null)}getWorkspaceFolder(e){if(e.scheme!=="file")return;let t=Array.from(this._workspaceFolders).map(o=>Y.parse(o.uri).fsPath);t.sort((o,s)=>s.length-o.length);let i=e.fsPath,r=t.find(o=>St(o,i,!0));return Hp(r)}getRelativePath(e,t){let i,r="";if(typeof e=="string"?(i=Y.file(e),r=e):typeof e<"u"&&(i=e,r=e.fsPath),!i)return r;let o=this.getWorkspaceFolder(i);if(!o)return r;typeof t>"u"&&this._workspaceFolders&&(t=this._workspaceFolders.length>1);let s=E.relative(Y.parse(o.uri).fsPath,i.fsPath);return s=s==""?i.fsPath:s,t&&o.name&&(s=`${o.name}\/${s}`),s}get workspaceFolders(){return this._workspaceFolders}addRootPattern(e,t){let i=this.rootPatterns.get(e)??[];for(let r of t)i.includes(r)||i.push(r);this.rootPatterns.set(e,i)}resolveRoot(e,t,i,r){if(e.buftype!==""||e.schema!=="file")return null;let o=Y.parse(e.uri),s=La(o.fsPath)?E.normalize(o.fsPath):E.dirname(o.fsPath),{ignoredFiletypes:a,ignoredFolders:l,workspaceFolderCheckCwd:u,workspaceFolderFallbackCwd:c,bottomUpFiletypes:h}=this.config;if(a?.includes(e.filetype))return null;l=Array.isArray(l)?l.filter(g=>g&&g.length>0).map(g=>r(g)):[];let d=null;for(let g of Bfe){let f=this.getRootPatterns(e,g);if(f&&f.length){let m=h.includes("*")||h.includes(e.filetype),b=Xg(s,f,t,m,u,l);if(b){d=b;break}}}return!d&&c&&!$g(t,l)&&St(t,s,!0)&&(d=t),d&&this.addWorkspaceFolder(d,i),d}addWorkspaceFolder(e,t){let i=Hp(e);if(i)return this._workspaceFolders.findIndex(r=>r.uri==i.uri)==-1&&(this._workspaceFolders.push(i),t&&this._onDidChangeWorkspaceFolders.fire({added:[i],removed:[]})),i}renameWorkspaceFolder(e,t){let i=Hp(t);if(!i)return;let r=this._workspaceFolders.findIndex(s=>Y.parse(s.uri).fsPath==e);if(r==-1)return;let o=this.workspaceFolders[r];this._workspaceFolders.splice(r,1,i),this._onDidChangeWorkspaceFolders.fire({removed:[o],added:[i]})}removeWorkspaceFolder(e){let t=Hp(e);if(!t)return;let i=this._workspaceFolders.findIndex(r=>r.uri==t.uri);i!=-1&&(this._workspaceFolders.splice(i,1),this._onDidChangeWorkspaceFolders.fire({removed:[t],added:[]}))}getRootPatterns(e,t){return t==0?e.getVar("root_patterns",[])||[]:t==1?this.getServerRootPatterns(e.languageId):this.config.rootPatterns}reset(){this.rootPatterns.clear(),this._workspaceFolders=[]}getServerRootPatterns(e){let t=qfe.getRootPatternsByFiletype(e);return t=t.concat(pe(this.rootPatterns.get(e))),Oi(t)}checkFolder(e,t,i){return rJ(e,t,i)}async checkPatterns(e,t){if(le(e))return!1;let i=e.map(u=>Y.parse(u.uri).fsPath),r=!1,o=new p.CancellationTokenSource;this._tokenSources.add(o);let s=o.token,a=setTimeout(()=>{o.cancel()},Wfe),l=await Promise.allSettled(i.map(u=>this.checkFolder(u,t,s).then(c=>{this._tokenSources.delete(o),c&&(r=!0,clearTimeout(a),o.cancel())})));return clearTimeout(a),l.forEach(u=>{u.status==="rejected"&&!Lc(u.reason)&&Hfe.error("checkPatterns error:",t,u.reason)}),r}}});var Wp,pG=k(()=>{"use strict";je();se();Wp=class{constructor(e,t){this._create=e;this.disposables=[];this.itemsMap=new Map;let{disposables:i}=this;for(let r of t.attached())this.create(r);t.onDidOpenTextDocument(r=>{this.create(t.getDocument(r.bufnr))},null,i),t.onDidChangeDocument(r=>{this.onChange(r)},null,i),t.onDidCloseDocument(r=>{this.delete(r.bufnr)},null,i),F.on("LinesChanged",this.onTextChange,this,i)}onTextChange(e){let t=this.itemsMap.get(e);t&&typeof t.item.onTextChange=="function"&&t.item.onTextChange()}get items(){return Array.from(this.itemsMap.values()).map(e=>e.item)}getItem(e){if(typeof e=="number")return this.itemsMap.get(e)?.item;let t=Array.from(this.itemsMap.values()).find(i=>i.uri==e);return t?t.item:void 0}create(e){let t=this.itemsMap.get(e.bufnr);t&&t.item.dispose();let i=this._create(e);i&&this.itemsMap.set(e.bufnr,{uri:e.uri,item:i})}onChange(e){let t=this.itemsMap.get(e.bufnr);t&&typeof t.item.onChange=="function"&&t.item.onChange(e)}delete(e){let t=this.itemsMap.get(e);t&&(t.item.dispose(),this.itemsMap.delete(e))}reset(){for(let e of this.itemsMap.values())e.item.dispose();this.itemsMap.clear()}dispose(){z(this.disposables);for(let e of this.itemsMap.values())e.item.dispose();this._create=void 0,this.itemsMap.clear()}}});var qp,fG=k(()=>{"use strict";fe();Ye();qp=class{constructor(e){this.filepath=e}fetch(e){let t=this.load();if(!e)return t;let i=e.split(".");for(let r of i){if(typeof t[r]>"u")return;t=t[r]}return t}exists(e){let t=this.load(),i=e.split(".");for(let r of i){if(typeof t[r]>"u")return!1;t=t[r]}return!0}delete(e){let t=this.load(),i=t,r=e.split("."),o=r.length;for(let s=0;s<o&&!(typeof t[r[s]]>"u");s++){if(s==o-1){delete t[r[s]],B.writeFileSync(this.filepath,JSON.stringify(i,null,2),"utf8");break}t=t[r[s]]}}push(e,t){let i=Ke(this.load()),r=i,o=e.split("."),s=o.length;for(let a=0;a<s;a++){let l=o[a];if(a==s-1){r[l]=t;let u=E.dirname(this.filepath);B.mkdirSync(u,{recursive:!0}),B.writeFileSync(this.filepath,JSON.stringify(i,null,2));break}typeof r[l]>"u"&&(r[l]={}),r=r[l]}}load(){let e=E.dirname(this.filepath);if(!B.existsSync(e))return B.mkdirSync(e,{recursive:!0}),B.writeFileSync(this.filepath,"{}","utf8"),{};try{let i=B.readFileSync(this.filepath,"utf8");return JSON.parse(i.trim())}catch{return B.writeFileSync(this.filepath,"{}","utf8"),{}}}clear(){B.existsSync(this.filepath)&&B.writeFileSync(this.filepath,"{}","utf8")}destroy(){B.existsSync(this.filepath)&&B.unlinkSync(this.filepath)}}});var jE,Yp,OE=k(()=>{"use strict";gt();jE=["\\u280B","\\u2819","\\u2839","\\u2838","\\u283C","\\u2834","\\u2826","\\u2827","\\u2807","\\u280F"],Yp=class{constructor(){this.items=new Map;this.shownIds=new Set;this._text="";this.interval=setInterval(()=>{this.setStatusText()},100).unref()}dispose(){this.items.clear(),this.shownIds.clear(),clearInterval(this.interval)}reset(){this.items.clear(),this.shownIds.clear()}createStatusBarItem(e,t=!1){let i=mu(),r={text:"",priority:e,isProgress:t,show:()=>{this.shownIds.add(i),this.setStatusText()},hide:()=>{this.shownIds.delete(i),this.setStatusText()},dispose:()=>{this.shownIds.delete(i),this.items.delete(i),this.setStatusText()}};return this.items.set(i,r),r}getText(){if(this.shownIds.size==0)return"";let t=Math.floor(new Date().getMilliseconds()\/100),i="",r=[];for(let[o,s]of this.items)this.shownIds.has(o)&&r.push(s);r.sort((o,s)=>o.priority-s.priority);for(let o of r)o.isProgress?i=`${i} ${jE[t]} ${o.text}`:i=`${i} ${o.text}`;return i}setStatusText(){let e=this.getText(),{nvim:t}=this;e!=this._text&&t&&(this._text=e,t.pauseNotification(),this.nvim.setVar("coc_status",e,!0),this.nvim.call("coc#util#do_autocmd",["CocStatusChange"],!0),t.resumeNotification(!1,!0))}}});var Up,mG=k(()=>{"use strict";je();se();ie();Up=class{constructor(e,t){this.nvim=e;this.id=t;this.disposables=[];this._onExit=new p.Emitter;this._onStderr=new p.Emitter;this._onStdout=new p.Emitter;this.onExit=this._onExit.event;this.onStdout=this._onStdout.event;this.onStderr=this._onStderr.event;F.on("TaskExit",(i,r)=>{i==this.id&&this._onExit.fire(r)},null,this.disposables),F.on("TaskStderr",(i,r)=>{i==this.id&&this._onStderr.fire(r)},null,this.disposables),F.on("TaskStdout",(i,r)=>{i==this.id&&this._onStdout.fire(r)},null,this.disposables)}async start(e){let{nvim:t}=this;return await t.call("coc#task#start",[this.id,e])}async stop(){let{nvim:e}=this;await e.call("coc#task#stop",[this.id])}get running(){let{nvim:e}=this;return e.call("coc#task#running",[this.id])}dispose(){let{nvim:e}=this;e.call("coc#task#stop",[this.id],!0),this._onStdout.dispose(),this._onStderr.dispose(),this._onExit.dispose(),z(this.disposables)}}});var AE,Yfe,NE,y,be=k(()=>{"use strict";$e();Q5();V5();iX();U_();rX();IX();FX();jX();uG();jR();hG();uu();gG();vC();je();Ee();pG();fG();np();Qg();OE();X_();mG();oi();Is();fe();Ye();ru();AE=te("workspace"),Yfe=["showMessage","runTerminalCommand","openTerminal","showQuickpick","menuPick","openLocalConfig","showPrompt","createStatusBarItem","createOutputChannel","showOutputChannel","requestInput","echoLines","getCursorPosition","moveTo","getOffset","getSelectedRange","selectRange","createTerminal"],NE=class{constructor(){this.statusLine=new Yp;yJ().then(o=>{this.fuzzyExports=o}),dh.create().then(o=>{this.strWdith=o}),F.on("VimResized",(o,s)=>{Object.assign(Ke(this.env),{columns:o,lines:s})}),Object.defineProperty(this.statusLine,"nvim",{get:()=>this.nvim});let e=this.configurations=new Sp(BZ,new Dp(this));this.workspaceFolderControl=new Bp(this.configurations);let t=this.documentsManager=new _p(this.configurations,this.workspaceFolderControl);this.contentProvider=new kp(t),this.watchers=new Np,this.autocmds=new Tp,this.keymaps=new Ap,this.files=new Lp(t,this.configurations,this.workspaceFolderControl,this.keymaps),this.editors=new Rp(t),this.onDidRuntimePathChange=this.watchers.onDidRuntimePathChange,this.onDidChangeWorkspaceFolders=this.workspaceFolderControl.onDidChangeWorkspaceFolders,this.onDidChangeConfiguration=this.configurations.onDidChange,this.onDidOpenTextDocument=t.onDidOpenTextDocument,this.onDidChangeTextDocument=t.onDidChangeDocument,this.onDidCloseTextDocument=t.onDidCloseDocument,this.onDidSaveTextDocument=t.onDidSaveTextDocument,this.onWillSaveTextDocument=t.onWillSaveTextDocument,this.onDidCreateFiles=this.files.onDidCreateFiles,this.onDidRenameFiles=this.files.onDidRenameFiles,this.onDidDeleteFiles=this.files.onDidDeleteFiles,this.onWillCreateFiles=this.files.onWillCreateFiles,this.onWillRenameFiles=this.files.onWillRenameFiles,this.onWillDeleteFiles=this.files.onWillDeleteFiles;let r=e.initialConfiguration.get("coc.preferences").watchmanPath??WZ;this.fileSystemWatchers=new Op(this.workspaceFolderControl,r)}get initialConfiguration(){return this.configurations.initialConfiguration}async init(e){let{nvim:t}=this;for(let o of Yfe)Object.defineProperty(this,o,{get:()=>(...s)=>{let a=`$/;"	f
mfe.vfe	plugged/coc.nvim/build/index.js	/^`).length-1,e.addText(a[1],"DiffDelete")):e.addText(a[1],"DiffAdd")}}dispose(){z(this.disposables)}}});function vfe(n,e,t){let i=E.join(n,e);if(typeof t!="string"){let r=t.baseUri.fsPath;if(!St(r,i))return!1;let o=E.relative(r,i);return wi(o,t.pattern,{dot:!0})}return wi(e,t,{dot:!0})}function cC(n){return Y.parse(n).fsPath}var yfe,Lp,jX=k(()=>{"use strict";ye();$e();je();Ee();MX();qi();pt();fe();ie();Ce();Kr();yfe=te("core-files"),Lp=class{constructor(e,t,i,r){this.documents=e;this.configurations=t;this.workspaceFolderControl=i;this.keymaps=r;this.operationTimeout=500;this._onDidCreateFiles=new p.Emitter;this._onDidRenameFiles=new p.Emitter;this._onDidDeleteFiles=new p.Emitter;this._onWillCreateFiles=new p.Emitter;this._onWillRenameFiles=new p.Emitter;this._onWillDeleteFiles=new p.Emitter;this.onDidCreateFiles=this._onDidCreateFiles.event;this.onDidRenameFiles=this._onDidRenameFiles.event;this.onDidDeleteFiles=this._onDidDeleteFiles.event;this.onWillCreateFiles=this._onWillCreateFiles.event;this.onWillRenameFiles=this._onWillRenameFiles.event;this.onWillDeleteFiles=this._onWillDeleteFiles.event}attach(e,t,i){this.nvim=e,this.env=t,this.window=i}async openTextDocument(e){e=typeof e=="string"?Y.file(e):e;let t=this.documents.getDocument(e.toString());if(t)return t;let i=e.scheme;if(i=="file"){if(!B.existsSync(e.fsPath))throw kv(e.fsPath);B.accessSync(e.fsPath,B.constants.R_OK)}return i=="untitled"?(await this.nvim.call("coc#util#open_file",["tab drop",e.path]),await this.documents.document):await this.loadResource(e.toString(),null)}async jumpTo(e,t,i){i||(i=this.configurations.initialConfiguration.get("coc.preferences.jumpCommand","edit"));let{nvim:r}=this,o=e instanceof Y?e:Y.parse(e),s=this.documents.getDocument(o.with({fragment:""}).toString()),a=s?s.bufnr:-1;if(!t&&o.scheme==="file"&&o.fragment){let l=o.fragment.split(","),u=parseInt(l[0],10);if(!isNaN(u)){let c=l.length>0&&\/^\\d+$\/.test(l[1])?parseInt(l[1],10):void 0;t=oe.create(u-1,c==null?0:c-1)}}if(a!=-1&&i=="edit"){if(r.pauseNotification(),r.command("silent! normal! m'",!0),r.command(`buffer ${a}`,!0),r.command("if &filetype ==# '' | filetype detect | endif",!0),t){let l=s.getline(t.line),u=ot(l,t.character)+1;r.call("cursor",[t.line+1,u],!0)}await r.resumeNotification(!0)}else{let{fsPath:l,scheme:u}=o,c=t==null?null:[t.line,t.character];if(u=="file"){let h=Vi(l);await this.nvim.call("coc#util#jump",[i,h,c])}else await this.nvim.call("coc#util#jump",[i,e.toString(),c])}}async openResource(e){let{nvim:t}=this,i=Y.parse(e);if(\/^https?\/.test(i.scheme)){await t.call("coc#ui#open_url",e);return}await this.jumpTo(e),await this.documents.document}async loadResource(e,t){let i=this.documents.getDocument(e);if(i)return i;t===void 0&&(t=this.configurations.getConfiguration("workspace").get("openResourceCommand","tab drop"));let r=Y.parse(e),o=r.scheme==="file"?r.fsPath:e,s;if(t){let a=await this.nvim.call("win_getid");s=await this.nvim.call("coc#util#open_file",[t,o]),await this.nvim.call("win_gotoid",[a])}else s=(await this.nvim.call("coc#ui#open_files",[[o]]))[0];return await this.documents.createDocument(s)}async loadResources(e){let{documents:t}=this,i=e.map(o=>{let s=Y.parse(o);return s.scheme=="file"?s.fsPath:o}),r=await this.nvim.call("coc#ui#open_files",[i]);return await Promise.all(r.map(o=>t.createDocument(o)))}async createFile(e,t={},i){let{nvim:r}=this,o=B.existsSync(e);if(o&&!t.overwrite&&!t.ignoreIfExists)throw Ak(e);if(!o||t.overwrite){let s=new p.CancellationTokenSource;await this.fireWaitUntilEvent(this._onWillCreateFiles,{files:[Y.file(e)],token:s.token},i),s.cancel();let a=E.dirname(e);if(!B.existsSync(a)){let c,h=a;for(;![".","\/",E.parse(a).root].includes(h);){if(B.existsSync(E.dirname(h))){c=h;break}h=E.dirname(h)}B.mkdirSync(a,{recursive:!0}),i&&i.push(()=>{B.rmSync(c,{force:!0,recursive:!0})})}B.writeFileSync(e,"","utf8"),i&&i.push(()=>{B.rmSync(e,{force:!0,recursive:!0})});let u=(await this.loadResource(e)).bufnr;i&&i.push(()=>(F.fire("BufUnload",[u]),r.command(`silent! bd! ${u}`))),this._onDidCreateFiles.fire({files:[Y.file(e)]})}}async deleteFile(e,t={},i){let{ignoreIfNotExists:r,recursive:o}=t,s=await or(e),a=s&&s.isDirectory();if(!s&&!r)throw kv(e);if(s==null)return;let l=Y.file(e);if(await this.fireWaitUntilEvent(this._onWillDeleteFiles,{files:[l]},i),!a){let h=await this.nvim.call("bufnr",[e]);h&&(F.fire("BufUnload",[h]),await this.nvim.command(`silent! bwipeout ${h}`),i&&i.push(()=>this.loadResource(l.toString())))}let u=E.join(Bt.tmpdir(),"coc-"+process.pid);B.mkdirSync(u,{recursive:!0});let c=Uy.createHash("md5").update(e).digest("hex");if(a&&o){let h=E.join(u,c),d=E.dirname(e);B.renameSync(e,h),i&&i.push(async()=>{B.mkdirSync(d,{recursive:!0}),B.renameSync(h,e)})}else if(a)B.rmdirSync(e),i&&i.push(()=>{B.mkdirSync(e)});else{let h=E.join(u,c),d=E.dirname(e);B.renameSync(e,h),i&&i.push(()=>{B.mkdirSync(d,{recursive:!0}),B.renameSync(h,e)})}this._onDidDeleteFiles.fire({files:[l]})}async renameFile(e,t,i={},r){let{nvim:o}=this,{overwrite:s,ignoreIfExists:a}=i;if(t===e)return;let l=B.existsSync(t);if(l&&a&&!s)return;if(l&&!s)throw Ak(t);let u=await or(e),c=u&&u.isDirectory()?0:await o.call("bufloaded",[e]);if(!c&&!u)throw kv(e);let h={newUri:Y.parse(t),oldUri:Y.parse(e)};if(i.skipEvent||await this.fireWaitUntilEvent(this._onWillRenameFiles,{files:[h]},r),c){let d=await o.call("coc#ui#rename_file",[e,t,u!=null]);await this.documents.onBufCreate(d)}else{if(u.isDirectory())for(let d of this.documents.attached("file")){let g=Y.parse(d.uri);if(St(e,g.fsPath,!1)){let f=g.fsPath.replace(e,t),m=await o.call("coc#ui#rename_file",[g.fsPath,f,!1]);await this.documents.onBufCreate(m)}}B.renameSync(e,t)}r&&r.push(()=>this.renameFile(t,e,{skipEvent:!0})),i.skipEvent||this._onDidRenameFiles.fire({files:[h]})}async promptAnnotations(e,t){let i=t?mX(e,t):[],r=[];for(let o of i){let s=t[o];await this.window.showMenuPicker(["Yes","No"],{position:"center",title:"Confirm edits",content:s.label+(s.description?" "+s.description:"")})!==0&&r.push(o)}return r}async applyEdit(e,t){let i=vX(e),r=[],o=!1;try{let s=await this.promptAnnotations(i,e.changeAnnotations);s.length>0&&(i=bX(i,s));let a={},l=await this.documents.getCurrentUri();o=i.every(u=>xi.is(u)&&u.textDocument.uri===l),this.validateChanges(i);for(let u of i)if(xi.is(u)){let{textDocument:c,edits:h}=u,{uri:d}=c,g=await this.loadResource(d),f=await g.applyEdits(h,!1,d===l);if(f){let m=g.version,{newText:b,range:w}=f;a[d]={uri:d,lnum:w.start.line+1,newLines:g.getLines(w.start.line,w.end.line),oldLines:b.endsWith(`$/;"	f
migrateVariable	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:migrateVariable(oldv, newv) abort$/;"	f
min_btns_width	plugged/coc.nvim/autoload/coc/dialog.vim	/^function! s:min_btns_width(buttons) abort$/;"	f
min_by	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:min_by(list, expr) abort$/;"	f
mkdir_nothrow	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^function! s:mkdir_nothrow(...) abort$/;"	f
module	plugged/vim-go/autoload/go/package.vim	/^function! s:module() abort$/;"	f
move	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^function! s:move(src, dest) abort$/;"	f
move_exe	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:move_exe() abort$/;"	f
move_exe	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:move_exe(src, dest) abort$/;"	f
move_to_other_drive	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:move_to_other_drive(candidate, filename) abort "{{{$/;"	f
move_vim	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^function! s:move_vim(src, dest) abort$/;"	f
move_vimfiler_cursor	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! s:move_vimfiler_cursor(candidate) abort "{{{$/;"	f
move_win_timer	plugged/coc.nvim/autoload/coc/notify.vim	/^function! s:move_win_timer(winid, from, to, curr) abort$/;"	f
msg2list	plugged/unite.vim/autoload/unite/view.vim	/^function! s:msg2list(expr) abort "{{{$/;"	f
mt:__index	plugged/catppuccin/lua/catppuccin/lib/vim/bit.lua	/^	function mt:__index(k)$/;"	f
mygroup	plugged/coc.nvim/doc/coc-example-config.vim	/^augroup mygroup$/;"	a
names	autoload/plug.vim	/^function! s:names(...)$/;"	f
narrowing_dot	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:narrowing_dot() abort "{{{$/;"	f
narrowing_input_history	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:narrowing_input_history() abort "{{{$/;"	f
neocb	plugged/vim-go/autoload/go/job.vim	/^function! s:neocb(mode, ch, buf, data, callback)$/;"	f
neooptions	plugged/vim-go/autoload/go/job.vim	/^function! s:neooptions(options)$/;"	f
neoterm_id	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! s:neoterm_id(bufnr) abort$/;"	f
nerdcommenter#Comment	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! nerdcommenter#Comment(mode, type) range abort$/;"	f
nerdcommenter#IsCharCommented	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! nerdcommenter#IsCharCommented(line, col) abort$/;"	f
nerdcommenter#IsLineCommented	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! nerdcommenter#IsLineCommented(lineNo) abort$/;"	f
nerdcommenter#SetUp	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! nerdcommenter#SetUp() abort$/;"	f
nerdcommenter#SwitchToAlternativeDelimiters	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^function! nerdcommenter#SwitchToAlternativeDelimiters(printMsgs) abort$/;"	f
nerdcommenter#delimiterMap	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^let nerdcommenter#delimiterMap = s:delimiterMap$/;"	v
nerdtree#caseSensitiveFS	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#caseSensitiveFS() abort$/;"	f
nerdtree#checkForBrowse	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir) abort$/;"	f
nerdtree#closeBookmarksOnOpen	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeBookmarksOnOpen() abort$/;"	f
nerdtree#closeTreeOnOpen	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeTreeOnOpen() abort$/;"	f
nerdtree#compareNodePaths	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodePaths(p1, p2) abort$/;"	f
nerdtree#compareNodes	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2) abort$/;"	f
nerdtree#completeBookmarks	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P) abort$/;"	f
nerdtree#deprecated	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...) abort$/;"	f
nerdtree#echo	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg) abort$/;"	f
nerdtree#echoError	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg) abort$/;"	f
nerdtree#echoWarning	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg) abort$/;"	f
nerdtree#exec	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd, ignoreAll) abort$/;"	f
nerdtree#has_opt	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name) abort$/;"	f
nerdtree#loadClassFiles	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles() abort$/;"	f
nerdtree#onBufLeave	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#onBufLeave() abort$/;"	f
nerdtree#osDefaultCaseSensitiveFS	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#osDefaultCaseSensitiveFS() abort$/;"	f
nerdtree#pathEquals	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#pathEquals(lhs, rhs) abort$/;"	f
nerdtree#postSourceActions	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions() abort$/;"	f
nerdtree#renderView	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView() abort$/;"	f
nerdtree#runningCygwin	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin() abort$/;"	f
nerdtree#runningMac	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningMac() abort$/;"	f
nerdtree#runningWindows	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows() abort$/;"	f
nerdtree#slash	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#slash() abort$/;"	f
nerdtree#ui_glue#bookmarkNode	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...) abort$/;"	f
nerdtree#ui_glue#chRootCwd	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd() abort$/;"	f
nerdtree#ui_glue#clearBookmarks	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks) abort$/;"	f
nerdtree#ui_glue#createDefaultBindings	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings() abort$/;"	f
nerdtree#ui_glue#invokeKeyMap	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key) abort$/;"	f
nerdtree#ui_glue#openBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name) abort$/;"	f
nerdtree#ui_glue#revealBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name) abort$/;"	f
nerdtree#ui_glue#setupCommands	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands() abort$/;"	f
nerdtree#ui_glue#upDir	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState) abort$/;"	f
nerdtree#version	plugged/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version(...) abort$/;"	f
nerdtreegitplugin	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^augroup nerdtreegitplugin$/;"	a
new	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:new(plugin_name) abort$/;"	f
newHandlerState	plugged/vim-go/autoload/go/lsp.vim	/^function! s:newHandlerState(statustype) abort$/;"	f
newJob	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^function! s:newJob(name, opts) abort$/;"	f
new_airline_ale_get_line_number	plugged/vim-airline/autoload/airline/extensions/ale.vim	/^function! s:new_airline_ale_get_line_number(cnt, type) abort$/;"	f
new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
newlsp	plugged/vim-go/autoload/go/lsp.vim	/^function! s:newlsp() abort$/;"	f
next_sign_id	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:next_sign_id() abort$/;"	f
next_tick	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:next_tick(cmd)$/;"	f
noop	plugged/vim-go/autoload/go/debug.vim	/^function s:noop(...) abort$/;"	f
noop	plugged/vim-go/autoload/go/lsp.vim	/^function! s:noop(...) abort$/;"	f
noop	plugged/vim-go/autoload/go/util.vim	/^function! s:noop(...) abort dict$/;"	f
noop	plugged/vim-go/plugin/go.vim	/^function! s:noop(...) abort$/;"	f
normalize_durations	plugged/vim-go/autoload/go/test_test.vim	/^func! s:normalize_durations(str) abort$/;"	f
not_git_dir	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:not_git_dir(bufnr) abort$/;"	f
notify	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:notify(method, args) dict$/;"	f
nowait_expr	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:nowait_expr(map) abort "{{{$/;"	f
nowait_map	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:nowait_map(mode) abort "{{{$/;"	f
nr2byte	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:nr2byte(nr) abort$/;"	f
nr2enc_char	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:nr2enc_char(charcode) abort$/;"	f
nr2hex	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:nr2hex(nr) abort$/;"	f
nsplit	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:nsplit(expr, n, ...) abort$/;"	f
numericHighlightGroupInAssignment	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInAssignment(testname, value)$/;"	f
numericHighlightGroupInMultidimensionalSliceElement	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInMultidimensionalSliceElement(testname, value)$/;"	f
numericHighlightGroupInMultidimensionalSliceIndex	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInMultidimensionalSliceIndex(testname, first, second)$/;"	f
numericHighlightGroupInSliceElement	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInSliceElement(testname, value)$/;"	f
numericHighlightGroupInSliceIndex	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInSliceIndex(testname, value)$/;"	f
numericHighlightGroupInSliceSlicing	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:numericHighlightGroupInSliceSlicing(testname, from, to)$/;"	f
nvim_add_related	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:nvim_add_related(winid, target, kind, winhl, related) abort$/;"	f
nvim_cb	autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
nvim_create_keymap	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:nvim_create_keymap(winid) abort$/;"	f
nvim_get_botline	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:nvim_get_botline(topline, height, width, bufnr) abort$/;"	f
nvim_get_foldcolumn	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:nvim_get_foldcolumn(config) abort$/;"	f
nvim_job_exit_wrapper	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
nvim_job_out_wrapper	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
nvim_move_related	plugged/coc.nvim/autoload/coc/notify.vim	/^function! s:nvim_move_related(winid, row) abort$/;"	f
nvim_mq_job_handler	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_mq_job_handler(job_id, data, event) dict$/;"	f
nvim_output_handler	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_output_handler(job_id, data, event) dict$/;"	f
nvim_po_job_handler	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_po_job_handler(job_id, data, event) dict$/;"	f
nvim_untracked_job_handler	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:nvim_untracked_job_handler(job_id, data, event) dict$/;"	f
obsolete	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:obsolete(var)$/;"	f
obsolete_gitgutter_signs_to_remove	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:obsolete_gitgutter_signs_to_remove(bufnr, new_gitgutter_signs_line_numbers) abort$/;"	f
obtain_file_renames	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:obtain_file_renames(bufnr, base)$/;"	f
onCursorHold	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onCursorHold(fname)$/;"	f
onFileUpdate	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onFileUpdate(fname)$/;"	f
onGitStatusFailedCB	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitStatusFailedCB(job) abort$/;"	f
onGitStatusSuccessCB	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitStatusSuccessCB(job) abort$/;"	f
onGitWorkdirFailedCB	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitWorkdirFailedCB(job) abort$/;"	f
onGitWorkdirSuccessCB	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onGitWorkdirSuccessCB(job) abort$/;"	f
onNERDTreeDirChanged	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onNERDTreeDirChanged(path) abort$/;"	f
onNERDTreeInit	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:onNERDTreeInit(path) abort$/;"	f
on_action	plugged/coc.nvim/autoload/coc/notify.vim	/^function! s:on_action(err, idx, winid) abort$/;"	f
on_async_response	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_async_response(id, resp, isErr) dict$/;"	f
on_bufenter	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:on_bufenter()$/;"	f
on_buffilepost	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:on_buffilepost(bufnr)$/;"	f
on_buffilepre	plugged/vim-gitgutter/plugin/gitgutter.vim	/^function! s:on_buffilepre(bufnr)$/;"	f
on_channel_close	plugged/coc.nvim/autoload/coc/rpc.vim	/^function! s:on_channel_close() abort$/;"	f
on_colorscheme_changed	plugged/vim-airline/plugin/airline.vim	/^function! s:on_colorscheme_changed()$/;"	f
on_cursor_moved	plugged/vim-airline/plugin/airline.vim	/^function! s:on_cursor_moved()$/;"	f
on_data	plugged/vim-go/autoload/go/debug.vim	/^function! s:on_data(ch, data, ...) dict abort$/;"	f
on_error	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_error(name, msgs) abort$/;"	f
on_exit	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_exit(name, code) abort$/;"	f
on_exit	plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_exit(id, code) abort$/;"	f
on_exit	plugged/vim-go/autoload/go/job.vim	/^function! s:on_exit(jobid, exitval, event) dict$/;"	f
on_exit	plugged/vim-go/autoload/go/term.vim	/^function! s:on_exit(job_id, exit_status, event) dict abort$/;"	f
on_exit_clean	plugged/vim-airline/autoload/airline/async.vim	/^function! s:on_exit_clean(...) dict abort$/;"	f
on_exit_mq	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_mq(channel) dict abort$/;"	f
on_exit_nvim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_nvim(_job_id, exit_code, _event) dict abort$/;"	f
on_exit_po	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_po(channel) dict abort$/;"	f
on_exit_untracked	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_exit_untracked(channel) dict abort$/;"	f
on_exit_vim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_exit_vim(channel) dict abort$/;"	f
on_focus_gained	plugged/vim-airline/plugin/airline.vim	/^function! s:on_focus_gained()$/;"	f
on_gather_candidates	plugged/unite.vim/autoload/unite/sources/line.vim	/^function! s:on_gather_candidates(direction, context, start, max) abort "{{{$/;"	f
on_init	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:on_init(args, context, name) abort "{{{$/;"	f
on_pum_change	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:on_pum_change(move) abort$/;"	f
on_stderr	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:on_stderr(name, msgs)$/;"	f
on_stderr	plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_stderr(id, msgs)$/;"	f
on_stderr	plugged/vim-go/autoload/go/job.vim	/^function! s:on_stderr(mode, ch, data, event) dict$/;"	f
on_stderr_nvim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_nvim(_job_id, data, _event) dict abort$/;"	f
on_stderr_vim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stderr_vim(channel, _data) dict abort$/;"	f
on_stdout	plugged/coc.nvim/autoload/coc/task.vim	/^function! s:on_stdout(id, msgs)$/;"	f
on_stdout	plugged/vim-airline/autoload/airline/async.vim	/^  function! s:on_stdout(channel, msg) dict abort$/;"	f
on_stdout	plugged/vim-go/autoload/go/job.vim	/^function! s:on_stdout(mode, ch, data, event) dict$/;"	f
on_stdout	plugged/vim-go/autoload/go/term.vim	/^function! s:on_stdout(job_id, data, event) dict abort$/;"	f
on_stdout_nvim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_nvim(_job_id, data, _event) dict abort$/;"	f
on_stdout_vim	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^function! s:on_stdout_vim(_channel, data) dict abort$/;"	f
on_textchange	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:on_textchange(bufnr) abort$/;"	f
on_window_changed	plugged/vim-airline/plugin/airline.vim	/^function! s:on_window_changed(event)$/;"	f
open	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^function! s:open(candidate) abort "{{{$/;"	f
open	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^function! s:open(filename) abort$/;"	f
openExplorer	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node) abort$/;"	f
openFold	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openFold() abort dict$/;"	f
openFold	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:openFold() abort dict$/;"	f
openHSplit	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target) abort$/;"	f
openHSplitBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplitBookmark(bm) abort$/;"	f
openInNewTab	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target) abort$/;"	f
openInNewTabSilent	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target) abort$/;"	f
openKindFold	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:openKindFold(kind) abort dict$/;"	f
openNodeRecursively	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node) abort$/;"	f
openParents	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openParents() abort dict$/;"	f
openVSplit	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target) abort$/;"	f
openVSplitBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplitBookmark(bm) abort$/;"	f
open_current_line	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^function! s:open_current_line(is_highlight) abort "{{{$/;"	f
open_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:open_hunk_preview_window()$/;"	f
option	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:option(name)$/;"	f
or	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:or(xs) abort$/;"	f
os	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^import os$/;"	i
osascript	plugged/coc.nvim/autoload/coc/ui.vim	/^function! s:osascript(...) abort$/;"	f
out_cb	plugged/vim-go/autoload/go/debug.vim	/^function! s:out_cb(ch, msg) abort$/;"	f
out_cb	plugged/vim-go/autoload/go/term.vim	/^func! s:out_cb(channel, msg) dict abort$/;"	f
output	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:output(text)$/;"	f
package	plugged/vim-go/autoload/go/debug.vim	/^function! s:package(args)$/;"	f
pad_between_letters	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:pad_between_letters(str, width, ...) abort$/;"	f
pad_both_sides	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:pad_both_sides(str, width, ...) abort$/;"	f
pad_left	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:pad_left(str, width, ...) abort$/;"	f
pad_right	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:pad_right(str, width, ...) abort$/;"	f
padding_by_displaywidth	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:padding_by_displaywidth(expr, width, float) abort$/;"	f
parse_errors	plugged/vim-go/autoload/go/mod.vim	/^function! s:parse_errors(filename, content) abort$/;"	f
parse_errors	plugged/vim-go/autoload/go/rename.vim	/^function s:parse_errors(exit_val, bang, out)$/;"	f
parse_guru_output	plugged/vim-go/autoload/go/guru.vim	/^function! s:parse_guru_output(exit_val, output, title) abort$/;"	f
parse_hunk_status_decorated	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:parse_hunk_status_decorated(hunks) abort$/;"	f
parse_hunk_status_dict	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^function! s:parse_hunk_status_dict(hunks) abort$/;"	f
parse_ignore_file	plugged/unite.vim/autoload/unite/filters/matcher_project_ignore_files.vim	/^function! s:parse_ignore_file(file, prefix) abort "{{{$/;"	f
parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
parse_output	plugged/vim-go/autoload/go/calls.vim	/^function! s:parse_output(mode, output) abort$/;"	f
parse_output	plugged/vim-go/autoload/go/implements.vim	/^function! s:parse_output(exit_val, output, title) abort$/;"	f
parse_output	plugged/vim-go/autoload/go/referrers.vim	/^function! s:parse_output(exit_val, output, title) abort$/;"	f
parse_path	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:parse_path(args) abort "{{{$/;"	f
part_of_diff	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:part_of_diff(hunk_diff, first, last)$/;"	f
partition	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:partition(f, xs) abort$/;"	f
paste	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! s:paste(word, command, opt) abort "{{{$/;"	f
path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
path2directory	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:path2directory(path) abort$/;"	f
path2project_directory	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:path2project_directory(path, ...) abort$/;"	f
path2str	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:path2str(path) abort$/;"	f
path_extensions	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:path_extensions() abort$/;"	f
path_separator	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:path_separator() abort$/;"	f
paths	plugged/vim-go/autoload/go/package.vim	/^function! s:paths() abort$/;"	f
permutations	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:permutations(list, ...) abort$/;"	f
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plug_call	autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
plug_expand	autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
plug_fnamemodify	autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
plug_getcwd	autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
plug_tempname	autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
plugin	plugged/unite.vim/autoload/unite.vim	/^augroup plugin-unite$/;"	a
plugin	plugged/unite.vim/plugin/unite/buffer.vim	/^augroup plugin-unite-source-buffer$/;"	a
plugin	plugged/unite.vim/plugin/unite/window.vim	/^augroup plugin-unite-source-window$/;"	a
plugin_name	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:plugin_name() abort dict$/;"	f
po_output	plugged/vim-airline/autoload/airline/async.vim	/^function! s:po_output(buf, file)$/;"	f
pop	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:pop(list) abort$/;"	f
populate_hunk_preview_window	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:populate_hunk_preview_window(header, body)$/;"	f
popup_cursor	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:popup_cursor(n) abort$/;"	f
popup_position	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:popup_position(config) abort$/;"	f
popup_visible	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:popup_visible(id) abort$/;"	f
position	plugged/vim-go/autoload/go/lsp/message.vim	/^function! s:position(line, col) abort$/;"	f
prefix_highlight_value_with	colors/jellybeans.vim	/^fun! s:prefix_highlight_value_with(prefix, color)$/;"	f
prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
prepareCallHierarchyHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:prepareCallHierarchyHandler(next, msg) abort dict$/;"	f
preserveerrors	plugged/vim-go/autoload/go/lint.vim	/^function! s:preserveerrors(autosave, listtype) abort$/;"	f
prettify	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:prettify(obj) abort$/;"	f
prettifyDict	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:prettifyDict(obj, prefix, level, indent) abort$/;"	f
prettifyList	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^function! s:prettifyList(obj, prefix, level, indent) abort$/;"	f
preview	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:preview(hunk_diff)$/;"	f
previewBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewBookmark(bookmark) abort$/;"	f
previewNodeCurrent	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node) abort$/;"	f
previewNodeHSplit	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node) abort$/;"	f
previewNodeHSplitBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplitBookmark(bookmark) abort$/;"	f
previewNodeVSplit	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node) abort$/;"	f
previewNodeVSplitBookmark	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplitBookmark(bookmark) abort$/;"	f
preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
preview_highlights	plugged/coc.nvim/autoload/coc/list.vim	/^function! s:preview_highlights(winid, bufnr, config, float) abort$/;"	f
print_candidate	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:print_candidate() abort "{{{$/;"	f
print_message_log	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:print_message_log() abort "{{{$/;"	f
processDiagnostic	plugged/vim-go/autoload/go/lsp.vim	/^function! s:processDiagnostic(diagnostic, bufname, fname) abort$/;"	f
process_added	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_added(modifications, from_count, to_count, to_line) abort$/;"	f
process_hunk	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_hunk(bufnr, hunk) abort$/;"	f
process_modified	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified(modifications, from_count, to_count, to_line) abort$/;"	f
process_modified_and_added	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified_and_added(modifications, from_count, to_count, to_line) abort$/;"	f
process_modified_and_removed	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_modified_and_removed(modifications, from_count, to_count, to_line) abort$/;"	f
process_options_file	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
process_removed	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:process_removed(modifications, from_count, to_count, to_line) abort$/;"	f
product	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:product(lists) abort$/;"	f
progress	plugged/coc.nvim/autoload/coc/notify.vim	/^function! s:progress(winid, total, curr, index) abort$/;"	f
progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
projectdir	plugged/vim-go/autoload/gotest.vim	/^func! s:projectdir(path) abort$/;"	f
promptToDelBuffer	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
prop_type_hlgroup	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:prop_type_hlgroup(type) abort$/;"	f
prototype.add_raw	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_raw(text) dict$/;"	f
prototype.add_section	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_section(group, contents) dict$/;"	f
prototype.add_section_spaced	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.add_section_spaced(group, contents) dict$/;"	f
prototype.build	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.build() dict$/;"	f
prototype.build	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.build() dict$/;"	f
prototype.get_position	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.get_position() dict$/;"	f
prototype.insert_raw	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.insert_raw(text, position) dict$/;"	f
prototype.insert_section	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.insert_section(group, contents, position) dict$/;"	f
prototype.insert_titles	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.insert_titles(current, first, last) dict$/;"	f
prototype.split	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:prototype.split(...) dict$/;"	f
prototype.try_insert_title	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:prototype.try_insert_title(index, group, pos, sep_size, force) dict$/;"	f
provider 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^		provider = function() return " " .. string.upper(vim.bo.ft) .. " " end,$/;"	f
provider 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^		provider = function() return mode_colors[vim.fn.mode()][1] .. " " end,$/;"	f
provider 	plugged/catppuccin/lua/catppuccin/groups/integrations/feline.lua	/^		provider = function()$/;"	f
push	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:push(list, val) abort$/;"	f
queueneocb	plugged/vim-go/autoload/go/job.vim	/^function! s:queueneocb(fn) abort$/;"	f
quick_help	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:quick_help() abort "{{{$/;"	f
rand	plugged/vim-airline/plugin/airline.vim	/^function! s:rand(max) abort$/;"	f
random_theme	plugged/vim-airline/plugin/airline.vim	/^function! s:random_theme() abort$/;"	f
re	plugged/vim-snippets/pythonx/vimsnippets.py	/^import string, vim, re$/;"	i
readfile	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^function! s:readfile(cache_dir, filename) abort$/;"	f
realpath	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^  function! s:realpath(path) abort$/;"	f
reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
recache_candidates_loop	plugged/unite.vim/autoload/unite/candidates.vim	/^function! s:recache_candidates_loop(context, is_force) abort "{{{$/;"	f
receiverHighlightGroup	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:receiverHighlightGroup(testname, value)$/;"	f
record_diagnostics	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^function! s:record_diagnostics(state)$/;"	f
redraw	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:redraw() abort "{{{$/;"	f
reflect_kind	plugged/vim-go/autoload/go/debug.vim	/^function! s:reflect_kind(k)$/;"	f
refreshCurrent	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node) abort$/;"	f
refreshGitStatus	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:refreshGitStatus(name, workdir) abort$/;"	f
refreshRoot	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot() abort$/;"	f
register	plugged/vim-go/plugin/go.vim	/^function! s:register()$/;"	f
register_default_theme	colors/PaperColor.vim	/^fun! s:register_default_theme()$/;"	f
regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
reload	plugged/catppuccin/tests/flavour_spec.lua	/^local function reload()$/;"	f
reload	plugged/catppuccin/tests/palette_spec.lua	/^local function reload()$/;"	f
reload_changed	plugged/vim-go/autoload/go/rename.vim	/^function! s:reload_changed() abort$/;"	f
reload_plugins	autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
relpath	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:relpath(path) abort$/;"	f
removeChild	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:removeChild(tag) dict abort$/;"	f
removeTag	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:removeTag(tag) dict abort$/;"	f
remove_ansi_sequences	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:remove_ansi_sequences(text) abort$/;"	f
remove_italic_attr	colors/jellybeans.vim	/^fun! s:remove_italic_attr(attr)$/;"	f
remove_last_separator	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:remove_last_separator(path) abort$/;"	f
remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
remove_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:remove_signs(bufnr, sign_ids, all_signs) abort$/;"	f
remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
rename	plugged/vim-go/autoload/go/lsp.vim	/^function! s:rename(fname, line, col, newName, msg) abort dict$/;"	f
renameBuffer	plugged/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:renameBuffer(bufNum, newNodeName, isDirectory)$/;"	f
renameEvalReturnValue	plugged/vim-go/autoload/go/debug.vim	/^function! s:renameEvalReturnValue(key, val) abort$/;"	f
rename_job	plugged/vim-go/autoload/go/rename.vim	/^function s:rename_job(args)$/;"	f
reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
repair_posix_text	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:repair_posix_text(text, ...) abort$/;"	f
replace	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:replace(str, from, to) abort$/;"	f
replace_filename	plugged/vim-go/autoload/go/fmt.vim	/^function! s:replace_filename(filename, content) abort$/;"	f
replace_first	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:replace_first(str, from, to) abort$/;"	f
repo_bare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
repo_config	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_config(name) dict abort$/;"	f
repo_dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
repo_find	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_find(object) dict abort$/;"	f
repo_git_chomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
repo_git_chomp_in_tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
repo_git_command	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
repo_head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
repo_rev_parse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
repo_translate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_translate(rev) dict abort$/;"	f
repo_tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
report_error	plugged/coc.nvim/autoload/health/coc.vim	/^function! s:report_error(report) abort$/;"	f
report_ok	plugged/coc.nvim/autoload/health/coc.vim	/^function! s:report_ok(report) abort$/;"	f
report_warn	plugged/coc.nvim/autoload/health/coc.vim	/^function! s:report_warn(report) abort$/;"	f
request	plugged/catppuccin/.github/scripts/update-palette.py	/^import urllib.request$/;"	i
request	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:request(method, args) dict$/;"	f
requestComplete	plugged/vim-go/autoload/go/lsp.vim	/^function! s:requestComplete(ok) abort dict$/;"	f
request_async	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:request_async(method, args, cb) dict$/;"	f
res	plugged/coc.nvim/autoload/coc/terminal.vim	/^    let res = term_start(cmd, {$/;"	v
res	plugged/coc.nvim/autoload/coc/ui.vim	/^    let res = inputlist([a:title] + a:items)$/;"	v
reset	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! s:reset() abort$/;"	f
reset	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:reset() abort dict$/;"	f
reset_summary	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:reset_summary(bufnr) abort$/;"	f
reset_tick	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:reset_tick(bufnr) abort$/;"	f
reset_untracked_cache	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:reset_untracked_cache(shellcmdpost)$/;"	f
resolve	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:resolve(file) abort "{{{$/;"	f
restart	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:restart() abort "{{{$/;"	f
restoreMappings	plugged/vim-go/autoload/go/debug.vim	/^function! s:restoreMappings() abort$/;"	f
restore_fold_state	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:restore_fold_state()$/;"	f
restore_indentkeys	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:restore_indentkeys() abort$/;"	f
restore_mapping	plugged/vim-go/autoload/go/debug.vim	/^function! s:restore_mapping(maparg)$/;"	f
restore_position	plugged/unite.vim/autoload/unite/view.vim	/^function! s:restore_position(position) abort "{{{$/;"	f
restore_shell	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:restore_shell() abort$/;"	f
restore_statusline	plugged/unite.vim/autoload/unite/handlers.vim	/^function! s:restore_statusline() abort  "{{{$/;"	f
restore_views	plugged/coc.nvim/autoload/coc/list.vim	/^function! s:restore_views() abort$/;"	f
restoremappingfor	plugged/vim-go/autoload/go/debug.vim	/^function! s:restoremappingfor(bufname) abort$/;"	f
retry	autoload/plug.vim	/^function! s:retry()$/;"	f
reuseWin	plugged/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
reverse	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:reverse(str) abort$/;"	f
revert	autoload/plug.vim	/^function! s:revert()$/;"	f
rgb	colors/jellybeans.vim	/^fun! s:rgb(rgb)$/;"	f
rgb2Hex	plugged/catppuccin/lua/catppuccin/utils/colors.lua	/^local function rgb2Hex(rgb)$/;"	f
rgb_color	colors/jellybeans.vim	/^  fun! s:rgb_color(x, y, z)$/;"	f
rgb_colour	colors/PaperColor.vim	/^  fun! s:rgb_colour(x, y, z)$/;"	f
rgb_colour	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:rgb_colour(x, y, z)$/;"	f
rgb_level	colors/PaperColor.vim	/^  fun! s:rgb_level(n)$/;"	f
rgb_level	colors/jellybeans.vim	/^  fun! s:rgb_level(n)$/;"	f
rgb_level	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:rgb_level(n)$/;"	f
rgb_number	colors/PaperColor.vim	/^  fun! s:rgb_number(x)$/;"	f
rgb_number	colors/jellybeans.vim	/^  fun! s:rgb_number(x)$/;"	f
rgb_number	plugged/coc.nvim/autoload/coc/color.vim	/^fun! s:rgb_number(x)$/;"	f
rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
rmdir	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:rmdir(...) abort$/;"	f
rmdir	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! s:rmdir(path, ...) abort$/;"	f
root_dirs	plugged/vim-go/autoload/go/impl.vim	/^function! s:root_dirs() abort$/;"	f
rotate_source	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:rotate_source(is_next) abort "{{{$/;"	f
rpc_response	plugged/vim-go/autoload/go/debug.vim	/^function! s:rpc_response(check_errors, res) abort$/;"	f
rshift 	plugged/catppuccin/lua/catppuccin/lib/vim/bit.lua	/^rshift = function(a, disp) -- Lua5.2 inspired$/;"	f
rtp	autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
run_guru	plugged/vim-go/autoload/go/guru.vim	/^function! s:run_guru(args) abort$/;"	f
run_system	plugged/tagbar/autoload/tagbar.vim	/^function! s:run_system(cmd, version) abort$/;"	f
runerrorformat	plugged/vim-go/autoload/go/cmd.vim	/^function! s:runerrorformat()$/;"	f
s:Bookmark	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Cache	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:Cache = unite#util#get_vital_cache()$/;"	v
s:Class	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Class = 7$/;"	v
s:Color	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Color = 16$/;"	v
s:Constant	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Constant = 21$/;"	v
s:Constructor	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Constructor = 4$/;"	v
s:Creator	plugged/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Enum	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Enum = 13$/;"	v
s:EnumMember	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:EnumMember = 20$/;"	v
s:Event	plugged/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:Event	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Event = 23$/;"	v
s:Field	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Field = 5$/;"	v
s:File	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:File = 17$/;"	v
s:FlagSet	plugged/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:Folder	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Folder = 19$/;"	v
s:Function	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Function = 3$/;"	v
s:Interface	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Interface = 8$/;"	v
s:Job	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let s:Job = {$/;"	v
s:KeyMap	plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:Keyword	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Keyword = 14$/;"	v
s:Listener	plugged/nerdtree-git-plugin/autoload/gitstatus/listener.vim	/^let s:Listener = {$/;"	v
s:Logger	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:Logger = {}$/;"	v
s:MenuController	plugged/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	plugged/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:Method	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Method = 2$/;"	v
s:Module	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Module = 9$/;"	v
s:NERDFileNameEscape	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^let s:NERDFileNameEscape="[]#*$%'\\" ?`!&();<>\\\\"$/;"	v
s:NERDTree	plugged/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:NewTabCreated	plugged/vim-nerdtree-tabs/nerdtree_plugin/vim-nerdtree-tabs.vim	/^let s:NewTabCreated = 0$/;"	v
s:Notifier	plugged/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Opener	plugged/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:Operator	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Operator = 24$/;"	v
s:PREFIX	plugged/unite.vim/autoload/unite/exrename.vim	/^let s:PREFIX = unite#util#is_windows() ? '[exrename]' : '*exrename*'$/;"	v
s:Path	plugged/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:Property	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Property = 10$/;"	v
s:Reference	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Reference = 18$/;"	v
s:SNR	plugged/unite.vim/autoload/vital/unite.vim	/^let s:SNR = join(map(range(len("\\<SNR>")), '"[\\\\x" . printf("%0x", char2nr("\\<SNR>"[v:val])) . "]"'), '')$/;"	v
s:Snippet	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Snippet = 15$/;"	v
s:SourcedFile	plugged/vim-snippets/plugin/vimsnippets.vim	/^let s:SourcedFile=expand("<sfile>")$/;"	v
s:State	plugged/tagbar/autoload/tagbar/state.vim	/^let s:State = {$/;"	v
s:Struct	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Struct = 22$/;"	v
s:System	plugged/unite.vim/autoload/unite/kinds/file.vim	/^let s:System = unite#util#get_vital().import('System.File')$/;"	v
s:System	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:System = unite#util#get_vital().import('System.File')$/;"	v
s:System	plugged/unite.vim/autoload/unite/kinds/uri.vim	/^let s:System = unite#util#get_vital().import('System.File')$/;"	v
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TYPE_DICT	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^let s:TYPE_DICT = type({})$/;"	v
s:TYPE_LIST	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^let s:TYPE_LIST = type([])$/;"	v
s:TYPE_STRING	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^let s:TYPE_STRING = type('')$/;"	v
s:Text	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Text = 1$/;"	v
s:TreeDirNode	plugged/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeFileNode	plugged/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:TypeParameter	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:TypeParameter = 25$/;"	v
s:UI	plugged/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:Unit	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Unit = 11$/;"	v
s:VERSION	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^let s:VERSION = '0.1.0'$/;"	v
s:VOID	plugged/unite.vim/autoload/unite/exrename.vim	/^let s:VOID = function('s:void')$/;"	v
s:Value	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Value = 12$/;"	v
s:Variable	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:Variable = 6$/;"	v
s:Vital	plugged/unite.vim/autoload/vital/unite.vim	/^  let s:Vital._get_module = s:_function('s:_get_builtin_module')$/;"	v
s:Vital	plugged/unite.vim/autoload/vital/unite.vim	/^  let s:Vital._get_module = s:_function('s:_get_module')$/;"	v
s:Vital	plugged/unite.vim/autoload/vital/unite.vim	/^let s:Vital = {}$/;"	v
s:Vital	plugged/unite.vim/autoload/vital/unite.vim	/^let s:Vital._import = s:_function('s:_import')$/;"	v
s:Vital	plugged/unite.vim/autoload/vital/unite.vim	/^let s:Vital.exists = s:_function('s:exists')$/;"	v
s:Vital	plugged/unite.vim/autoload/vital/unite.vim	/^let s:Vital.import = s:_function('s:import')$/;"	v
s:Vital	plugged/unite.vim/autoload/vital/unite.vim	/^let s:Vital.load = s:_function('s:load')$/;"	v
s:Vital	plugged/unite.vim/autoload/vital/unite.vim	/^let s:Vital.plugin_name = s:_function('s:plugin_name')$/;"	v
s:Vital	plugged/unite.vim/autoload/vital/unite.vim	/^let s:Vital.search = s:_function('s:search')$/;"	v
s:Vital	plugged/unite.vim/autoload/vital/unite.vim	/^let s:Vital.unload = s:_function('s:unload')$/;"	v
s:Vital	plugged/unite.vim/autoload/vital/unite.vim	/^let s:Vital.vital_files = s:_function('s:vital_files')$/;"	v
s:_plugin_name	plugged/unite.vim/autoload/vital/_unite.vim	/^let s:_plugin_name = expand('<sfile>:t:r')$/;"	v
s:_s	plugged/unite.vim/autoload/vital/unite.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
s:_unify_path_cache	plugged/unite.vim/autoload/vital/unite.vim	/^  let s:_unify_path_cache = {}$/;"	v
s:accents	plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:accents = {}$/;"	v
s:activate	plugged/coc.nvim/autoload/coc/color.vim	/^  let s:activate = 'activate'$/;"	v
s:activate	plugged/coc.nvim/autoload/coc/color.vim	/^let s:activate = ""$/;"	v
s:activated	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:activated = 0$/;"	v
s:active_winnr	plugged/vim-airline/plugin/airline.vim	/^let s:active_winnr = -1$/;"	v
s:added_db_files	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:added_dbs	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^let s:added_dbs = []$/;"	v
s:added_dbs	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:added_dbs = []$/;"	v
s:addr_other	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_other = has('patch-8.1.560') || has('nvim-0.5.0') ? '-addr=other' : ''$/;"	v
s:addr_tabs	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''$/;"	v
s:addr_wins	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''$/;"	v
s:airline_a_commandline	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_commandline = [ '#00005f' , '#00d700' , 17  , 40 ]$/;"	v
s:airline_a_inactive	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_inactive = [ '#4e4e4e' , '#1c1c1c' , 239 , 234 , '' ]$/;"	v
s:airline_a_insert	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_insert = [ '#00005f' , '#00dfff' , 17  , 45  ]$/;"	v
s:airline_a_normal	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_normal   = [ '#00005f' , '#dfff00' , 17  , 190 ]$/;"	v
s:airline_a_visual	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_a_visual = [ '#000000' , '#ffaf00' , 232 , 214 ]$/;"	v
s:airline_b_commandline	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_commandline = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:airline_b_inactive	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_inactive = [ '#4e4e4e' , '#262626' , 239 , 235 , '' ]$/;"	v
s:airline_b_insert	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_insert = [ '#ffffff' , '#005fff' , 255 , 27  ]$/;"	v
s:airline_b_normal	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_normal   = [ '#ffffff' , '#444444' , 255 , 238 ]$/;"	v
s:airline_b_visual	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_b_visual = [ '#000000' , '#ff5f00' , 232 , 202 ]$/;"	v
s:airline_c_commandline	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_commandline = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
s:airline_c_inactive	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_inactive = [ '#4e4e4e' , '#303030' , 239 , 236 , '' ]$/;"	v
s:airline_c_insert	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_insert = [ '#ffffff' , '#000080' , 15  , 17  ]$/;"	v
s:airline_c_normal	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_normal   = [ '#9cffd3' , '#202020' , 85  , 234 ]$/;"	v
s:airline_c_visual	plugged/vim-airline/autoload/airline/themes/dark.vim	/^let s:airline_c_visual = [ '#ffffff' , '#5f0000' , 15  , 52  ]$/;"	v
s:airline_initialized	plugged/vim-airline/plugin/airline.vim	/^let s:airline_initialized = 0$/;"	v
s:airline_tagbar_last_lookup_time	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_time = 0$/;"	v
s:airline_tagbar_last_lookup_val	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:airline_tagbar_last_lookup_val = ''$/;"	v
s:app	plugged/coc.nvim/autoload/coc/color.vim	/^  let s:app = "MacVim"$/;"	v
s:app	plugged/coc.nvim/autoload/coc/color.vim	/^  let s:app = "System Events"$/;"	v
s:app	plugged/coc.nvim/autoload/coc/color.vim	/^  let s:app = "Terminal"$/;"	v
s:app	plugged/coc.nvim/autoload/coc/color.vim	/^  let s:app = "iTerm2"$/;"	v
s:aqua	colors/gruvbox.vim	/^  let s:aqua   = s:gb.bright_aqua$/;"	v
s:aqua	colors/gruvbox.vim	/^  let s:aqua   = s:gb.faded_aqua$/;"	v
s:aqua	colors/gruvbox.vim	/^  let s:aqua[1]   = 14$/;"	v
s:assert	plugged/nerdtree-git-plugin/tests/test_all.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/unite.vim/test/converter.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/unite.vim/test/grep.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/unite.vim/test/matcher.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/unite.vim/test/source.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:autocommands_done	plugged/tagbar/autoload/tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:available	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:available = has('nvim') || ($/;"	v
s:background_color	colors/jellybeans.vim	/^    let s:background_color = s:overrides["background"]["guibg"]$/;"	v
s:background_color	colors/jellybeans.vim	/^let s:background_color = "151515"$/;"	v
s:bad_git_dir	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:bad_git_dir = '\/$\\|^fugitive:'$/;"	v
s:bang_edits	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:bang_edits = {'split': 'Git', 'vsplit': 'vertical Git', 'tabedit': 'tab Git', 'pedit': 'Git!'}$/;"	v
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': '', 'frozen': 0 }$/;"	v
s:basic16	plugged/vim-airline/autoload/airline/msdos.vim	/^let s:basic16 = [$/;"	v
s:bg0	colors/gruvbox.vim	/^    let s:bg0  = s:gb.dark0_hard$/;"	v
s:bg0	colors/gruvbox.vim	/^    let s:bg0  = s:gb.dark0_soft$/;"	v
s:bg0	colors/gruvbox.vim	/^    let s:bg0  = s:gb.light0_hard$/;"	v
s:bg0	colors/gruvbox.vim	/^    let s:bg0  = s:gb.light0_soft$/;"	v
s:bg0	colors/gruvbox.vim	/^  let s:bg0  = s:gb.dark0$/;"	v
s:bg0	colors/gruvbox.vim	/^  let s:bg0  = s:gb.light0$/;"	v
s:bg0	colors/gruvbox.vim	/^  let s:bg0[1]    = 0$/;"	v
s:bg1	colors/gruvbox.vim	/^  let s:bg1  = s:gb.dark1$/;"	v
s:bg1	colors/gruvbox.vim	/^  let s:bg1  = s:gb.light1$/;"	v
s:bg2	colors/gruvbox.vim	/^  let s:bg2  = s:gb.dark2$/;"	v
s:bg2	colors/gruvbox.vim	/^  let s:bg2  = s:gb.light2$/;"	v
s:bg3	colors/gruvbox.vim	/^  let s:bg3  = s:gb.dark3$/;"	v
s:bg3	colors/gruvbox.vim	/^  let s:bg3  = s:gb.light3$/;"	v
s:bg4	colors/gruvbox.vim	/^  let s:bg4  = s:gb.dark4$/;"	v
s:bg4	colors/gruvbox.vim	/^  let s:bg4  = s:gb.light4$/;"	v
s:blobdirs	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:blobdirs = {}$/;"	v
s:blue	colors/gruvbox.vim	/^  let s:blue   = s:gb.bright_blue$/;"	v
s:blue	colors/gruvbox.vim	/^  let s:blue   = s:gb.faded_blue$/;"	v
s:blue	colors/gruvbox.vim	/^  let s:blue[1]   = 12$/;"	v
s:bold	colors/gruvbox.vim	/^  let s:bold = ''$/;"	v
s:bold	colors/gruvbox.vim	/^let s:bold = 'bold,'$/;"	v
s:bookmarks	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^let s:bookmarks = {}$/;"	v
s:borderchars	plugged/coc.nvim/autoload/coc/float.vim	/^let s:borderchars = get(g:, 'coc_borderchars', ['─', '│', '─', '│', '┌', '┐', '┘', '└'])$/;"	v
s:borderjoinchars	plugged/coc.nvim/autoload/coc/float.vim	/^let s:borderjoinchars = get(g:, 'coc_border_joinchars', ['┬', '┤', '┴', '├'])$/;"	v
s:buf_min_count	plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:buf_min_count = get(g:, 'airline#extensions#tabline#buffer_min_count', 0)$/;"	v
s:buf_nr	plugged/vim-go/autoload/go/doc.vim	/^let s:buf_nr = -1$/;"	v
s:buf_nr	plugged/vim-go/autoload/go/ui.vim	/^let s:buf_nr = -1$/;"	v
s:buffer_bookmark_action	plugged/unite.vim/plugin/unite/bookmark.vim	/^let s:buffer_bookmark_action = {$/;"	v
s:buffer_id	plugged/coc.nvim/autoload/coc/api.vim	/^let s:buffer_id = {}$/;"	v
s:buffer_list	plugged/unite.vim/autoload/unite/sources/buffer/variables.vim	/^let s:buffer_list = {}$/;"	v
s:buffer_seqno	plugged/tagbar/autoload/tagbar.vim	/^let s:buffer_seqno = 0$/;"	v
s:bufnameprefix	plugged/vim-go/autoload/go/term.vim	/^let s:bufnameprefix = 'goterm:\/\/'$/;"	v
s:bufnr	plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:bufnr       = bufnr('')$/;"	v
s:c	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let s:c = has("nvim") == 1 ? luaeval('require("catppuccin.palettes").get_palette()') : luaeval('vim.dict(require("catppuccin.palettes").get_palette())')$/;"	v
s:c	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:c = has("nvim") == 1 ? luaeval('require("catppuccin.palettes").get_palette()') : luaeval('vim.dict(require("catppuccin.palettes").get_palette())')$/;"	v
s:cache_files	plugged/unite.vim/autoload/unite/sources/file.vim	/^let s:cache_files = {}$/;"	v
s:cache_ignore_files	plugged/unite.vim/autoload/unite/filters/matcher_project_ignore_files.vim	/^let s:cache_ignore_files = {}$/;"	v
s:cache_sid	plugged/unite.vim/autoload/vital/unite.vim	/^let s:cache_sid = {}$/;"	v
s:cached_result	plugged/unite.vim/autoload/unite/sources/change.vim	/^let s:cached_result = []$/;"	v
s:cached_result	plugged/unite.vim/autoload/unite/sources/command.vim	/^let s:cached_result = []$/;"	v
s:cached_result	plugged/unite.vim/autoload/unite/sources/function.vim	/^let s:cached_result = []$/;"	v
s:cached_result	plugged/unite.vim/autoload/unite/sources/jump.vim	/^let s:cached_result = []$/;"	v
s:cached_result	plugged/unite.vim/autoload/unite/sources/launcher.vim	/^let s:cached_result = {}$/;"	v
s:cached_result	plugged/unite.vim/autoload/unite/sources/mapping.vim	/^let s:cached_result = []$/;"	v
s:callbacks	plugged/coc.nvim/autoload/coc.vim	/^let s:callbacks = {}$/;"	v
s:cdable_action_file	plugged/unite.vim/autoload/unite/sources/file.vim	/^let s:cdable_action_file = {$/;"	v
s:cdable_action_rec	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:cdable_action_rec = {$/;"	v
s:cdable_action_rec_async	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:cdable_action_rec_async = {$/;"	v
s:cdable_action_rec_parent	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:cdable_action_rec_parent = {$/;"	v
s:cdable_action_rec_parent_async	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:cdable_action_rec_parent_async = {$/;"	v
s:cdable_action_rec_project	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:cdable_action_rec_project = {$/;"	v
s:cdable_action_rec_project_async	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:cdable_action_rec_project_async = {$/;"	v
s:chan_id	plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:chan_id = 0$/;"	v
s:channel_log	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:channel_log = s:plugin_dir.'channel.log'$/;"	v
s:channel_map	plugged/coc.nvim/autoload/coc/terminal.vim	/^    let s:channel_map[bufnr] = job_getchannel(job)$/;"	v
s:channel_map	plugged/coc.nvim/autoload/coc/terminal.vim	/^    let s:channel_map[bufnr] = job_id$/;"	v
s:channel_map	plugged/coc.nvim/autoload/coc/terminal.vim	/^let s:channel_map = {}$/;"	v
s:char_map	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:char_map = {$/;"	v
s:check_hl_group	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:check_hl_group = 0$/;"	v
s:checked_ctags	plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags       = 0$/;"	v
s:checked_ctags_types	plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags_types = 0$/;"	v
s:clean_jobs	plugged/vim-airline/autoload/airline/async.vim	/^let s:clean_jobs     = {}$/;"	v
s:clear_match_by_window	plugged/coc.nvim/autoload/coc/highlight.vim	/^    let s:clear_match_by_window = 1$/;"	v
s:clear_match_by_window	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:clear_match_by_window = s:nvim_60 || s:is_vim$/;"	v
s:client	plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:client = v:null$/;"	v
s:clients	plugged/coc.nvim/autoload/coc/client.vim	/^let s:clients = {}$/;"	v
s:cmd_mapping	plugged/coc.nvim/autoload/coc/snippet.vim	/^let s:cmd_mapping = has('nvim') || has('patch-8.2.1978')$/;"	v
s:color_column	colors/gruvbox.vim	/^  let s:color_column = get(s:gb, g:gruvbox_color_column)$/;"	v
s:color_column	colors/gruvbox.vim	/^let s:color_column = s:bg1$/;"	v
s:color_template	plugged/vim-airline/autoload/airline/extensions/ctrlp.vim	/^let s:color_template = get(g:, 'airline#extensions#ctrlp#color_template', 'insert')$/;"	v
s:color_template	plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^let s:color_template = get(g:, 'airline#extensions#promptline#color_template', 'normal')$/;"	v
s:color_template	plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^let s:color_template = get(g:, 'airline#extensions#tmuxline#color_template', 'normal')$/;"	v
s:column_display	plugged/vim-airline/autoload/airline/extensions/csv.vim	/^let s:column_display = get(g:, 'airline#extensions#csv#column_display', 'Number')$/;"	v
s:column_width	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let s:column_width = &columns$/;"	v
s:column_width	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  let s:column_width = &columns$/;"	v
s:commit_expand	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:commit_expand = '!\\\\\\@!#\\=\\d*\\|!%'$/;"	v
s:commit_mode	plugged/vim-airline/autoload/airline/extensions/vimagit.vim	/^let s:commit_mode = {'ST': 'STAGING', 'CC': 'COMMIT', 'CA': 'AMEND'}$/;"	v
s:commondirs	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:commondirs = {}$/;"	v
s:compare_typeinfo	plugged/tagbar/autoload/tagbar/sorting.vim	/^let s:compare_typeinfo = {}$/;"	v
s:completions	plugged/vim-go/autoload/go/complete.vim	/^    let s:completions = l:state.matches$/;"	v
s:config	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:config = {}$/;"	v
s:config_prototype	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:config_prototype = {}$/;"	v
s:contexts	plugged/vim-airline/autoload/airline.vim	/^let s:contexts = {}$/;"	v
s:continuation	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:continuation = { 'directory' : {}, 'file' : {} }$/;"	v
s:converter	plugged/unite.vim/autoload/unite/filters/converter_abbr_word.vim	/^let s:converter = {$/;"	v
s:converter	plugged/unite.vim/autoload/unite/filters/converter_default.vim	/^let s:converter = {$/;"	v
s:converter	plugged/unite.vim/autoload/unite/filters/converter_file_directory.vim	/^let s:converter = {$/;"	v
s:converter	plugged/unite.vim/autoload/unite/filters/converter_full_path.vim	/^let s:converter = {$/;"	v
s:converter	plugged/unite.vim/autoload/unite/filters/converter_nothing.vim	/^let s:converter = {$/;"	v
s:converter	plugged/unite.vim/autoload/unite/filters/converter_relative_abbr.vim	/^let s:converter = {$/;"	v
s:converter	plugged/unite.vim/autoload/unite/filters/converter_relative_word.vim	/^let s:converter = {$/;"	v
s:converter	plugged/unite.vim/autoload/unite/filters/converter_smart_path.vim	/^let s:converter = {$/;"	v
s:converter	plugged/unite.vim/autoload/unite/filters/converter_tail.vim	/^let s:converter = {$/;"	v
s:converter	plugged/unite.vim/autoload/unite/filters/converter_tail_abbr.vim	/^let s:converter = {$/;"	v
s:converter	plugged/unite.vim/autoload/unite/filters/converter_uniq_word.vim	/^let s:converter = {$/;"	v
s:converter	plugged/unite.vim/autoload/unite/filters/converter_word_abbr.vim	/^let s:converter = {$/;"	v
s:core_funcrefs	plugged/vim-airline/autoload/airline.vim	/^let s:core_funcrefs = [$/;"	v
s:counter	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:counter = 0$/;"	v
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/ctrlp/decls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/fzf/decls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/alternate.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/asmfmt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/auto.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/calls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/calls_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/cmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/cmd_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/complete_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/config.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/config_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/coverage.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/debug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/debug_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/decls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/def.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/def_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/doc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/fillstruct.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/fillstruct_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/fmt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/fmt_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/guru.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/guru_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/highlight_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/iferr.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/impl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/impl_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/implements.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/import.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/import_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/indent_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/issue.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/job.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/job_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/keyify.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lint.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lint_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/list.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/completionitemkind.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/filechangetype.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/lsp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/lsp_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp/message.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/lsp_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/mod.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/package.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/package_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/path.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/play.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/promise.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/promise_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/referrers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/rename.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/sameids.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/statusline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/tags.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/tags_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/template.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/template_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/term.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/term_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/test_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/textobj.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/tool.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/tool_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/ui.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/uri.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/uri_test.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/go/util.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/autoload/gotest.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/compiler/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftdetect/gofiletype.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/asm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/go/snippets.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/go/tagbar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/ftplugin/gomod.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/indent/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/indent/gohtmltmpl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/plugin/go.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/scripts/runbench.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-go/scripts/runtest.vim	/^let s:cpo_save = &cpo$/;"	v
s:ctags_is_uctags	plugged/tagbar/autoload/tagbar.vim	/^let s:ctags_is_uctags     = 0$/;"	v
s:ctrlspace	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:ctrlspace = get(g:, 'CtrlSpaceLoaded', 0)$/;"	v
s:current_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let s:current_bufnr = cur$/;"	v
s:current_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  let s:current_bufnr = curbuf$/;"	v
s:current_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_bufnr = -1$/;"	v
s:current_bufnr	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_bufnr = -1$/;"	v
s:current_dir	plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:current_dir = expand('%:p:h')$/;"	v
s:current_file	plugged/vim-go/autoload/go/template.vim	/^let s:current_file = resolve(expand("<sfile>"))$/;"	v
s:current_fileencodings	plugged/vim-go/plugin/go.vim	/^let s:current_fileencodings = ''$/;"	v
s:current_fileformats	plugged/vim-go/plugin/go.vim	/^let s:current_fileformats = ''$/;"	v
s:current_line_hl	plugged/coc.nvim/autoload/coc/list.vim	/^let s:current_line_hl = 'CocListCurrent'$/;"	v
s:current_modified	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_modified = 0$/;"	v
s:current_modified	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_modified = 0$/;"	v
s:current_tabcnt	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:current_tabcnt = -1$/;"	v
s:current_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let s:current_tabline = b.build()$/;"	v
s:current_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  let s:current_tabline = b.build()$/;"	v
s:current_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_tabline = ''$/;"	v
s:current_tabnr	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:current_tabnr = -1$/;"	v
s:current_tabnr	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^  let s:current_tabnr = curtab$/;"	v
s:current_tabnr	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:current_tabnr = -1$/;"	v
s:current_tabnr	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:current_tabnr = -1$/;"	v
s:current_visible_buffers	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^  let s:current_visible_buffers = copy(b.buffers)$/;"	v
s:current_visible_buffers	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:current_visible_buffers = []$/;"	v
s:debug	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:debug   = 0 | :lockvar s:debug$/;"	v
s:debug_enabled	plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_enabled = 0$/;"	v
s:debug_file	plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_file = ''$/;"	v
s:decimal_group	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = ''$/;"	v
s:decimal_group	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = ','$/;"	v
s:decimal_group	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/default.vim	/^  let s:decimal_group = '.'$/;"	v
s:decimal_group	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^  let s:decimal_group = ''$/;"	v
s:decimal_group	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^  let s:decimal_group = ','$/;"	v
s:decimal_group	plugged/vim-airline/autoload/airline/extensions/wordcount/formatters/readingtime.vim	/^  let s:decimal_group = '.'$/;"	v
s:default_checks	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:default_checks = ['indent', 'trailing', 'mixed-indent-file', 'conflicts']$/;"	v
s:default_converters	plugged/unite.vim/autoload/unite/filters/converter_default.vim	/^let s:default_converters = ['converter_nothing']$/;"	v
s:default_list_type_commands	plugged/vim-go/autoload/go/list.vim	/^let s:default_list_type_commands = {$/;"	v
s:default_matchers	plugged/unite.vim/autoload/unite/filters/matcher_default.vim	/^let s:default_matchers = ['matcher_context']$/;"	v
s:default_metalinter	plugged/vim-go/autoload/go/config.vim	/^let s:default_metalinter = 'staticcheck'$/;"	v
s:default_sorters	plugged/unite.vim/autoload/unite/filters/sorter_default.vim	/^let s:default_sorters = ['sorter_nothing']$/;"	v
s:default_vals	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:default_vals = {$/;"	v
s:delayed_update_files	plugged/tagbar/autoload/tagbar.vim	/^let s:delayed_update_files = []$/;"	v
s:delimiterMap	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^let s:delimiterMap = {$/;"	v
s:denite_ver	plugged/vim-airline/autoload/airline/extensions/denite.vim	/^let s:denite_ver = (exists('*denite#get_status_mode') ? 2 : 3)$/;"	v
s:detail_bufnr	plugged/coc.nvim/autoload/coc/dialog.vim	/^let s:detail_bufnr = 0$/;"	v
s:diagnostic_hlgroups	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:diagnostic_hlgroups = ['CocErrorHighlight', 'CocWarningHighlight', 'CocInfoHighlight', 'CocHintHighlight', 'CocDeprecatedHighlight', 'CocUnusedHighlight']$/;"	v
s:diagnostics	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:diagnostics = {}$/;"	v
s:did_check_exe	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:diff_header_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:diff_header_pattern = '^diff --git \\%("\\=[abciow12]\/.*\\|\/dev\/null\\) \\%("\\=[abciow12]\/.*\\|\/dev\/null\\)$'$/;"	v
s:dir	plugged/vim-go/scripts/runtest.vim	/^let s:dir = expand('%:p:h')$/;"	v
s:dirArrows	plugged/nerdtree/syntax/nerdtree.vim	/^    let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowExpandable, '~]\\-')$/;"	v
s:dir_commit_file	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:dir_commit_file = '\\c^fugitive:\/\/\\%(\/[^\/]\\@=\\)\\=\\([^?#]\\{-1,\\}\\)\/\/\\%(\\(\\x\\{40,\\}\\|[0-3]\\)\\(\/[^?#]*\\)\\=\\)\\=$'$/;"	v
s:dir_commit_file	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:dir_commit_file = '\\c^fugitive:\/\/\\([^?#]\\{-\\}\\)\/\/\\%(\\(\\x\\{40,\\}\\|[0-3]\\)\\(\/[^?#]*\\)\\=\\)\\=$'$/;"	v
s:dir_for_worktree	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
s:disable_colors	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:disable_colors = []$/;"	v
s:done	plugged/vim-gitgutter/test/runner.vim	/^  let s:done += 1$/;"	v
s:done	plugged/vim-gitgutter/test/runner.vim	/^let s:done = 0$/;"	v
s:done	plugged/vim-go/scripts/runtest.vim	/^  let s:done += 1$/;"	v
s:done	plugged/vim-go/scripts/runtest.vim	/^let s:done = 0$/;"	v
s:duration	plugged/coc.nvim/autoload/coc/notify.vim	/^let s:duration = 300.0$/;"	v
s:edit_jobs	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:edit_jobs = {}$/;"	v
s:efm	plugged/vim-go/autoload/go/test.vim	/^let s:efm = ""$/;"	v
s:elapsed_time	plugged/vim-go/scripts/runtest.vim	/^  let s:elapsed_time = substitute(reltimestr(reltime(s:started)), '^\\s*\\(.\\{-}\\)\\s*$', '\\1', '')$/;"	v
s:enabled	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let s:enabled = get(g:, 'airline#extensions#localsearch#enabled', 1)$/;"	v
s:enabled	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:enabled = get(g:, 'airline#extensions#whitespace#enabled', 1)$/;"	v
s:engine	plugged/vim-go/ftplugin/go/snippets.vim	/^let s:engine = go#config#SnippetEngine()$/;"	v
s:env_cache	plugged/vim-go/autoload/go/util.vim	/^let s:env_cache = {}$/;"	v
s:err_remain_text	plugged/coc.nvim/autoload/coc/task.vim	/^let s:err_remain_text = {}$/;"	v
s:error	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:error   = 3 | :lockvar s:error$/;"	v
s:error_icon	plugged/coc.nvim/autoload/coc/notify.vim	/^let s:error_icon = get(g:, 'coc_notify_error_icon', s:utf ? "\\uf057" : 'E')$/;"	v
s:error_sign	plugged/coc.nvim/autoload/coc.vim	/^let s:error_sign = get(g:, 'coc_status_error_sign', has('mac') && s:utf ? "\\u274c " : 'E ')$/;"	v
s:error_symbol	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:error_symbol = get(g:, 'airline#extensions#languageclient#error_symbol', 'E:')$/;"	v
s:error_symbol	plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^let s:error_symbol = get(g:, 'airline#extensions#neomake#error_symbol', 'E:')$/;"	v
s:error_symbol	plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^let s:error_symbol = get(g:, 'airline#extensions#syntastic#error_symbol', 'E:')$/;"	v
s:error_symbol	plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^let s:error_symbol = get(g:, 'airline#extensions#vim9lsp#error_symbol', 'E:')$/;"	v
s:error_symbol	plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:error_symbol = get(g:, 'airline#extensions#ycm#error_symbol', 'E:')$/;"	v
s:errored	plugged/vim-gitgutter/test/runner.vim	/^      let s:errored = 0$/;"	v
s:errored	plugged/vim-gitgutter/test/runner.vim	/^let s:errored = 0$/;"	v
s:errors	plugged/vim-gitgutter/test/runner.vim	/^      let s:errors += 1$/;"	v
s:errors	plugged/vim-gitgutter/test/runner.vim	/^  let s:errors += 1$/;"	v
s:errors	plugged/vim-gitgutter/test/runner.vim	/^let s:errors = 0$/;"	v
s:exec_paths	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:exec_paths = {}$/;"	v
s:executables	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:executables = {}$/;"	v
s:expand	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:expand = '\\%(\\(' . s:var . '\\)\\(' . s:flag . '*\\)\\(:S\\)\\=\\)'$/;"	v
s:expand_bufnr	plugged/tagbar/autoload/tagbar.vim	/^let s:expand_bufnr = -1$/;"	v
s:ext	plugged/vim-airline/autoload/airline/extensions.vim	/^let s:ext = {}$/;"	v
s:ext	plugged/vim-airline/autoload/airline/extensions.vim	/^let s:ext._theme_funcrefs = []$/;"	v
s:fail	plugged/vim-gitgutter/test/runner.vim	/^      let s:fail += 1$/;"	v
s:fail	plugged/vim-gitgutter/test/runner.vim	/^let s:fail = 0$/;"	v
s:fail	plugged/vim-go/scripts/runtest.vim	/^    let s:fail += 1$/;"	v
s:fail	plugged/vim-go/scripts/runtest.vim	/^let s:fail = 0$/;"	v
s:fct	plugged/vim-go/autoload/go/lsp/filechangetype.vim	/^let s:fct = {$/;"	v
s:fg0	colors/gruvbox.vim	/^  let s:fg0 = s:gb.dark0$/;"	v
s:fg0	colors/gruvbox.vim	/^  let s:fg0 = s:gb.light0$/;"	v
s:fg1	colors/gruvbox.vim	/^  let s:fg1 = s:gb.dark1$/;"	v
s:fg1	colors/gruvbox.vim	/^  let s:fg1 = s:gb.light1$/;"	v
s:fg1	colors/gruvbox.vim	/^  let s:fg1[1]    = 15$/;"	v
s:fg2	colors/gruvbox.vim	/^  let s:fg2 = s:gb.dark2$/;"	v
s:fg2	colors/gruvbox.vim	/^  let s:fg2 = s:gb.light2$/;"	v
s:fg3	colors/gruvbox.vim	/^  let s:fg3 = s:gb.dark3$/;"	v
s:fg3	colors/gruvbox.vim	/^  let s:fg3 = s:gb.light3$/;"	v
s:fg4	colors/gruvbox.vim	/^  let s:fg4 = s:gb.dark4$/;"	v
s:fg4	colors/gruvbox.vim	/^  let s:fg4 = s:gb.light4$/;"	v
s:fg4	colors/gruvbox.vim	/^  let s:fg4[1]    = 7$/;"	v
s:fg4_256	colors/gruvbox.vim	/^  let s:fg4_256 = s:gb.dark4_256$/;"	v
s:fg4_256	colors/gruvbox.vim	/^  let s:fg4_256 = s:gb.light4_256$/;"	v
s:file_bookmark_action	plugged/unite.vim/plugin/unite/bookmark.vim	/^let s:file_bookmark_action = {$/;"	v
s:file_commit_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_commit_pattern = s:file_pattern . '\\|^\\%(\\l\\{3,\\} \\)\\=[0-9a-f]\\{4,\\} '$/;"	v
s:file_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_pattern = '^[A-Z?] .\\|^diff --'$/;"	v
s:filetype_map	plugged/coc.nvim/autoload/coc/list.vim	/^let s:filetype_map = {$/;"	v
s:filetype_overrides	plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['nerdtree'] = [ get(g:, 'NERDTreeStatusline', 'NERD'), '' ]$/;"	v
s:filetype_overrides	plugged/vim-airline/autoload/airline/extensions.vim	/^  let s:filetype_overrides['nerdtree'] = ['NERDTree', '']$/;"	v
s:filetype_overrides	plugged/vim-airline/autoload/airline/extensions.vim	/^let s:filetype_overrides = {$/;"	v
s:filetype_regex_overrides	plugged/vim-airline/autoload/airline/extensions.vim	/^let s:filetype_regex_overrides = {}$/;"	v
s:first_rtp	autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:first_sign_id	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:first_sign_id = 3000$/;"	v
s:flag	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:flag = '\\%(:[p8~.htre]\\|:g\\=s\\(.\\).\\{-\\}\\1.\\{-\\}\\1\\)'$/;"	v
s:flags	plugged/vim-airline/autoload/airline/parts.vim	/^let s:flags = {$/;"	v
s:flags_noregion	plugged/vim-airline/autoload/airline/parts.vim	/^  let s:flags_noregion[split(s:key, '_')[0]] = s:flags[s:key]$/;"	v
s:flags_noregion	plugged/vim-airline/autoload/airline/parts.vim	/^let s:flags_noregion = {}$/;"	v
s:fnameescape	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:fnameescape = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
s:fnameescape	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:fnameescape = " \\t\\n*?`%#'\\"|!<"$/;"	v
s:focus_was_lost	plugged/vim-gitgutter/plugin/gitgutter.vim	/^  let s:focus_was_lost = 0$/;"	v
s:focusgained_ignore_time	plugged/vim-airline/autoload/airline/util.vim	/^let s:focusgained_ignore_time = 0$/;"	v
s:formatter	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^      let s:formatter = 'default'$/;"	v
s:formatter	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let s:formatter = get(g:, 'airline#extensions#wordcount#formatter', 'default')$/;"	v
s:frames	plugged/coc.nvim/autoload/coc/dialog.vim	/^let s:frames = ['·  ', '·· ', '···', ' ··', '  ·', '   ']$/;"	v
s:funcs	plugged/coc.nvim/autoload/coc/api.vim	/^let s:funcs = {}$/;"	v
s:gap_between_regions	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^let s:gap_between_regions = 5$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb = {}$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.aqua   = s:aqua$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.bg0 = s:bg0$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.bg1 = s:bg1$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.bg2 = s:bg2$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.bg3 = s:bg3$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.bg4 = s:bg4$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.blue   = s:blue$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.bright_aqua    = ['#8ec07c', 108]     " 142-192-124$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.bright_blue    = ['#83a598', 109]     " 131-165-152$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.bright_green   = ['#b8bb26', 142]     " 184-187-38$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.bright_orange  = ['#fe8019', 208]     " 254-128-25$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.bright_purple  = ['#d3869b', 175]     " 211-134-155$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.bright_red     = ['#fb4934', 167]     " 251-73-52$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.bright_yellow  = ['#fabd2f', 214]     " 250-189-47$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.dark0       = ['#282828', 235]     " 40-40-40$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.dark0_hard  = ['#1d2021', 234]     " 29-32-33$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.dark0_soft  = ['#32302f', 236]     " 50-48-47$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.dark1       = ['#3c3836', 237]     " 60-56-54$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.dark2       = ['#504945', 239]     " 80-73-69$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.dark3       = ['#665c54', 241]     " 102-92-84$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.dark4       = ['#7c6f64', 243]     " 124-111-100$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.dark4_256   = ['#7c6f64', 243]     " 124-111-100$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.faded_aqua     = ['#427b58', 66]      " 66-123-88$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.faded_blue     = ['#076678', 24]      " 7-102-120$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.faded_green    = ['#79740e', 100]     " 121-116-14$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.faded_orange   = ['#af3a03', 130]     " 175-58-3$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.faded_purple   = ['#8f3f71', 96]      " 143-63-113$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.faded_red      = ['#9d0006', 88]      " 157-0-6$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.faded_yellow   = ['#b57614', 136]     " 181-118-20$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.fg0 = s:fg0$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.fg1 = s:fg1$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.fg2 = s:fg2$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.fg3 = s:fg3$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.fg4 = s:fg4$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.fg4_256 = s:fg4_256$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.gray = s:gray$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.gray_244    = ['#928374', 244]     " 146-131-116$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.gray_245    = ['#928374', 245]     " 146-131-116$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.green  = s:green$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.light0      = ['#fbf1c7', 229]     " 253-244-193$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.light0_hard = ['#f9f5d7', 230]     " 249-245-215$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.light0_soft = ['#f2e5bc', 228]     " 242-229-188$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.light1      = ['#ebdbb2', 223]     " 235-219-178$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.light2      = ['#d5c4a1', 250]     " 213-196-161$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.light3      = ['#bdae93', 248]     " 189-174-147$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.light4      = ['#a89984', 246]     " 168-153-132$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.light4_256  = ['#a89984', 246]     " 168-153-132$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.neutral_aqua   = ['#689d6a', 72]      " 104-157-106$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.neutral_blue   = ['#458588', 66]      " 69-133-136$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.neutral_green  = ['#98971a', 106]     " 152-151-26$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.neutral_orange = ['#d65d0e', 166]     " 214-93-14$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.neutral_purple = ['#b16286', 132]     " 177-98-134$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.neutral_red    = ['#cc241d', 124]     " 204-36-29$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.neutral_yellow = ['#d79921', 172]     " 215-153-33$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.orange = s:orange$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.purple = s:purple$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.red    = s:red$/;"	v
s:gb	colors/gruvbox.vim	/^let s:gb.yellow = s:yellow$/;"	v
s:git_index_file_env	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:git_index_file_env = {}$/;"	v
s:git_versions	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:git_versions = {}$/;"	v
s:globsubs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:globsubs = {$/;"	v
s:go_decls_var	plugged/vim-go/autoload/ctrlp/decls.vim	/^let s:go_decls_var = {$/;"	v
s:go_major_version	plugged/vim-go/autoload/go/mod.vim	/^let s:go_major_version = ""$/;"	v
s:go_stack	plugged/vim-go/autoload/go/def.vim	/^let s:go_stack = []$/;"	v
s:go_stack_level	plugged/vim-go/autoload/go/def.vim	/^let s:go_stack_level = 0$/;"	v
s:go_test_show_name	plugged/vim-go/autoload/go/test.vim	/^let s:go_test_show_name = 0$/;"	v
s:goarch	plugged/vim-go/autoload/go/package.vim	/^    let s:goarch = '*'$/;"	v
s:goarch	plugged/vim-go/autoload/go/package.vim	/^    let s:goarch = g:golang_goarch$/;"	v
s:goarch	plugged/vim-go/autoload/go/package.vim	/^let s:goarch = $GOARCH$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^    let s:goos = '*'$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^    let s:goos = 'darwin'$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^    let s:goos = 'windows'$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^    let s:goos = g:golang_goos$/;"	v
s:goos	plugged/vim-go/autoload/go/package.vim	/^let s:goos = $GOOS$/;"	v
s:gopath	plugged/vim-go/scripts/runtest.vim	/^let s:gopath = $GOPATH$/;"	v
s:got_fmt_error	plugged/vim-go/autoload/go/asmfmt.vim	/^let s:got_fmt_error = 0$/;"	v
s:gray	colors/gruvbox.vim	/^  let s:gray = s:gb.gray_244$/;"	v
s:gray	colors/gruvbox.vim	/^  let s:gray = s:gb.gray_245$/;"	v
s:gray	colors/gruvbox.vim	/^  let s:gray[1]   = 8$/;"	v
s:green	colors/gruvbox.vim	/^  let s:green  = s:gb.bright_green$/;"	v
s:green	colors/gruvbox.vim	/^  let s:green  = s:gb.faded_green$/;"	v
s:green	colors/gruvbox.vim	/^  let s:green[1]  = 10$/;"	v
s:grep_combine_flags	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:grep_combine_flags = '[aiIrhHEGPFnlLzocpWq]\\{-\\}'$/;"	v
s:gui	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:gui = has('gui_running') || has('nvim')$/;"	v
s:has_percent_eval	plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^let s:has_percent_eval = v:version > 802 || (v:version == 802 && has("patch2854"))$/;"	v
s:has_strcharpart	plugged/vim-airline/autoload/airline/util.vim	/^let s:has_strcharpart = exists('*strcharpart')$/;"	v
s:has_strchars	plugged/vim-airline/autoload/airline/util.vim	/^let s:has_strchars = exists('*strchars')$/;"	v
s:hash_colors	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:hash_colors = {}$/;"	v
s:head_cache	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:head_cache = {}$/;"	v
s:head_format	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:head_format = get(g:, 'airline#extensions#branch#format', 0)$/;"	v
s:hide_pum	plugged/coc.nvim/autoload/coc.vim	/^let s:hide_pum = has('nvim-0.6.1') || has('patch-8.2.3389')$/;"	v
s:hide_pum	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:hide_pum = has('nvim-0.6.1') || has('patch-8.2.3389')$/;"	v
s:highlight_groups	plugged/vim-airline/autoload/airline/extensions/tabline/ctrlspace.vim	/^let s:highlight_groups = ['hid', 0, '', 'sel', 'mod_unsel', 0, 'mod_unsel', 'mod']$/;"	v
s:highlight_groups	plugged/vim-airline/autoload/airline/extensions/tabline/tabws.vim	/^let s:highlight_groups = ['hid', 0, '', 'sel', 'mod_unsel', 0, 'mod_unsel', 'mod']$/;"	v
s:hl_groups	plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:hl_groups = {}$/;"	v
s:hls_cursor	colors/gruvbox.vim	/^  let s:hls_cursor = get(s:gb, g:gruvbox_hls_cursor)$/;"	v
s:hls_cursor	colors/gruvbox.vim	/^let s:hls_cursor = s:orange$/;"	v
s:hunk_re	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:hunk_re = '^@@ -\\(\\d\\+\\),\\?\\(\\d*\\) +\\(\\d\\+\\),\\?\\(\\d*\\) @@'$/;"	v
s:hunk_symbols	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^let s:hunk_symbols = get(g:, 'airline#extensions#hunks#hunk_symbols', ['+', '~', '-'])$/;"	v
s:iTerm_escape_template	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:iTerm_escape_template = '\\033]Pl%s\\033\\\\'$/;"	v
s:ics	plugged/tagbar/syntax/tagbar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:id	plugged/vim-go/autoload/ctrlp/decls.vim	/^let s:id = g:ctrlp_builtins + len(g:ctrlp_ext_vars)$/;"	v
s:id_types	plugged/coc.nvim/autoload/coc/api.vim	/^let s:id_types = {}$/;"	v
s:ignore	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:ignore = s:is_vim || has('nvim-0.5.0') ? "\\<Ignore>" : "\\<space>\\<bs>"$/;"	v
s:ignore_time	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^let s:ignore_time = 0$/;"	v
s:import_paths	plugged/vim-go/autoload/go/package.vim	/^let s:import_paths = {}$/;"	v
s:in_gopath	plugged/vim-go/autoload/go/package.vim	/^let s:in_gopath = {}$/;"	v
s:indent	plugged/vim-gitgutter/test/runner.vim	/^let s:indent = ''$/;"	v
s:indent	plugged/vim-gitgutter/test/runner.vim	/^let s:indent = max(map(copy(s:tests), {_, val -> len(FriendlyName(val))}))$/;"	v
s:indexes	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:indexes = {}$/;"	v
s:indicatorMap	plugged/nerdtree-git-plugin/autoload/gitstatus.vim	/^    let s:indicatorMap = {$/;"	v
s:info	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:info    = 1 | :lockvar s:info$/;"	v
s:info_icon	plugged/coc.nvim/autoload/coc/notify.vim	/^let s:info_icon = get(g:, 'coc_notify_info_icon', s:utf ? "\\uf06a" : 'I')$/;"	v
s:init	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:init=0$/;"	v
s:init_done	plugged/tagbar/autoload/tagbar.vim	/^let s:init_done = 0$/;"	v
s:initial_go_path	plugged/vim-go/autoload/go/path.vim	/^let s:initial_go_path = ""$/;"	v
s:inserted	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:inserted = 0$/;"	v
s:interval	plugged/coc.nvim/autoload/coc/notify.vim	/^let s:interval = get(g:, 'coc_notify_interval', s:is_vim ? 50 : 20)$/;"	v
s:inverse	colors/gruvbox.vim	/^  let s:inverse = ''$/;"	v
s:inverse	colors/gruvbox.vim	/^let s:inverse = 'inverse,'$/;"	v
s:invert_selection	colors/gruvbox.vim	/^    let s:invert_selection = ''$/;"	v
s:invert_selection	colors/gruvbox.vim	/^let s:invert_selection = s:inverse$/;"	v
s:invert_signs	colors/gruvbox.vim	/^    let s:invert_signs = s:inverse$/;"	v
s:invert_signs	colors/gruvbox.vim	/^let s:invert_signs = ''$/;"	v
s:invert_tabline	colors/gruvbox.vim	/^    let s:invert_tabline = s:inverse$/;"	v
s:invert_tabline	colors/gruvbox.vim	/^let s:invert_tabline = ''$/;"	v
s:is_AppleTerminal	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_AppleTerminal = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'Apple_Terminal'$/;"	v
s:is_case_tolerant	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^let s:is_case_tolerant = filereadable(expand('<sfile>:r') . '.VIM')$/;"	v
s:is_cygwin	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_dark	colors/gruvbox.vim	/^let s:is_dark=(&background == 'dark')$/;"	v
s:is_good	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_good = !has('gui_running') && !s:is_win && !s:is_AppleTerminal$/;"	v
s:is_gvim	plugged/coc.nvim/plugin/coc.vim	/^let s:is_gvim = s:is_vim && has("gui_running")$/;"	v
s:is_iTerm	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_iTerm = exists('$TERM_PROGRAM') && $TERM_PROGRAM =~# 'iTerm.app'$/;"	v
s:is_mac	plugged/coc.nvim/autoload/coc/ui.vim	/^let s:is_mac = has('mac')$/;"	v
s:is_mac	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_mac	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_mac	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_maximized	plugged/tagbar/autoload/tagbar.vim	/^let s:is_maximized    = 0$/;"	v
s:is_unix	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_unix	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_unix	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^let s:is_unix = has('unix')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/client.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/compat.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/dialog.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/float.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/list.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/notify.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/snippet.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/task.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/terminal.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/ui.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/util.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/vtext.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/autoload/coc/window.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vim	plugged/coc.nvim/plugin/coc.vim	/^let s:is_vim = !has('nvim')$/;"	v
s:is_vital_vim	plugged/unite.vim/autoload/vital/unite.vim	/^let s:is_vital_vim = s:plugin_name is# 'vital'$/;"	v
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:is_win	plugged/coc.nvim/autoload/coc/client.vim	/^let s:is_win = has("win32") || has("win64")$/;"	v
s:is_win	plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:is_win = has("win32") || has("win64")$/;"	v
s:is_win	plugged/coc.nvim/autoload/coc/terminal.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/coc.nvim/autoload/coc/ui.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/coc.nvim/autoload/coc/util.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:is_win = gitstatus#isWin()$/;"	v
s:is_win	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win32term	plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:is_win32term = (has('win32') || has('win64')) &&$/;"	v
s:is_windows	plugged/unite.vim/autoload/unite/sources/directory.vim	/^let s:is_windows = unite#util#is_windows()$/;"	v
s:is_windows	plugged/unite.vim/autoload/unite/sources/file.vim	/^let s:is_windows = unite#util#is_windows()$/;"	v
s:is_windows	plugged/unite.vim/autoload/unite/util.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64')$/;"	v
s:is_windows	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_windows	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:italic	colors/gruvbox.vim	/^  let s:italic = ''$/;"	v
s:italic	colors/gruvbox.vim	/^let s:italic = 'italic,'$/;"	v
s:italicize_comments	colors/gruvbox.vim	/^    let s:italicize_comments = ''$/;"	v
s:italicize_comments	colors/gruvbox.vim	/^let s:italicize_comments = s:italic$/;"	v
s:italicize_strings	colors/gruvbox.vim	/^    let s:italicize_strings = s:italic$/;"	v
s:italicize_strings	colors/gruvbox.vim	/^let s:italicize_strings = ''$/;"	v
s:item_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:item_pattern = s:file_commit_pattern . '\\|^@@'$/;"	v
s:job_info	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:job_info = {}$/;"	v
s:jobs	plugged/vim-gitgutter/autoload/gitgutter/async.vim	/^let s:jobs = {}$/;"	v
s:keyMaps	plugged/nerdtree/lib/nerdtree/key_map.vim	/^let s:keyMaps = {}$/;"	v
s:keymap_arguments	plugged/coc.nvim/autoload/coc/api.vim	/^let s:keymap_arguments = ['nowait', 'silent', 'script', 'expr', 'unique']$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^let s:kind.action_table.delete = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^let s:kind.action_table.fdelete = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^let s:kind.action_table.goto = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^let s:kind.action_table.open = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^let s:kind.action_table.preview = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^let s:kind.action_table.rename = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^let s:kind.action_table.unload = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^let s:kind.action_table.wipeout = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table.cd = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table.lcd = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table.narrow = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table.project_cd = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table.tabnew_cd = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table.tabnew_lcd = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table.tabvimfiler = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table.tabvimshell = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table.vimfiler = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table.vimshell = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table['rec'] =$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table['rec\/async'] =$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table['rec_parent'] =$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table['rec_parent\/async'] =$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table['rec_project'] =$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:kind.action_table['rec_project\/async'] =$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/command.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/command.vim	/^let s:kind.action_table.edit = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/command.vim	/^let s:kind.action_table.execute = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/command.vim	/^let s:kind.action_table.grep = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/common.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/common.vim	/^let s:kind.action_table.append = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/common.vim	/^let s:kind.action_table.echo = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/common.vim	/^let s:kind.action_table.ex = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/common.vim	/^let s:kind.action_table.insert = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/common.vim	/^let s:kind.action_table.insert_directory = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/common.vim	/^let s:kind.action_table.nop = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/common.vim	/^let s:kind.action_table.preview = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/common.vim	/^let s:kind.action_table.yank = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/common.vim	/^let s:kind.action_table.yank_escape = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/completion.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/completion.vim	/^let s:kind.action_table.insert = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/completion.vim	/^let s:kind.action_table.preview = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/directory.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.argadd = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.backup = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.diff = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.dirdiff = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.exrename = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.find = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.grep = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.mkdir = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.open = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.preview = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.read = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.rename = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.vimgrep = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:kind.action_table.wunix = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.copy = deepcopy(s:kind.action_table.vimfiler__copy)$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.copy.is_listed = 1$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.move =$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.move.is_listed = 1$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.unite__new_candidate =$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.vimfiler__copy = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.vimfiler__delete = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.vimfiler__execute = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.vimfiler__external_filer = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.vimfiler__mkdir = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.vimfiler__move = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.vimfiler__newfile = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.vimfiler__rename = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.vimfiler__shell = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.vimfiler__shellcmd = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:kind.action_table.vimfiler__write = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/guicmd.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/guicmd.vim	/^let s:kind.action_table.edit = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/guicmd.vim	/^let s:kind.action_table.execute = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.above = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.below = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.choose = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.left = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.persist_open = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.right = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.split = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.splitswitch = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.switch = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.tabopen = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.tabsplit = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.tabswitch = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.vsplit = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:kind.action_table.vsplitswitch = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/source.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/source.vim	/^let s:kind.action_table.edit = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/source.vim	/^let s:kind.action_table.start = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^  let s:kind.action_table.rename = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^  let s:kind.parents = ['cdable']$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^let s:kind.action_table.delete = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^let s:kind.action_table.open = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^let s:kind.action_table.preview = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^let s:kind.action_table.unite__new_candidate = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/uri.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/uri.vim	/^let s:kind.action_table.start = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/window.vim	/^let s:kind = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/window.vim	/^let s:kind.action_table.delete = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/window.vim	/^let s:kind.action_table.jump = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/window.vim	/^let s:kind.action_table.only = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/window.vim	/^let s:kind.action_table.open = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/window.vim	/^let s:kind.action_table.preview = {$/;"	v
s:kind	plugged/unite.vim/autoload/unite/kinds/word.vim	/^let s:kind = {$/;"	v
s:known_files	plugged/tagbar/autoload/tagbar.vim	/^let s:known_files = {$/;"	v
s:known_files	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:last_alt_bufnr	plugged/tagbar/autoload/tagbar.vim	/^let s:last_alt_bufnr = -1$/;"	v
s:last_highlight_tline	plugged/tagbar/autoload/tagbar.vim	/^let s:last_highlight_tline = 0$/;"	v
s:last_mode	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:last_mode = ''$/;"	v
s:last_rtp	autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:last_status	plugged/vim-go/autoload/go/statusline.vim	/^let s:last_status = ""$/;"	v
s:last_time	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:last_time = reltime()$/;"	v
s:last_times	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:last_times = {}$/;"	v
s:last_wildignores	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:layout	plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:layout = get(g:, 'airline#extensions#default#layout', [$/;"	v
s:lenSpaceStr	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^let s:lenSpaceStr = strlen(s:spaceStr)$/;"	v
s:list_win_bufnr	plugged/coc.nvim/autoload/coc/dialog.vim	/^let s:list_win_bufnr = 0$/;"	v
s:listener	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:listener = gitstatus#listener#New(g:)$/;"	v
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded	plugged/unite.vim/autoload/vital/unite.vim	/^let s:loaded = {}$/;"	v
s:loaded	plugged/vim-airline/autoload/airline/init.vim	/^let s:loaded = 0$/;"	v
s:loaded_ext	plugged/vim-airline/autoload/airline/extensions.vim	/^let s:loaded_ext = []$/;"	v
s:log	plugged/vim-go/autoload/go/lsp.vim	/^let s:log = []$/;"	v
s:log_diff_context	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:log_diff_context = '{"filename": fugitive#Find(v:val . from, a:dir), "lnum": get(offsets, v:key), "module": strpart(v:val, 0, len(a:state.base_module)) . from}'$/;"	v
s:log_file	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:log_file    = s:plugin_dir.'gitgutter.log'$/;"	v
s:logfile	plugged/coc.nvim/autoload/coc/client.vim	/^    let s:logfile = resolve($NODE_CLIENT_LOG_FILE)$/;"	v
s:logfile	plugged/coc.nvim/autoload/coc/client.vim	/^    let s:logfile = tempname()$/;"	v
s:logger	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:logger = gitstatus#log#NewLogger(g:NERDTreeGitStatusLogLevel)$/;"	v
s:logs	plugged/vim-go/scripts/runtest.vim	/^let s:logs = []$/;"	v
s:low_color	colors/jellybeans.vim	/^  let s:low_color = 0$/;"	v
s:low_color	colors/jellybeans.vim	/^  let s:low_color = 1$/;"	v
s:lsp_progress	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^let s:lsp_progress = []$/;"	v
s:lspfactory	plugged/vim-go/autoload/go/lsp.vim	/^let s:lspfactory = {}$/;"	v
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:map_next	plugged/coc.nvim/autoload/coc/snippet.vim	/^let s:map_next = 1$/;"	v
s:map_prev	plugged/coc.nvim/autoload/coc/snippet.vim	/^let s:map_prev = 1$/;"	v
s:mapargs	plugged/vim-go/autoload/go/debug.vim	/^  let s:mapargs = {}$/;"	v
s:matchParenGuiBg	colors/jellybeans.vim	/^    let s:matchParenGuiBg = "000000"$/;"	v
s:matchParenGuiBg	colors/jellybeans.vim	/^    let s:matchParenGuiBg = "556779"$/;"	v
s:matchParenGuiFg	colors/jellybeans.vim	/^    let s:matchParenGuiFg = "dd0093"$/;"	v
s:matchParenGuiFg	colors/jellybeans.vim	/^    let s:matchParenGuiFg = "ffffff"$/;"	v
s:matchParenTermBg	colors/jellybeans.vim	/^    let s:matchParenTermBg = ""$/;"	v
s:matchParenTermBg	colors/jellybeans.vim	/^    let s:matchParenTermBg = s:termBlack$/;"	v
s:matchParenTermFg	colors/jellybeans.vim	/^    let s:matchParenTermFg = ""$/;"	v
s:matchParenTermFg	colors/jellybeans.vim	/^    let s:matchParenTermFg = "Magenta"$/;"	v
s:match_ns	plugged/coc.nvim/autoload/coc/list.vim	/^let s:match_ns = coc#highlight#create_namespace('list-match')$/;"	v
s:matcher	plugged/unite.vim/autoload/unite/filters/matcher_context.vim	/^let s:matcher = {$/;"	v
s:matcher	plugged/unite.vim/autoload/unite/filters/matcher_default.vim	/^let s:matcher = {$/;"	v
s:matcher	plugged/unite.vim/autoload/unite/filters/matcher_fuzzy.vim	/^let s:matcher = {$/;"	v
s:matcher	plugged/unite.vim/autoload/unite/filters/matcher_glob.vim	/^let s:matcher = {$/;"	v
s:matcher	plugged/unite.vim/autoload/unite/filters/matcher_hide_current_file.vim	/^let s:matcher = {$/;"	v
s:matcher	plugged/unite.vim/autoload/unite/filters/matcher_hide_hidden_files.vim	/^let s:matcher = {$/;"	v
s:matcher	plugged/unite.vim/autoload/unite/filters/matcher_migemo.vim	/^let s:matcher = {$/;"	v
s:matcher	plugged/unite.vim/autoload/unite/filters/matcher_project_files.vim	/^let s:matcher = {$/;"	v
s:matcher	plugged/unite.vim/autoload/unite/filters/matcher_project_ignore_files.vim	/^let s:matcher = {$/;"	v
s:matcher	plugged/unite.vim/autoload/unite/filters/matcher_regexp.vim	/^let s:matcher = {$/;"	v
s:max_src_id	plugged/coc.nvim/autoload/coc/api.vim	/^let s:max_src_id = 1000$/;"	v
s:me	autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:merge_heads	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:merge_heads = ['MERGE_HEAD', 'REBASE_HEAD', 'CHERRY_PICK_HEAD', 'REVERT_HEAD']$/;"	v
s:messages	plugged/vim-gitgutter/test/runner.vim	/^let s:messages = []$/;"	v
s:mq_jobs	plugged/vim-airline/autoload/airline/async.vim	/^let s:mq_jobs        = {}$/;"	v
s:n10	plugged/coc.nvim/autoload/coc/vtext.vim	/^let s:n10 = has('nvim-0.10.0')$/;"	v
s:name	plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:name = 'coc'$/;"	v
s:names	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:names = {'0': 'index', '1': 'orig', '2':'fetch', '3':'merge'}$/;"	v
s:namespace_cache	plugged/coc.nvim/autoload/coc/api.vim	/^let s:namespace_cache = {}$/;"	v
s:namespace_id	plugged/coc.nvim/autoload/coc/api.vim	/^let s:namespace_id = 1$/;"	v
s:namespace_map	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:namespace_map = {}$/;"	v
s:nearby_disabled	plugged/tagbar/autoload/tagbar.vim	/^let s:nearby_disabled = 0$/;"	v
s:need_migrate_vals	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^let s:need_migrate_vals = {$/;"	v
s:need_trans	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:need_trans	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:neocbs	plugged/vim-go/autoload/go/job.vim	/^let s:neocbs = []$/;"	v
s:new_log_session	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:new_log_session = 1$/;"	v
s:new_window	plugged/tagbar/autoload/tagbar.vim	/^let s:new_window      = 1$/;"	v
s:next_sign_id	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:next_sign_id  = s:first_sign_id$/;"	v
s:nomodeline	plugged/vim-airline/autoload/airline/util.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has("patch438"))) ? '<nomodeline>' : ''$/;"	v
s:nomodeline	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''$/;"	v
s:nomodeline	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''$/;"	v
s:nomodeline	plugged/vim-gitgutter/plugin/gitgutter.vim	/^let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''$/;"	v
s:non_zero_only	plugged/vim-airline/autoload/airline/extensions/hunks.vim	/^let s:non_zero_only = get(g:, 'airline#extensions#hunks#non_zero_only', 0)$/;"	v
s:none	colors/gruvbox.vim	/^let s:none = ['NONE', 'NONE']$/;"	v
s:ns_id	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:ns_id = 1$/;"	v
s:number_column	colors/gruvbox.vim	/^  let s:number_column = get(s:gb, g:gruvbox_number_column)$/;"	v
s:number_column	colors/gruvbox.vim	/^let s:number_column = s:none$/;"	v
s:number_map	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = &encoding == 'utf-8'$/;"	v
s:number_map	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:number_map = {$/;"	v
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait'))$/;"	v
s:nvim_50	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:nvim_50 = has('nvim-0.5.0')$/;"	v
s:nvim_60	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:nvim_60 = has('nvim-0.6.0')$/;"	v
s:old_cpo	plugged/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpoptions$/;"	v
s:orange	colors/gruvbox.vim	/^  let s:orange = s:gb.bright_orange$/;"	v
s:orange	colors/gruvbox.vim	/^  let s:orange = s:gb.faded_orange$/;"	v
s:origin	plugged/unite.vim/autoload/unite/sources/grep_git.vim	/^let s:origin = unite#sources#grep#define()$/;"	v
s:osDefaultCaseSensitiveFS	plugged/nerdtree/autoload/nerdtree.vim	/^    let s:osDefaultCaseSensitiveFS = 0$/;"	v
s:osDefaultCaseSensitiveFS	plugged/nerdtree/autoload/nerdtree.vim	/^    let s:osDefaultCaseSensitiveFS = 1$/;"	v
s:out_remain_text	plugged/coc.nvim/autoload/coc/task.vim	/^let s:out_remain_text = {}$/;"	v
s:outline_preview_bufnr	plugged/coc.nvim/autoload/coc/ui.vim	/^let s:outline_preview_bufnr = 0$/;"	v
s:overrides	colors/jellybeans.vim	/^    let s:overrides["background"] = {}$/;"	v
s:overrides	colors/jellybeans.vim	/^    let s:overrides["background"]["256ctermbg"] = "NONE"$/;"	v
s:overrides	colors/jellybeans.vim	/^    let s:overrides["background"]["256ctermbg"] = g:jellybeans_background_color_256$/;"	v
s:overrides	colors/jellybeans.vim	/^    let s:overrides["background"]["ctermbg"] = "NONE"$/;"	v
s:overrides	colors/jellybeans.vim	/^    let s:overrides["background"]["guibg"] = g:jellybeans_background_color$/;"	v
s:overrides	colors/jellybeans.vim	/^  let s:overrides = deepcopy(s:overrides)$/;"	v
s:overrides	colors/jellybeans.vim	/^  let s:overrides = g:jellybeans_overrides$/;"	v
s:overrides	colors/jellybeans.vim	/^  let s:overrides = {}$/;"	v
s:p	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let s:p = {}$/;"	v
s:p	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let s:p.current_selection = { 'guibg': s:c.surface0, 'gui': "bold" }$/;"	v
s:p	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let s:p.current_selection_sign = copy(s:p.selected_sign)$/;"	v
s:p	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let s:p.display = { 'guibg': s:c.mantle }$/;"	v
s:p	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let s:p.indicator = { 'guifg': s:c.subtext1, 'guibg': s:c.mantle }$/;"	v
s:p	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let s:p.input = s:p.display$/;"	v
s:p	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let s:p.preview = { 'guibg': s:c.base }$/;"	v
s:p	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let s:p.search_text = { 'guifg': s:c.text, 'guibg': s:c.mantle, 'gui': "bold" }$/;"	v
s:p	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let s:p.selected = { 'guifg': s:c.sapphire, 'gui': "bold,underline" }$/;"	v
s:p	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let s:p.selected_sign = { 'guifg': s:c.red }$/;"	v
s:p	plugged/catppuccin/autoload/clap/themes/catppuccin.vim	/^let s:p.spinner = { 'guifg': s:c.yellow, 'guibg': s:c.mantle, 'gui': "bold" }$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.inactive.left =  [ [ s:c.blue, s:c.base ], [ s:c.overlay0, s:c.base ] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.inactive.middle = [ [ s:c.surface1, s:c.base ] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.inactive.right = [ [ s:c.surface1, s:c.base ], [ s:c.overlay0, s:c.base ] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.insert.left = [ [ s:c.mantle, s:c.teal ], [ s:c.blue, s:c.base ] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.normal.error = [ [ s:c.mantle, s:c.red ] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.normal.left = [ [ s:c.mantle, s:c.blue ], [ s:c.blue, s:c.base ] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.normal.middle = [ [ s:c.blue, s:c.mantle ] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.normal.right = [ [ s:c.overlay0, s:c.base ], [ s:c.blue, s:c.surface0 ] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.normal.warning = [ [ s:c.mantle, s:c.yellow ] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.replace.left = [ [ s:c.mantle, s:c.red ], [ s:c.blue, s:c.base ] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.tabline.left = [ [ s:c.overlay0, s:c.base ], [ s:c.overlay0, s:c.base ] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.tabline.middle = [ [ s:c.surface1, s:c.base ] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.tabline.right = copy(s:p.inactive.right)$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.tabline.tabsel = [ [ s:c.blue, s:c.surface1 ], [ s:c.overlay0, s:c.base] ]$/;"	v
s:p	plugged/catppuccin/autoload/lightline/colorscheme/catppuccin.vim	/^let s:p.visual.left = [ [ s:c.mantle, s:c.mauve ], [ s:c.blue, s:c.base ] ]$/;"	v
s:packages	plugged/vim-go/plugin/go.vim	/^let s:packages = {$/;"	v
s:pad_bufnr	plugged/coc.nvim/autoload/coc/float.vim	/^let s:pad_bufnr = -1$/;"	v
s:parts	plugged/vim-airline/autoload/airline/parts.vim	/^let s:parts = {}$/;"	v
s:path_sep_pattern	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^let s:path_sep_pattern = (exists('+shellslash') ? '[\\\\\/]' : '\/') . '\\+'$/;"	v
s:path_separator	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^let s:path_separator = s:is_windows ? ';' : ':'$/;"	v
s:path_subcommands	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:path_subcommands = {}$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? :\\)\\@='$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@3<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:patterns	plugged/coc.nvim/autoload/coc/color.vim	/^let s:patterns = {}$/;"	v
s:patterns	plugged/coc.nvim/autoload/coc/color.vim	/^let s:patterns['hex']      = '\\v#?(\\x{2})(\\x{2})(\\x{2})'$/;"	v
s:patterns	plugged/coc.nvim/autoload/coc/color.vim	/^let s:patterns['shortHex'] = '\\v#(\\x{1})(\\x{1})(\\x{1})'$/;"	v
s:paused	plugged/tagbar/autoload/tagbar.vim	/^let s:paused = 0$/;"	v
s:pbufnr	plugged/coc.nvim/autoload/coc/list.vim	/^let s:pbufnr = -1$/;"	v
s:phl	plugged/coc.nvim/autoload/coc/notify.vim	/^let s:phl = 'CocNotificationProgress'$/;"	v
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plugin_dir	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^let s:plugin_dir  = expand('<sfile>:p:h:h:h').'\/'$/;"	v
s:plugin_name	plugged/unite.vim/autoload/vital/unite.vim	/^let s:plugin_name = expand('<sfile>:t:r')$/;"	v
s:po_jobs	plugged/vim-airline/autoload/airline/async.vim	/^let s:po_jobs        = {}$/;"	v
s:popup_list	plugged/coc.nvim/autoload/coc/float.vim	/^let s:popup_list = []$/;"	v
s:popup_list_api	plugged/coc.nvim/autoload/coc/float.vim	/^let s:popup_list_api = exists('*popup_list')$/;"	v
s:prefix	plugged/coc.nvim/autoload/coc/list.vim	/^let s:prefix = '[List Preview]'$/;"	v
s:prepare_env	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:prepare_env = {$/;"	v
s:preview_bufnr	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:preview_bufnr = 0$/;"	v
s:progress_char	plugged/coc.nvim/autoload/coc/notify.vim	/^let s:progress_char = '─'$/;"	v
s:project_root	plugged/unite.vim/autoload/vital/unite.vim	/^let s:project_root = expand('<sfile>:h:h:h')$/;"	v
s:prompt_snapshot_file	plugged/vim-airline/autoload/airline/extensions/promptline.vim	/^let s:prompt_snapshot_file = get(g:, 'airline#extensions#promptline#snapshot_file', '')$/;"	v
s:prompt_win_bufnr	plugged/coc.nvim/autoload/coc/dialog.vim	/^let s:prompt_win_bufnr = 0$/;"	v
s:prompt_win_width	plugged/coc.nvim/autoload/coc/dialog.vim	/^let s:prompt_win_width = get(g:, 'coc_prompt_win_width', 32)$/;"	v
s:prop_id	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:prop_id = 0$/;"	v
s:prop_offset	plugged/coc.nvim/autoload/coc/api.vim	/^let s:prop_offset = get(g:, 'coc_text_prop_offset', 1000)$/;"	v
s:prototype	plugged/vim-airline/autoload/airline/builder.vim	/^let s:prototype = {}$/;"	v
s:prototype	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^let s:prototype = {}$/;"	v
s:prototype	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^let s:prototype.overflow_group = 'airline_tab'$/;"	v
s:pum_bufnr	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:pum_bufnr = 0$/;"	v
s:pum_index	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:pum_index = -1$/;"	v
s:pum_size	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:pum_size = 0$/;"	v
s:pum_winid	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:pum_winid = -1$/;"	v
s:purple	colors/gruvbox.vim	/^  let s:purple = s:gb.bright_purple$/;"	v
s:purple	colors/gruvbox.vim	/^  let s:purple = s:gb.faded_purple$/;"	v
s:purple	colors/gruvbox.vim	/^  let s:purple[1] = 13$/;"	v
s:pwin_by_tagbar	plugged/tagbar/autoload/tagbar.vim	/^let s:pwin_by_tagbar = 0$/;"	v
s:pwinid	plugged/coc.nvim/autoload/coc/list.vim	/^let s:pwinid = -1$/;"	v
s:quit	plugged/coc.nvim/autoload/coc/color.vim	/^  let s:quit = "quit"$/;"	v
s:quit	plugged/coc.nvim/autoload/coc/color.vim	/^let s:quit = ""$/;"	v
s:quote_chars	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:quote_chars = {$/;"	v
s:rebase_abbrevs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:rebase_abbrevs = {$/;"	v
s:red	colors/gruvbox.vim	/^  let s:red    = s:gb.bright_red$/;"	v
s:red	colors/gruvbox.vim	/^  let s:red    = s:gb.faded_red$/;"	v
s:red	colors/gruvbox.vim	/^  let s:red[1]    = 9$/;"	v
s:ref_header	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:ref_header = '\\%(Merge\\|Rebase\\|Upstream\\|Pull\\|Push\\)'$/;"	v
s:remote_headers	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:remote_headers = {}$/;"	v
s:repo_prototype	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:report	plugged/vim-go/scripts/runbench.vim	/^let s:report = execute('syntime report')$/;"	v
s:resolved_git_dirs	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:resolved_git_dirs = {}$/;"	v
s:resume_queue	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:resume_queue = []$/;"	v
s:reversed	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:reversed = 0$/;"	v
s:root	plugged/coc.nvim/autoload/coc/client.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	plugged/coc.nvim/autoload/coc/dialog.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	plugged/coc.nvim/autoload/coc/rpc.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	plugged/coc.nvim/autoload/coc/util.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	plugged/coc.nvim/autoload/health/coc.vim	/^let s:root = expand('<sfile>:h:h:h')$/;"	v
s:root	plugged/coc.nvim/plugin/coc.vim	/^let s:root = expand('<sfile>:h:h')$/;"	v
s:root	plugged/unite.vim/autoload/unite/filters/sorter_selecta.vim	/^let s:root = expand('<sfile>:p:h')$/;"	v
s:rootNERDTreePath	plugged/nerdtree/autoload/nerdtree.vim	/^let s:rootNERDTreePath = resolve(expand('<sfile>:p:h:h'))$/;"	v
s:rounded_borderchars	plugged/coc.nvim/autoload/coc/float.vim	/^let s:rounded_borderchars = s:borderchars[0:3] + ['╭', '╮', '╯', '╰']$/;"	v
s:run_jobs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:run_jobs = (exists('*ch_close_in') || exists('*jobstart')) && exists('*bufwinid')$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = '"' . gutentags#get_plat_file('update_tags') . '"'$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_gtags')$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_pyscopedb')$/;"	v
s:running_task	plugged/coc.nvim/autoload/coc/task.vim	/^let s:running_task = {}$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/action.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/candidates.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/complete.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/custom.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/converter_abbr_word.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/converter_default.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/converter_file_directory.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/converter_full_path.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/converter_nothing.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/converter_relative_abbr.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/converter_relative_word.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/converter_smart_path.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/converter_tail.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/converter_tail_abbr.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/converter_uniq_word.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/converter_word_abbr.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/matcher_context.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/matcher_default.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/matcher_fuzzy.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/matcher_glob.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/matcher_hide_current_file.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/matcher_hide_hidden_files.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/matcher_migemo.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/matcher_project_files.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/matcher_project_ignore_files.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/matcher_regexp.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/sorter_default.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/sorter_ftime.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/sorter_length.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/sorter_nothing.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/sorter_rank.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/sorter_reverse.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/sorter_selecta.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/filters/sorter_word.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/handlers.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/helper.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/init.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/command.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/common.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/completion.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/directory.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/file.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/guicmd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/source.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/uri.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/window.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/kinds/word.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/mappings.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/action.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/alias.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/buffer/variables.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/change.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/command.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/directory.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/file.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/file_list.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/file_point.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/function.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/history_input.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/history_unite.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/interactive.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/jump.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/jump_point.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/launcher.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/mapping.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/menu.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/output.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/output_shellcmd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/process.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/register.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/resume.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/runtimepath.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/source.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/tab.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/window.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/sources/window_gui.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/start.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/util.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/variables.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/unite/view.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/autoload/vital/_unite/Vim/Message.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/plugin/unite.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/plugin/unite/bookmark.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/plugin/unite/buffer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/plugin/unite/window.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/unite.vim/syntax/unite.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-airline/plugin/airline.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-go/autoload/unite/sources/decls.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	plugged/vim-go/compiler/go.vim	/^let s:save_cpo = &cpo$/;"	v
s:saved_cursor	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:saved_cursor = &guicursor$/;"	v
s:saved_indenetkeys	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:saved_indenetkeys = []$/;"	v
s:saved_textwidth	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:saved_textwidth = []$/;"	v
s:saved_ve	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:saved_ve = &t_ve$/;"	v
s:script_path	plugged/vim-airline/autoload/airline/extensions.vim	/^let s:script_path = tolower(resolve(expand('<sfile>:p:h')))$/;"	v
s:section_commit_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_commit_pattern = s:section_pattern . '\\|^commit '$/;"	v
s:section_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_pattern = '^[A-Z][a-z][^:]*$'$/;"	v
s:section_truncate_width	plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:section_truncate_width = get(g:, 'airline#extensions#default#section_truncate_width', {$/;"	v
s:section_use_groups	plugged/vim-airline/autoload/airline/extensions/default.vim	/^let s:section_use_groups     = get(g:, 'airline#extensions#default#section_use_groupitems', 1)$/;"	v
s:sections	plugged/vim-airline/autoload/airline.vim	/^let s:sections = ['a','b','c','gutter','x','y','z', 'error', 'warning']$/;"	v
s:select_api	plugged/coc.nvim/autoload/coc.vim	/^let s:select_api = exists('*nvim_select_popupmenu_item')$/;"	v
s:separators	plugged/vim-airline/autoload/airline/highlighter.vim	/^let s:separators = {}$/;"	v
s:session_names	plugged/coc.nvim/autoload/coc/prompt.vim	/^let s:session_names = []$/;"	v
s:set_extmark	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:set_extmark = has('nvim') && exists('*nvim_buf_set_extmark')$/;"	v
s:set_path_handler	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^let s:set_path_handler = {}$/;"	v
s:severity_error	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_error = 1$/;"	v
s:severity_hint	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_hint = 4$/;"	v
s:severity_info	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_info = 3$/;"	v
s:severity_warning	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:severity_warning = 2$/;"	v
s:sha1size	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:sha1size = get(g:, 'airline#extensions#branch#sha1_len', 7)$/;"	v
s:short_help	plugged/tagbar/autoload/tagbar.vim	/^let s:short_help      = 1$/;"	v
s:show_buffers	plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:show_buffers = get(g:, 'airline#extensions#tabline#show_buffers', 1)$/;"	v
s:show_coc_status	plugged/vim-airline/autoload/airline/extensions/coc.vim	/^let s:show_coc_status = get(g:, 'airline#extensions#coc#show_coc_status', 1)$/;"	v
s:show_line_numbers	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:show_line_numbers = get(g:, 'airline#extensions#languageclient#show_line_numbers', 1)$/;"	v
s:show_message	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:show_message = get(g:, 'airline#extensions#whitespace#show_message', 1)$/;"	v
s:sign_api	plugged/coc.nvim/autoload/coc/ui.vim	/^let s:sign_api = exists('*sign_getplaced') && exists('*sign_place')$/;"	v
s:sign_column	colors/gruvbox.vim	/^    let s:sign_column = get(s:gb, g:gruvbox_sign_column)$/;"	v
s:sign_column	colors/gruvbox.vim	/^  let s:sign_column = s:number_column$/;"	v
s:sign_column	colors/gruvbox.vim	/^let s:sign_column = s:bg1$/;"	v
s:sign_group	plugged/coc.nvim/autoload/coc/dialog.vim	/^let s:sign_group = 'PopUpCocDialog'$/;"	v
s:sign_group	plugged/coc.nvim/autoload/coc/list.vim	/^let s:sign_group = 'CocList'$/;"	v
s:sign_groups	plugged/coc.nvim/autoload/coc/ui.vim	/^let s:sign_groups = []$/;"	v
s:sign_popup_range	plugged/coc.nvim/autoload/coc/list.vim	/^let s:sign_popup_range = 'PopUpCocList'$/;"	v
s:sign_range	plugged/coc.nvim/autoload/coc/list.vim	/^let s:sign_range = 'CocCursorLine'$/;"	v
s:singular_types	plugged/tagbar/autoload/tagbar.vim	/^let s:singular_types = {$/;"	v
s:skip_check_ft	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:skip_check_ft = {'make': ['indent', 'mixed-indent-file'],$/;"	v
s:skip_symbol	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/unique_tail_improved.vim	/^let s:skip_symbol = '…'$/;"	v
s:sorter	plugged/unite.vim/autoload/unite/filters/sorter_default.vim	/^let s:sorter = {$/;"	v
s:sorter	plugged/unite.vim/autoload/unite/filters/sorter_ftime.vim	/^let s:sorter = {$/;"	v
s:sorter	plugged/unite.vim/autoload/unite/filters/sorter_length.vim	/^let s:sorter = {$/;"	v
s:sorter	plugged/unite.vim/autoload/unite/filters/sorter_nothing.vim	/^let s:sorter = {$/;"	v
s:sorter	plugged/unite.vim/autoload/unite/filters/sorter_reverse.vim	/^let s:sorter = {$/;"	v
s:sorter	plugged/unite.vim/autoload/unite/filters/sorter_selecta.vim	/^let s:sorter = {$/;"	v
s:sorter	plugged/unite.vim/autoload/unite/filters/sorter_word.vim	/^let s:sorter = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/action.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/action.vim	/^let s:source.action_table.do = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^let s:source.action_table.delete = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^let s:source.action_table.unite__new_candidate = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/change.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/command.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/command.vim	/^let s:source.action_table.preview = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/file_list.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/file_point.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/find.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/function.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/function.vim	/^let s:source.action_table.call = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/function.vim	/^let s:source.action_table.edit = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/function.vim	/^let s:source.action_table.preview = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/grep.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/grep_git.vim	/^let s:source = deepcopy(s:origin)$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/grep_git.vim	/^let s:source['description'] = 'candidates from git grep'$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/grep_git.vim	/^let s:source['name'] = 'grep\/git'$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/history_input.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/history_input.vim	/^let s:source.action_table.delete = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/history_input.vim	/^let s:source.action_table.narrow = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/history_unite.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/history_unite.vim	/^let s:source.action_table.start = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/interactive.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/interactive.vim	/^let s:source.action_table.narrow = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/jump.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/jump_point.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/launcher.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/mapping.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/mapping.vim	/^let s:source.action_table.preview = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/menu.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/output.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/output_shellcmd.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/process.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/process.vim	/^let s:source.action_table.sigint = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/process.vim	/^let s:source.action_table.sigkill = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/process.vim	/^let s:source.action_table.sigterm = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/process.vim	/^let s:source.action_table.unite__new_candidate = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/register.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/register.vim	/^let s:source.action_table.delete = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/register.vim	/^let s:source.action_table.edit = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/resume.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/runtimepath.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/runtimepath.vim	/^let s:source.action_table.delete = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/script.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/source.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/tab.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/vimgrep.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/window.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/window_gui.vim	/^let s:source = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/window_gui.vim	/^let s:source.action_table.delete = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/window_gui.vim	/^let s:source.action_table.open = {$/;"	v
s:source	plugged/unite.vim/autoload/unite/sources/window_gui.vim	/^let s:source.action_table.rename = {$/;"	v
s:source	plugged/vim-go/autoload/unite/sources/decls.vim	/^let s:source = {$/;"	v
s:source_buffer_all	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^let s:source_buffer_all = {$/;"	v
s:source_buffer_tab	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^let s:source_buffer_tab = deepcopy(s:source_buffer_all)$/;"	v
s:source_buffer_tab	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^let s:source_buffer_tab.description =$/;"	v
s:source_buffer_tab	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^let s:source_buffer_tab.name = 'buffer_tab'$/;"	v
s:source_directory	plugged/unite.vim/autoload/unite/sources/directory.vim	/^let s:source_directory = {$/;"	v
s:source_directory_async	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_directory_async = deepcopy(s:source_file_async)$/;"	v
s:source_directory_async	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_directory_async.default_kind = 'directory'$/;"	v
s:source_directory_async	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_directory_async.description =$/;"	v
s:source_directory_async	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_directory_async.name = 'directory_rec\/async'$/;"	v
s:source_directory_new	plugged/unite.vim/autoload/unite/sources/directory.vim	/^let s:source_directory_new = {$/;"	v
s:source_directory_rec	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_directory_rec = deepcopy(s:source_file_rec)$/;"	v
s:source_directory_rec	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_directory_rec.default_kind = 'directory'$/;"	v
s:source_directory_rec	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_directory_rec.description =$/;"	v
s:source_directory_rec	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_directory_rec.name = 'directory_rec'$/;"	v
s:source_file	plugged/unite.vim/autoload/unite/sources/file.vim	/^let s:source_file = {$/;"	v
s:source_file_async	plugged/unite.vim/autoload/unite/sources/file.vim	/^let s:source_file_async = deepcopy(s:source_file)$/;"	v
s:source_file_async	plugged/unite.vim/autoload/unite/sources/file.vim	/^let s:source_file_async.description = 'asynchronous candidates from file list'$/;"	v
s:source_file_async	plugged/unite.vim/autoload/unite/sources/file.vim	/^let s:source_file_async.name = 'file\/async'$/;"	v
s:source_file_async	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_file_async = deepcopy(s:source_file_rec)$/;"	v
s:source_file_async	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_file_async.description =$/;"	v
s:source_file_async	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_file_async.name = 'file_rec\/async'$/;"	v
s:source_file_git	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_file_git = deepcopy(s:source_file_async)$/;"	v
s:source_file_git	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_file_git.description =$/;"	v
s:source_file_git	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_file_git.name = 'file_rec\/git'$/;"	v
s:source_file_neovim	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_file_neovim = deepcopy(s:source_file_rec)$/;"	v
s:source_file_neovim	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_file_neovim.description =$/;"	v
s:source_file_neovim	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_file_neovim.name = 'file_rec\/neovim'$/;"	v
s:source_file_new	plugged/unite.vim/autoload/unite/sources/file.vim	/^let s:source_file_new = {$/;"	v
s:source_file_rec	plugged/unite.vim/autoload/unite/sources/rec.vim	/^let s:source_file_rec = {$/;"	v
s:source_line	plugged/unite.vim/autoload/unite/sources/line.vim	/^let s:source_line = {$/;"	v
s:source_line	plugged/unite.vim/autoload/unite/sources/line.vim	/^let s:source_line.converters = [s:source_line.source__converter]$/;"	v
s:spaceStr	plugged/nerdcommenter/autoload/nerdcommenter.vim	/^let s:spaceStr = ' '$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/dirvish.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/example.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/localsearch.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/obsession.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/poetv.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/rufo.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/tabline/tabs.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/tagbar.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/vimtex.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/virtualenv.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/windowswap.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/section.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:spc	plugged/vim-airline/autoload/airline/util.vim	/^let s:spc = g:airline_symbols.space$/;"	v
s:start_args	plugged/vim-go/autoload/go/debug.vim	/^  let s:start_args = []$/;"	v
s:start_col	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:start_col = -1$/;"	v
s:started	plugged/vim-go/scripts/runtest.vim	/^  let s:started = reltime()$/;"	v
s:state	plugged/vim-go/autoload/go/debug.vim	/^  let s:state = {$/;"	v
s:statuses	plugged/vim-go/autoload/go/statusline.vim	/^let s:statuses = {}$/;"	v
s:statusline_in_use	plugged/tagbar/autoload/tagbar.vim	/^let s:statusline_in_use = 0$/;"	v
s:strchars	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^  let s:strchars = function('strchars')$/;"	v
s:subcommands_before_2_5	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:subcommands_before_2_5 = [$/;"	v
s:suite	plugged/nerdtree-git-plugin/tests/test_all.vim	/^let s:suite = themis#suite('Test for nerdtree-git-plugin')$/;"	v
s:suite	plugged/unite.vim/test/converter.vim	/^let s:suite = themis#suite('parser')$/;"	v
s:suite	plugged/unite.vim/test/grep.vim	/^let s:suite = themis#suite('parser')$/;"	v
s:suite	plugged/unite.vim/test/matcher.vim	/^let s:suite = themis#suite('parser')$/;"	v
s:suite	plugged/unite.vim/test/source.vim	/^let s:suite = themis#suite('parser')$/;"	v
s:supported_search_direction	plugged/unite.vim/autoload/unite/sources/line.vim	/^let s:supported_search_direction =$/;"	v
s:supports_star	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^let s:supports_star = v:version > 703 || (v:version == 703 && has("patch596"))$/;"	v
s:symbol	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^let s:symbol = get(g:, 'airline#extensions#whitespace#symbol', g:airline_symbols.whitespace)$/;"	v
s:tab_id	plugged/coc.nvim/autoload/coc/api.vim	/^let s:tab_id = 1$/;"	v
s:tab_min_count	plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^let s:tab_min_count = get(g:, 'airline#extensions#tabline#tab_min_count', 0)$/;"	v
s:taboo	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:taboo = get(g:, 'airline#extensions#taboo#enabled', 1) && get(g:, 'loaded_taboo', 0)$/;"	v
s:tabws	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^let s:tabws = get(g:, 'tabws_loaded', 0)$/;"	v
s:temp_buffer	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_buffer = tempname()$/;"	v
s:temp_files	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:temp_from	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^let s:temp_from = tempname()$/;"	v
s:temp_scripts	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_scripts = {}$/;"	v
s:templatepath	plugged/vim-go/autoload/go/issue.vim	/^let s:templatepath = go#util#Join(resolve(expand('<sfile>:p:h:h:h')), '.github', 'ISSUE_TEMPLATE.md')$/;"	v
s:term	plugged/coc.nvim/autoload/coc/highlight.vim	/^let s:term = &termguicolors == 0 && !has('gui_running')$/;"	v
s:termBlack	colors/jellybeans.vim	/^  let s:termBlack = "Black"$/;"	v
s:termBlack	colors/jellybeans.vim	/^  let s:termBlack = "Grey"$/;"	v
s:test_repo	plugged/vim-gitgutter/test/test_gitgutter.vim	/^let s:test_repo   = s:current_dir.'\/test-repo'$/;"	v
s:testfile	plugged/vim-go/scripts/runtest.vim	/^let s:testfile = expand('%:t')$/;"	v
s:tests	plugged/vim-gitgutter/test/runner.vim	/^  let s:tests = filter(s:tests, 'v:val =~ argv(1)')$/;"	v
s:tests	plugged/vim-gitgutter/test/runner.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k*()\\)', '\\1', 'g'))$/;"	v
s:tests	plugged/vim-go/scripts/runtest.vim	/^let s:tests = split(substitute(@q, 'function \\(\\k\\+()\\)', '\\1', 'g'))$/;"	v
s:text_options	plugged/coc.nvim/autoload/coc/vtext.vim	/^let s:text_options = has('patch-9.0.0121') || has('nvim-0.6.0')$/;"	v
s:themes	colors/PaperColor.vim	/^let s:themes = {}$/;"	v
s:timer	plugged/vim-airline/autoload/airline/extensions/lsp.vim	/^let s:timer = 0$/;"	v
s:timer_id	plugged/vim-go/autoload/go/auto.vim	/^let s:timer_id = 0$/;"	v
s:timer_id	plugged/vim-go/autoload/go/statusline.vim	/^let s:timer_id = 0$/;"	v
s:tmuxline_snapshot_file	plugged/vim-airline/autoload/airline/extensions/tmuxline.vim	/^let s:tmuxline_snapshot_file = get(g:, 'airline#extensions#tmuxline#snapshot_file', '')$/;"	v
s:toggle	plugged/vim-go/autoload/go/coverage.vim	/^let s:toggle = 0$/;"	v
s:total_elapsed_time	plugged/vim-go/scripts/runtest.vim	/^let s:total_elapsed_time = substitute(reltimestr(reltime(s:total_started)), '^\\s*\\(.\\{-}\\)\\s*$', '\\1', '')$/;"	v
s:total_started	plugged/vim-go/scripts/runtest.vim	/^let s:total_started = reltime()$/;"	v
s:tree_up_dir_line	plugged/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:trees	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:trees = {}$/;"	v
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:true_color	colors/jellybeans.vim	/^  let s:true_color = 0$/;"	v
s:true_color	colors/jellybeans.vim	/^  let s:true_color = 1$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters = {}$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.BOOL]    = { bol -> bol ? 'v:true' : 'v:false' }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.DICT]    = { dct -> s:prettifyDict(dct, '  \\ ', 0, '  ') }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.FLOAT]   = { flt -> string(flt) }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.FUNCREF] = { fn  -> string(fn) }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.LIST]    = { lst -> s:prettifyList(lst, '  \\ ', 0, '  ') }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.NULL]    = { nul -> string(nul) }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.NUMBER]  = { nbr -> string(nbr) }$/;"	v
s:type_formatters	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:type_formatters[s:types.STRING]  = { str -> printf("'%s'", str) }$/;"	v
s:type_init_done	plugged/tagbar/autoload/tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:types	plugged/nerdtree-git-plugin/autoload/gitstatus/doctor.vim	/^let s:types = {$/;"	v
s:undercurl	colors/gruvbox.vim	/^  let s:undercurl = ''$/;"	v
s:undercurl	colors/gruvbox.vim	/^let s:undercurl = 'undercurl,'$/;"	v
s:underline	colors/gruvbox.vim	/^  let s:underline = ''$/;"	v
s:underline	colors/gruvbox.vim	/^let s:underline = 'underline,'$/;"	v
s:unite_histories	plugged/unite.vim/autoload/unite/sources/history_unite.vim	/^let s:unite_histories = []$/;"	v
s:unite_histories_file_mtime	plugged/unite.vim/autoload/unite/sources/history_unite.vim	/^let s:unite_histories_file_mtime = 0$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unmerged_status	plugged/nerdtree-git-plugin/autoload/gitstatus/util.vim	/^let s:unmerged_status = {$/;"	v
s:unquote_chars	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:unquote_chars = {$/;"	v
s:untracked_jobs	plugged/vim-airline/autoload/airline/async.vim	/^let s:untracked_jobs = {}$/;"	v
s:update_in_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_queue	plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:use_current_unite	plugged/unite.vim/autoload/unite/variables.vim	/^  let s:use_current_unite = 1$/;"	v
s:utf	plugged/coc.nvim/autoload/coc.vim	/^let s:utf = has('nvim') || &encoding =~# '^utf'$/;"	v
s:utf	plugged/coc.nvim/autoload/coc/notify.vim	/^let s:utf = has('nvim') || &encoding =~# '^utf'$/;"	v
s:var	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:var = '\\%(<\\%(cword\\|cWORD\\|cexpr\\|cfile\\|sfile\\|slnum\\|afile\\|abuf\\|amatch' . (has('clientserver') ? '\\|client' : '') . '\\)>\\|%\\|#<\\=\\d\\+\\|##\\=\\)'$/;"	v
s:vcs_config	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^let s:vcs_config = {$/;"	v
s:version	colors/PaperColor.vim	/^let s:version = '0.9.x'$/;"	v
s:vert_split	colors/gruvbox.vim	/^  let s:vert_split = get(s:gb, g:gruvbox_vert_split)$/;"	v
s:vert_split	colors/gruvbox.vim	/^let s:vert_split = s:bg0$/;"	v
s:vim8	autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim8	plugged/nerdtree-git-plugin/autoload/gitstatus/job.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim_above	plugged/coc.nvim/autoload/coc/vtext.vim	/^let s:vim_above = has('patch-9.0.0438')$/;"	v
s:vim_api_version	plugged/coc.nvim/autoload/coc/util.vim	/^let s:vim_api_version = 34$/;"	v
s:vim_bg	colors/gruvbox.vim	/^let s:vim_bg = ['bg', 'bg']$/;"	v
s:vim_fg	colors/gruvbox.vim	/^let s:vim_fg = ['fg', 'fg']$/;"	v
s:vim_quitting	plugged/tagbar/autoload/tagbar.vim	/^let s:vim_quitting = 0$/;"	v
s:virtual_text	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:virtual_text = 0$/;"	v
s:virtual_text_ns	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:virtual_text_ns = coc#highlight#create_namespace('pum-virtual')$/;"	v
s:virtual_text_support	plugged/coc.nvim/autoload/coc/pum.vim	/^let s:virtual_text_support = has('nvim-0.5.0') || has('patch-9.0.0067')$/;"	v
s:virtual_text_support	plugged/coc.nvim/autoload/coc/vtext.vim	/^let s:virtual_text_support = has('nvim-0.5.0') || has('patch-9.0.0067')$/;"	v
s:visibility_symbols	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^    let s:visibility_symbols = g:tagbar_visibility_symbols$/;"	v
s:visibility_symbols	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^let s:visibility_symbols = {$/;"	v
s:vital_base_dir	plugged/unite.vim/autoload/vital/unite.vim	/^let s:vital_base_dir = expand('<sfile>:h')$/;"	v
s:w3c_color_names	plugged/coc.nvim/autoload/coc/color.vim	/^let s:w3c_color_names = {$/;"	v
s:warning	plugged/nerdtree-git-plugin/autoload/gitstatus/log.vim	/^let s:warning = 2 | :lockvar s:warning$/;"	v
s:warning_icon	plugged/coc.nvim/autoload/coc/notify.vim	/^let s:warning_icon = get(g:, 'coc_notify_warning_icon', s:utf ? "\\u26a0" : 'W')$/;"	v
s:warning_sign	plugged/coc.nvim/autoload/coc.vim	/^let s:warning_sign = get(g:, 'coc_status_warning_sign', has('mac') && s:utf ? "\\u26a0\\ufe0f " : 'W ')$/;"	v
s:warning_symbol	plugged/vim-airline/autoload/airline/extensions/languageclient.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#languageclient#warning_symbol', 'W:')$/;"	v
s:warning_symbol	plugged/vim-airline/autoload/airline/extensions/neomake.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#neomake#warning_symbol', 'W:')$/;"	v
s:warning_symbol	plugged/vim-airline/autoload/airline/extensions/syntastic.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#syntastic#warning_symbol', 'W:')$/;"	v
s:warning_symbol	plugged/vim-airline/autoload/airline/extensions/vim9lsp.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#vim9lsp#warning_symbol', 'W:')$/;"	v
s:warning_symbol	plugged/vim-airline/autoload/airline/extensions/ycm.vim	/^let s:warning_symbol = get(g:, 'airline#extensions#ycm#warning_symbol', 'W:')$/;"	v
s:warnings	plugged/tagbar/autoload/tagbar.vim	/^let s:warnings = {$/;"	v
s:watched_keys	plugged/coc.nvim/autoload/coc.vim	/^let s:watched_keys = []$/;"	v
s:wcswidth	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^  let s:wcswidth = function('strwidth')$/;"	v
s:wildignores_options_path	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:window_expanded	plugged/tagbar/autoload/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:window_pos	plugged/tagbar/autoload/tagbar.vim	/^let s:window_pos = {$/;"	v
s:winid	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^let s:winid = 0$/;"	v
s:winids	plugged/coc.nvim/autoload/coc/notify.vim	/^let s:winids = []$/;"	v
s:winrestcmd	plugged/tagbar/autoload/tagbar.vim	/^let s:winrestcmd      = ''$/;"	v
s:wordcount_cache	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^let s:wordcount_cache = 0  " cache wordcount for performance when force_update=0$/;"	v
s:worktree_error	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:worktree_error = "core.worktree is required when using an external Git dir"$/;"	v
s:worktree_for_dir	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
s:xterm_16colors	plugged/coc.nvim/autoload/coc/color.vim	/^let s:xterm_16colors = {$/;"	v
s:xterm_colors	plugged/coc.nvim/autoload/coc/color.vim	/^let s:xterm_colors = {$/;"	v
s:xterm_escape_template	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^let s:xterm_escape_template = '\\033]12;%s\\007'$/;"	v
s:yellow	colors/gruvbox.vim	/^  let s:yellow = s:gb.bright_yellow$/;"	v
s:yellow	colors/gruvbox.vim	/^  let s:yellow = s:gb.faded_yellow$/;"	v
s:yellow	colors/gruvbox.vim	/^  let s:yellow[1] = 11$/;"	v
s:zoomwintab_status_zoomed_in	plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^let s:zoomwintab_status_zoomed_in =$/;"	v
s:zoomwintab_status_zoomed_out	plugged/vim-airline/autoload/airline/extensions/zoomwintab.vim	/^let s:zoomwintab_status_zoomed_out =$/;"	v
safer_open	plugged/coc.nvim/autoload/coc/util.vim	/^function! s:safer_open(cmd, file) abort$/;"	f
sameIDsHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:sameIDsHandler(next, msg) abort dict$/;"	f
same_ids_highlight	plugged/vim-go/autoload/go/sameids.vim	/^function! s:same_ids_highlight(exit_val, result, mode) abort$/;"	f
save	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:save(filename, bookmark) abort  "{{{$/;"	f
save_fold_state	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:save_fold_state()$/;"	f
save_indentkeys	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:save_indentkeys() abort$/;"	f
save_last_seen_change	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:save_last_seen_change(bufnr) abort$/;"	f
save_maparg_for	plugged/vim-go/autoload/go/debug.vim	/^function! s:save_maparg_for(bufname, lhs) abort$/;"	f
save_views	plugged/coc.nvim/autoload/coc/list.vim	/^function! s:save_views(exclude) abort$/;"	f
scan	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:scan(str, pattern) abort$/;"	f
score	plugged/unite.vim/autoload/unite/filters/sorter_selecta.py	/^def score():$/;"	f
screen_lines	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:screen_lines(lines)$/;"	f
scroll_pum	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:scroll_pum(forward, height, size) abort$/;"	f
scroll_win	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:scroll_win(winid, forward, amount) abort$/;"	f
search	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:search(pattern) abort dict$/;"	f
search_buffer	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:search_buffer(candidate) abort "{{{$/;"	f
search_cursor	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! s:search_cursor(filename, dest_dir, candidate) abort "{{{$/;"	f
search_dict	plugged/unite.vim/autoload/unite/filters/matcher_migemo.vim	/^function! s:search_dict() abort$/;"	f
search_dict2	plugged/unite.vim/autoload/unite/filters/matcher_migemo.vim	/^function! s:search_dict2(name) abort$/;"	f
search_term	plugged/vim-airline/autoload/airline/extensions/searchcount.vim	/^function! s:search_term()$/;"	f
section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
section_is_empty	plugged/vim-airline/autoload/airline/builder.vim	/^function! s:section_is_empty(self, content)$/;"	f
select_by_index	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:select_by_index(index, insert) abort$/;"	f
select_line	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:select_line(winid, line) abort$/;"	f
select_tab	plugged/vim-airline/autoload/airline/extensions/tabline/buffers.vim	/^function! s:select_tab(buf_index)$/;"	f
semi	plugged/vim-snippets/pythonx/javascript_snippets.py	/^def semi(snip):$/;"	f
separator	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:separator() abort$/;"	f
separator	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:separator()$/;"	f
setDiagnostics	plugged/vim-go/autoload/go/lsp.vim	/^function! s:setDiagnostics(...) abort$/;"	f
setFolded	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:setFolded(folded) abort dict$/;"	f
setHightlighting	plugged/nerdtree-git-plugin/after/syntax/nerdtree.vim	/^function! s:setHightlighting() abort$/;"	f
set_clean_jobs_variable	plugged/vim-airline/autoload/airline/async.vim	/^function! s:set_clean_jobs_variable(vcs, file, id)$/;"	f
set_clean_variables	plugged/vim-airline/autoload/airline/async.vim	/^function! s:set_clean_variables(file, vcs, val)$/;"	f
set_color_variables	colors/PaperColor.vim	/^fun! s:set_color_variables()$/;"	f
set_cursor	plugged/coc.nvim/autoload/coc/pum.vim	/^function! s:set_cursor(winid, line) abort$/;"	f
set_cursor_color_for	plugged/vim-airline/autoload/airline/extensions/cursormode.vim	/^function! s:set_cursor_color_for(mode)$/;"	f
set_default	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:set_default(var, val) abort$/;"	f
set_float_defaults	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:set_float_defaults(winid, config) abort$/;"	f
set_fold_levels	plugged/vim-gitgutter/autoload/gitgutter/fold.vim	/^function! s:set_fold_levels()$/;"	f
set_format_attributes	colors/PaperColor.vim	/^fun! s:set_format_attributes()$/;"	f
set_height	plugged/coc.nvim/autoload/coc/list.vim	/^function! s:set_height(height) abort$/;"	f
set_overriding_colors	colors/PaperColor.vim	/^fun! s:set_overriding_colors()$/;"	f
set_path_handler.err	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:set_path_handler.err(buffer) abort$/;"	f
set_path_handler.out	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:set_path_handler.out(buffer, listing) abort$/;"	f
set_preview_options	plugged/coc.nvim/autoload/coc/list.vim	/^function! s:set_preview_options(winid) abort$/;"	f
set_syntax	plugged/unite.vim/autoload/unite/view.vim	/^function! s:set_syntax() abort "{{{$/;"	f
set_tree_defaults	plugged/coc.nvim/autoload/coc/ui.vim	/^function! s:set_tree_defaults(opts) abort$/;"	f
setretval	plugged/vim-go/autoload/go/promise.vim	/^function! s:setretval(val, timer) dict$/;"	f
setupNERDTreeKeyMappings	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:setupNERDTreeKeyMappings()$/;"	f
setupNERDTreeListeners	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:setupNERDTreeListeners(listener) abort$/;"	f
setup_keymaps	plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_keymaps() abort$/;"	f
setup_options	plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_options() abort$/;"	f
setup_path	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function! s:setup_path(bufnr, continuation)$/;"	f
setupproject	plugged/vim-go/autoload/gotest.vim	/^func! s:setupproject(dir, path) abort$/;"	f
sh_autocmd_handler	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:sh_autocmd_handler()$/;"	f
sh_autocmd_handler	plugged/vim-airline/autoload/airline/extensions/fugitiveline.vim	/^function! s:sh_autocmd_handler()$/;"	f
shellesc	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
shellesc_cmd	autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
shellesc_ps1	autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
shellesc_sh	autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
shellescape	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
shellescape	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^  function! s:shellescape(command) abort$/;"	f
shift	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:shift(list) abort$/;"	f
showMenu	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node) abort$/;"	f
show_errors	plugged/vim-go/autoload/go/mod.vim	/^function! s:show_errors(errors) abort$/;"	f
show_goroutines	plugged/vim-go/autoload/go/debug.vim	/^function! s:show_goroutines(currentGoroutineID, res) abort$/;"	f
show_stacktrace	plugged/vim-go/autoload/go/debug.vim	/^function! s:show_stacktrace(check_errors, res) abort$/;"	f
show_tabline	plugged/vim-airline/autoload/airline/extensions/tabline/autoshow.vim	/^function! s:show_tabline(min_count, total_count)$/;"	f
show_variables	plugged/vim-go/autoload/go/debug.vim	/^function! s:show_variables() abort$/;"	f
sid2sfuncs	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:sid2sfuncs(sid) abort$/;"	f
sign_getplaced	plugged/vim-go/autoload/go/debug.vim	/^function! s:sign_getplaced() abort$/;"	f
sign_place	plugged/vim-go/autoload/go/debug.vim	/^function! s:sign_place(id, expr, lnum) abort$/;"	f
sign_unplace	plugged/vim-go/autoload/go/debug.vim	/^function! s:sign_unplace(id, file) abort$/;"	f
sink	plugged/vim-go/autoload/fzf/decls.vim	/^function! s:sink(str) abort$/;"	f
smart_execute_command	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:smart_execute_command(action, word) abort$/;"	f
smart_imap	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:smart_imap(map) abort "{{{$/;"	f
smart_imap2	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:smart_imap2(map) abort "{{{$/;"	f
smart_preview	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:smart_preview() abort "{{{$/;"	f
snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
sort	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:sort(list, expr) abort$/;"	f
sortTags	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:sortTags(compare_typeinfo) abort dict$/;"	f
sort_buffer_name	plugged/unite.vim/autoload/unite/helper.vim	/^function! s:sort_buffer_name(lhs, rhs) abort "{{{$/;"	f
sort_by	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
sort_python	plugged/unite.vim/autoload/unite/filters/sorter_selecta.vim	/^function! s:sort_python(candidates, inputs) abort$/;"	f
sorter.filter	plugged/unite.vim/autoload/unite/filters/sorter_default.vim	/^function! s:sorter.filter(candidates, context) abort "{{{$/;"	f
sorter.filter	plugged/unite.vim/autoload/unite/filters/sorter_ftime.vim	/^function! s:sorter.filter(candidates, context) abort "{{{$/;"	f
sorter.filter	plugged/unite.vim/autoload/unite/filters/sorter_length.vim	/^function! s:sorter.filter(candidates, context) abort "{{{$/;"	f
sorter.filter	plugged/unite.vim/autoload/unite/filters/sorter_nothing.vim	/^function! s:sorter.filter(candidates, context) abort "{{{$/;"	f
sorter.filter	plugged/unite.vim/autoload/unite/filters/sorter_reverse.vim	/^function! s:sorter.filter(candidates, context) abort "{{{$/;"	f
sorter.filter	plugged/unite.vim/autoload/unite/filters/sorter_selecta.vim	/^function! s:sorter.filter(candidates, context) abort$/;"	f
sorter.filter	plugged/unite.vim/autoload/unite/filters/sorter_word.vim	/^function! s:sorter.filter(candidates, context) abort "{{{$/;"	f
source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
source	plugged/vim-go/autoload/fzf/decls.vim	/^function! s:source(mode,...) abort$/;"	f
source.action_table.call.func	plugged/unite.vim/autoload/unite/sources/function.vim	/^function! s:source.action_table.call.func(candidate) abort "{{{$/;"	f
source.action_table.delete.func	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:source.action_table.delete.func(candidates) abort "{{{$/;"	f
source.action_table.delete.func	plugged/unite.vim/autoload/unite/sources/history_input.vim	/^function! s:source.action_table.delete.func(candidates) abort "{{{$/;"	f
source.action_table.delete.func	plugged/unite.vim/autoload/unite/sources/register.vim	/^function! s:source.action_table.delete.func(candidates) abort "{{{$/;"	f
source.action_table.delete.func	plugged/unite.vim/autoload/unite/sources/runtimepath.vim	/^function! s:source.action_table.delete.func(candidates) abort "{{{$/;"	f
source.action_table.delete.func	plugged/unite.vim/autoload/unite/sources/window_gui.vim	/^function! s:source.action_table.delete.func(candidates) abort "{{{$/;"	f
source.action_table.do.func	plugged/unite.vim/autoload/unite/sources/action.vim	/^function! s:source.action_table.do.func(candidate) abort "{{{$/;"	f
source.action_table.edit.func	plugged/unite.vim/autoload/unite/sources/function.vim	/^function! s:source.action_table.edit.func(candidates) abort "{{{$/;"	f
source.action_table.edit.func	plugged/unite.vim/autoload/unite/sources/register.vim	/^function! s:source.action_table.edit.func(candidate) abort "{{{$/;"	f
source.action_table.narrow.func	plugged/unite.vim/autoload/unite/sources/history_input.vim	/^function! s:source.action_table.narrow.func(candidate) abort "{{{$/;"	f
source.action_table.narrow.func	plugged/unite.vim/autoload/unite/sources/interactive.vim	/^function! s:source.action_table.narrow.func(candidate) abort "{{{$/;"	f
source.action_table.open.func	plugged/unite.vim/autoload/unite/sources/window_gui.vim	/^function! s:source.action_table.open.func(candidate) abort "{{{$/;"	f
source.action_table.preview.func	plugged/unite.vim/autoload/unite/sources/command.vim	/^function! s:source.action_table.preview.func(candidate) abort "{{{$/;"	f
source.action_table.preview.func	plugged/unite.vim/autoload/unite/sources/function.vim	/^function! s:source.action_table.preview.func(candidate) abort "{{{$/;"	f
source.action_table.preview.func	plugged/unite.vim/autoload/unite/sources/mapping.vim	/^function! s:source.action_table.preview.func(candidate) abort "{{{$/;"	f
source.action_table.rename.func	plugged/unite.vim/autoload/unite/sources/window_gui.vim	/^function! s:source.action_table.rename.func(candidate) abort "{{{$/;"	f
source.action_table.sigint.func	plugged/unite.vim/autoload/unite/sources/process.vim	/^function! s:source.action_table.sigint.func(candidates) abort "{{{$/;"	f
source.action_table.sigkill.func	plugged/unite.vim/autoload/unite/sources/process.vim	/^function! s:source.action_table.sigkill.func(candidates) abort "{{{$/;"	f
source.action_table.sigterm.func	plugged/unite.vim/autoload/unite/sources/process.vim	/^function! s:source.action_table.sigterm.func(candidates) abort "{{{$/;"	f
source.action_table.start.func	plugged/unite.vim/autoload/unite/sources/history_unite.vim	/^function! s:source.action_table.start.func(candidate) abort "{{{$/;"	f
source.action_table.unite__new_candidate.func	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:source.action_table.unite__new_candidate.func(candidates) abort "{{{$/;"	f
source.action_table.unite__new_candidate.func	plugged/unite.vim/autoload/unite/sources/process.vim	/^function! s:source.action_table.unite__new_candidate.func(candidate) abort "{{{$/;"	f
source.async_gather_candidates	plugged/unite.vim/autoload/unite/sources/find.vim	/^function! s:source.async_gather_candidates(args, context) abort "{{{$/;"	f
source.async_gather_candidates	plugged/unite.vim/autoload/unite/sources/grep.vim	/^function! s:source.async_gather_candidates(args, context) abort "{{{$/;"	f
source.async_gather_candidates	plugged/unite.vim/autoload/unite/sources/output_shellcmd.vim	/^function! s:source.async_gather_candidates(args, context) abort "{{{$/;"	f
source.async_gather_candidates	plugged/unite.vim/autoload/unite/sources/script.vim	/^function! s:source.async_gather_candidates(args, context) abort "{{{$/;"	f
source.change_candidates	plugged/unite.vim/autoload/unite/sources/command.vim	/^function! s:source.change_candidates(args, context) abort "{{{$/;"	f
source.change_candidates	plugged/unite.vim/autoload/unite/sources/interactive.vim	/^function! s:source.change_candidates(args, context) abort "{{{$/;"	f
source.complete	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.complete	plugged/unite.vim/autoload/unite/sources/file_list.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.complete	plugged/unite.vim/autoload/unite/sources/find.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.complete	plugged/unite.vim/autoload/unite/sources/grep.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.complete	plugged/unite.vim/autoload/unite/sources/mapping.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.complete	plugged/unite.vim/autoload/unite/sources/menu.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.complete	plugged/unite.vim/autoload/unite/sources/script.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.complete	plugged/unite.vim/autoload/unite/sources/source.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.complete	plugged/unite.vim/autoload/unite/sources/tab.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.complete	plugged/unite.vim/autoload/unite/sources/vimgrep.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.complete	plugged/unite.vim/autoload/unite/sources/window.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.complete	plugged/unite.vim/autoload/unite/sources/window_gui.vim	/^function! s:source.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/action.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/change.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/command.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/file_list.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/file_point.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/find.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/function.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/grep.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/grep_git.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/history_input.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/history_unite.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/jump.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/jump_point.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/launcher.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/mapping.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/menu.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/output.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/output_shellcmd.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/process.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/register.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/resume.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/runtimepath.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/script.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/source.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/tab.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/vimgrep.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/window.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/unite.vim/autoload/unite/sources/window_gui.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/vim-go/autoload/unite/sources/decls.vim	/^function! s:source.gather_candidates(args, context) abort$/;"	f
source.hooks.on_close	plugged/unite.vim/autoload/unite/sources/find.vim	/^function! s:source.hooks.on_close(args, context) abort "{{{$/;"	f
source.hooks.on_close	plugged/unite.vim/autoload/unite/sources/grep.vim	/^function! s:source.hooks.on_close(args, context) abort "{{{$/;"	f
source.hooks.on_close	plugged/unite.vim/autoload/unite/sources/output_shellcmd.vim	/^function! s:source.hooks.on_close(args, context) abort "{{{$/;"	f
source.hooks.on_close	plugged/unite.vim/autoload/unite/sources/script.vim	/^function! s:source.hooks.on_close(args, context) abort "{{{$/;"	f
source.hooks.on_init	plugged/unite.vim/autoload/unite/sources/change.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	plugged/unite.vim/autoload/unite/sources/command.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	plugged/unite.vim/autoload/unite/sources/file_point.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	plugged/unite.vim/autoload/unite/sources/find.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	plugged/unite.vim/autoload/unite/sources/grep.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	plugged/unite.vim/autoload/unite/sources/jump_point.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	plugged/unite.vim/autoload/unite/sources/mapping.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	plugged/unite.vim/autoload/unite/sources/output.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	plugged/unite.vim/autoload/unite/sources/output_shellcmd.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	plugged/unite.vim/autoload/unite/sources/script.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	plugged/unite.vim/autoload/unite/sources/vimgrep.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_init	plugged/unite.vim/autoload/unite/sources/window.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.hooks.on_post_filter	plugged/unite.vim/autoload/unite/sources/grep.vim	/^function! s:source.hooks.on_post_filter(args, context) abort "{{{$/;"	f
source.hooks.on_post_filter	plugged/unite.vim/autoload/unite/sources/vimgrep.vim	/^function! s:source.hooks.on_post_filter(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/action.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/command.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/grep.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/interactive.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/output.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/output_shellcmd.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/source.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/tab.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/vimgrep.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/window.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/window_gui.vim	/^function! s:source.hooks.on_syntax(args, context) abort "{{{$/;"	f
source.hooks.on_syntax	plugged/vim-go/autoload/unite/sources/decls.vim	/^function! s:source.hooks.on_syntax(args, context) abort$/;"	f
source.vimfiler_check_filetype	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:source.vimfiler_check_filetype(args, context) abort "{{{$/;"	f
source.vimfiler_complete	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:source.vimfiler_complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source.vimfiler_gather_candidates	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! s:source.vimfiler_gather_candidates(args, context) abort "{{{$/;"	f
source_buffer_all.complete	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! s:source_buffer_all.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source_buffer_all.gather_candidates	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! s:source_buffer_all.gather_candidates(args, context) abort "{{{$/;"	f
source_buffer_all.hooks.on_init	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! s:source_buffer_all.hooks.on_init(args, context) abort "{{{$/;"	f
source_buffer_all.hooks.on_post_filter	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! s:source_buffer_all.hooks.on_post_filter(args, context) abort "{{{$/;"	f
source_buffer_all.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! s:source_buffer_all.hooks.on_syntax(args, context) abort "{{{$/;"	f
source_buffer_tab.gather_candidates	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! s:source_buffer_tab.gather_candidates(args, context) abort "{{{$/;"	f
source_directory.change_candidates	plugged/unite.vim/autoload/unite/sources/directory.vim	/^function! s:source_directory.change_candidates(args, context) abort "{{{$/;"	f
source_directory.complete	plugged/unite.vim/autoload/unite/sources/directory.vim	/^function! s:source_directory.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source_directory.hooks.on_close	plugged/unite.vim/autoload/unite/sources/directory.vim	/^function! s:source_directory.hooks.on_close(args, context) abort "{{{$/;"	f
source_directory_async.hooks.on_init	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_directory_async.hooks.on_init(args, context) abort "{{{$/;"	f
source_directory_async.hooks.on_post_filter	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_directory_async.hooks.on_post_filter(args, context) abort "{{{$/;"	f
source_directory_new.change_candidates	plugged/unite.vim/autoload/unite/sources/directory.vim	/^function! s:source_directory_new.change_candidates(args, context) abort "{{{$/;"	f
source_directory_rec.hooks.on_init	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_directory_rec.hooks.on_init(args, context) abort "{{{$/;"	f
source_directory_rec.hooks.on_post_filter	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_directory_rec.hooks.on_post_filter(args, context) abort "{{{$/;"	f
source_file.change_candidates	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:source_file.change_candidates(args, context) abort "{{{$/;"	f
source_file.complete	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:source_file.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source_file.hooks.on_close	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:source_file.hooks.on_close(args, context) abort "{{{$/;"	f
source_file.vimfiler_check_filetype	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:source_file.vimfiler_check_filetype(args, context) abort "{{{$/;"	f
source_file.vimfiler_complete	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:source_file.vimfiler_complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source_file.vimfiler_dummy_candidates	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:source_file.vimfiler_dummy_candidates(args, context) abort "{{{$/;"	f
source_file.vimfiler_gather_candidates	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:source_file.vimfiler_gather_candidates(args, context) abort "{{{$/;"	f
source_file_async.async_gather_candidates	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:source_file_async.async_gather_candidates(args, context) abort "{{{$/;"	f
source_file_async.async_gather_candidates	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_async.async_gather_candidates(args, context) abort "{{{$/;"	f
source_file_async.change_candidates	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:source_file_async.change_candidates(args, context) abort "{{{$/;"	f
source_file_async.gather_candidates	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_async.gather_candidates(args, context) abort "{{{$/;"	f
source_file_async.hooks.on_close	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:source_file_async.hooks.on_close(args, context) abort "{{{$/;"	f
source_file_async.hooks.on_close	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_async.hooks.on_close(args, context) abort "{{{$/;"	f
source_file_async.hooks.on_init	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_async.hooks.on_init(args, context) abort "{{{$/;"	f
source_file_git.async_gather_candidates	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_git.async_gather_candidates(args, context) abort "{{{$/;"	f
source_file_git.complete	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_git.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source_file_git.gather_candidates	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_git.gather_candidates(args, context) abort "{{{$/;"	f
source_file_git.hooks.on_init	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_git.hooks.on_init(args, context) abort "{{{$/;"	f
source_file_neovim.async_gather_candidates	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_neovim.async_gather_candidates(args, context) abort "{{{$/;"	f
source_file_neovim.gather_candidates	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_neovim.gather_candidates(args, context) abort "{{{$/;"	f
source_file_neovim.hooks.on_close	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_neovim.hooks.on_close(args, context) abort "{{{$/;"	f
source_file_neovim.hooks.on_init	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_neovim.hooks.on_init(args, context) abort "{{{$/;"	f
source_file_new.change_candidates	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! s:source_file_new.change_candidates(args, context) abort "{{{$/;"	f
source_file_rec.async_gather_candidates	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_rec.async_gather_candidates(args, context) abort "{{{$/;"	f
source_file_rec.complete	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_rec.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source_file_rec.gather_candidates	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_rec.gather_candidates(args, context) abort "{{{$/;"	f
source_file_rec.hooks.on_init	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_rec.hooks.on_init(args, context) abort "{{{$/;"	f
source_file_rec.vimfiler_check_filetype	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_rec.vimfiler_check_filetype(args, context) abort "{{{$/;"	f
source_file_rec.vimfiler_complete	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_rec.vimfiler_complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source_file_rec.vimfiler_dummy_candidates	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_rec.vimfiler_dummy_candidates(args, context) abort "{{{$/;"	f
source_file_rec.vimfiler_gather_candidates	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:source_file_rec.vimfiler_gather_candidates(args, context) abort "{{{$/;"	f
source_line.complete	plugged/unite.vim/autoload/unite/sources/line.vim	/^function! s:source_line.complete(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
source_line.gather_candidates	plugged/unite.vim/autoload/unite/sources/line.vim	/^function! s:source_line.gather_candidates(args, context) abort "{{{$/;"	f
source_line.hooks.on_init	plugged/unite.vim/autoload/unite/sources/line.vim	/^function! s:source_line.hooks.on_init(args, context) abort "{{{$/;"	f
source_line.hooks.on_post_filter	plugged/unite.vim/autoload/unite/sources/line.vim	/^function! s:source_line.hooks.on_post_filter(args, context) abort "{{{$/;"	f
source_line.hooks.on_syntax	plugged/unite.vim/autoload/unite/sources/line.vim	/^function! s:source_line.hooks.on_syntax(args, context) abort "{{{$/;"	f
source_line.source__converter	plugged/unite.vim/autoload/unite/sources/line.vim	/^function! s:source_line.source__converter(candidates, context) abort "{{{$/;"	f
space_before_function_paren	plugged/vim-snippets/pythonx/javascript_snippets.py	/^def space_before_function_paren(snip):$/;"	f
span	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:span(f, xs) abort$/;"	f
spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
spawn	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^function! s:spawn(expr, ...) abort$/;"	f
split	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:split(path) abort$/;"	f
split	plugged/vim-gitgutter/autoload/gitgutter/diff_highlight.vim	/^function! s:split(str, delimiter)$/;"	f
split3	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:split3(expr, pattern) abort$/;"	f
split_by_displaywidth	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:split_by_displaywidth(expr, width, float, is_wrap) abort$/;"	f
split_leftright	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:split_leftright(expr, pattern) abort$/;"	f
split_posix_text	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:split_posix_text(text, ...) abort$/;"	f
split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
split_rtp	plugged/unite.vim/autoload/unite/sources/runtimepath.vim	/^function! s:split_rtp(...) abort "{{{$/;"	f
stack_cb	plugged/vim-go/autoload/go/debug.vim	/^function! s:stack_cb(res) abort$/;"	f
stage	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:stage(hunk_diff)$/;"	f
start	plugged/coc.nvim/autoload/coc/client.vim	/^function! s:start() dict$/;"	f
start	plugged/vim-go/autoload/go/job.vim	/^function! s:start(args) dict$/;"	f
start	plugged/vim-go/autoload/go/lsp.vim	/^function! s:start() abort dict$/;"	f
start_cb	plugged/vim-go/autoload/go/debug.vim	/^function! s:start_cb() abort$/;"	f
start_prompt	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! s:start_prompt()$/;"	f
start_prompt_vim	plugged/coc.nvim/autoload/coc/prompt.vim	/^function! s:start_prompt_vim() abort$/;"	f
starts_with	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:starts_with(str, prefix) abort$/;"	f
state	plugged/vim-go/autoload/go/job.vim	/^    let state.custom_complete = a:args.complete$/;"	v
state.show_errors	plugged/vim-go/autoload/go/job.vim	/^  function state.show_errors(job, exit_status, data)$/;"	f
state.show_status	plugged/vim-go/autoload/go/job.vim	/^  function state.show_status(job, exit_status) dict$/;"	f
status	autoload/plug.vim	/^function! s:status()$/;"	f
status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
stop	plugged/vim-go/autoload/go/debug.vim	/^function! s:stop() abort$/;"	f
str	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:str(longsig, full) abort dict$/;"	f
strchars	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^  function! s:strchars(str) abort$/;"	f
strfmt	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:strfmt() abort dict$/;"	f
strfmt	plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:strfmt() abort dict$/;"	f
string	plugged/unite.vim/autoload/unite/filters/sorter_selecta.py	/^import string$/;"	i
string	plugged/vim-snippets/pythonx/vimsnippets.py	/^import string, vim, re$/;"	i
stringHighlightGroupInAssignment	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:stringHighlightGroupInAssignment(testname, value)$/;"	f
strip_trailing_new_line	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:strip_trailing_new_line(line) abort$/;"	f
strlen	plugged/vim-go/autoload/go/lsp/lsp.vim	/^function! s:strlen(str) abort$/;"	f
strwidthpart	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
strwidthpart	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
strwidthpart_reverse	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
strwidthpart_reverse	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
sub	plugged/unite.vim/rplugin/python3/denite/source/unite.py	/^from re import sub$/;"	i
sub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
subprocess	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^import subprocess$/;"	i
substituteLocalPath	plugged/vim-go/autoload/go/debug.vim	/^function! s:substituteLocalPath(path) abort$/;"	f
substitutePath	plugged/vim-go/autoload/go/debug.vim	/^function! s:substitutePath(path, substitutions) abort$/;"	f
substituteRemotePath	plugged/vim-go/autoload/go/debug.vim	/^function! s:substituteRemotePath(path) abort$/;"	f
substitute_last	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:substitute_last(expr, pat, sub) abort$/;"	f
substitute_path_separator	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:substitute_path_separator(path) abort$/;"	f
suite.BuildGitStatusCommand	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.BuildGitStatusCommand() abort$/;"	f
suite.BuildGitWorkdirCommand	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.BuildGitWorkdirCommand() abort$/;"	f
suite.CustomIndicator	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.CustomIndicator() abort$/;"	f
suite.Initializing	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.Initializing() abort$/;"	f
suite.Logger	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.Logger() abort$/;"	f
suite.UpdateParentDirsStatus	plugged/nerdtree-git-plugin/tests/test_all.vim	/^function! s:suite.UpdateParentDirsStatus() abort$/;"	f
suite.after_each	plugged/unite.vim/test/matcher.vim	/^function! s:suite.after_each() abort$/;"	f
suite.before_each	plugged/unite.vim/test/matcher.vim	/^function! s:suite.before_each() abort$/;"	f
suite.common_string	plugged/unite.vim/test/converter.vim	/^function! s:suite.common_string() abort$/;"	f
suite.source	plugged/unite.vim/test/grep.vim	/^function! s:suite.source() abort$/;"	f
suite.source	plugged/unite.vim/test/source.vim	/^function! s:suite.source() abort$/;"	f
suite.uniq	plugged/unite.vim/test/converter.vim	/^function! s:suite.uniq() abort$/;"	f
summary	plugged/vim-gitgutter/test/runner.vim	/^let summary = [$/;"	v
switch	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! s:switch(candidate) abort "{{{$/;"	f
switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
sync_guru	plugged/vim-go/autoload/go/guru.vim	/^function! s:sync_guru(args) abort$/;"	f
syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
system	plugged/coc.nvim/autoload/coc/ui.vim	/^function! s:system(cmd)$/;"	f
system	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^function! s:system(str, ...) abort$/;"	f
system	plugged/vim-go/autoload/go/util.vim	/^function! s:system(cmd, ...) abort$/;"	f
system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
tabid_nr	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:tabid_nr(tid) abort$/;"	f
tabline_evaluated_length	plugged/vim-airline/autoload/airline/extensions/tabline/builder.vim	/^function! s:tabline_evaluated_length(tabline)$/;"	f
tabnr_id	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:tabnr_id(nr) abort$/;"	f
tagbar#CloseWindow	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#CloseWindow() abort$/;"	f
tagbar#ForceUpdate	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#ForceUpdate() abort$/;"	f
tagbar#GetTagNearLine	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#GetTagNearLine(lnum, ...) abort$/;"	f
tagbar#IsOpen	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#IsOpen() abort$/;"	f
tagbar#OpenWindow	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#OpenWindow(...) abort$/;"	f
tagbar#RestoreSession	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#RestoreSession() abort$/;"	f
tagbar#SetFoldLevel	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#SetFoldLevel(level, force) abort$/;"	f
tagbar#StopAutoUpdate	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#StopAutoUpdate() abort$/;"	f
tagbar#ToggleWindow	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#ToggleWindow(...) abort$/;"	f
tagbar#Update	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#Update() abort$/;"	f
tagbar#autoopen	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#autoopen(...) abort$/;"	f
tagbar#currentfile	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currentfile() abort$/;"	f
tagbar#currenttag	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttag(fmt, default, ...) abort$/;"	f
tagbar#currenttagtype	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttagtype(fmt, default) abort$/;"	f
tagbar#debug#enabled	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#enabled() abort$/;"	f
tagbar#debug#log	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log(msg) abort$/;"	f
tagbar#debug#log_ctags_output	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log_ctags_output(output) abort$/;"	f
tagbar#debug#start_debug	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#start_debug(...) abort$/;"	f
tagbar#debug#stop_debug	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#stop_debug() abort$/;"	f
tagbar#gettypeconfig	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#gettypeconfig(type) abort$/;"	f
tagbar#getusertypes	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#getusertypes() abort$/;"	f
tagbar#highlighttag	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#highlighttag(openfolds, force) abort$/;"	f
tagbar#inspect	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#inspect(var) abort$/;"	f
tagbar#is_paused	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#is_paused() abort$/;"	f
tagbar#jump	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#jump() abort$/;"	f
tagbar#jumpToNearbyTag	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#jumpToNearbyTag(direction, ...) abort$/;"	f
tagbar#printfileinfo	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#printfileinfo() abort$/;"	f
tagbar#prototypes#basetag#new	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! tagbar#prototypes#basetag#new(name) abort$/;"	f
tagbar#prototypes#fileinfo#new	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! tagbar#prototypes#fileinfo#new(fname, ftype, typeinfo) abort$/;"	f
tagbar#prototypes#kindheadertag#new	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! tagbar#prototypes#kindheadertag#new(name) abort$/;"	f
tagbar#prototypes#normaltag#new	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! tagbar#prototypes#normaltag#new(name) abort$/;"	f
tagbar#prototypes#pseudotag#new	plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! tagbar#prototypes#pseudotag#new(name) abort$/;"	f
tagbar#prototypes#splittag#new	plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! tagbar#prototypes#splittag#new(name) abort$/;"	f
tagbar#prototypes#typeinfo#new	plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! tagbar#prototypes#typeinfo#new(...) abort$/;"	f
tagbar#sorting#sort	plugged/tagbar/autoload/tagbar/sorting.vim	/^function! tagbar#sorting#sort(tags, compareby, compare_typeinfo) abort$/;"	f
tagbar#state#get_current_file	plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#get_current_file(force_current) abort$/;"	f
tagbar#state#set_current_file	plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_current_file(fileinfo) abort$/;"	f
tagbar#state#set_paused	plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_paused() abort$/;"	f
tagbar#toggle_pause	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#toggle_pause() abort$/;"	f
tagbar#types#ctags#init	plugged/tagbar/autoload/tagbar/types/ctags.vim	/^function! tagbar#types#ctags#init(supported_types) abort$/;"	f
tagbar#types#uctags#init	plugged/tagbar/autoload/tagbar/types/uctags.vim	/^function! tagbar#types#uctags#init(supported_types) abort$/;"	f
tail	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path_improved.vim	/^function! s:tail(bufnr) abort$/;"	f
tails	plugged/vim-airline/autoload/airline/extensions/tabline/formatters/short_path_improved.vim	/^function! s:tails(self, buffers) abort$/;"	f
take_while	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:take_while(f, xs) abort$/;"	f
tbl_extend	plugged/catppuccin/lua/catppuccin/lib/vim/init.lua	/^local function tbl_extend(behavior, deep_extend, ...)$/;"	f
tbl_isempty	plugged/catppuccin/lua/catppuccin/lib/vim/init.lua	/^local function tbl_isempty(t)$/;"	f
tbl_islist	plugged/catppuccin/lua/catppuccin/lib/vim/init.lua	/^local function tbl_islist(t)$/;"	f
terminateTree	plugged/coc.nvim/bin/terminateProcess.sh	/^terminateTree() {$/;"	f
termname	plugged/vim-airline/autoload/airline/extensions/term.vim	/^function! s:termname(bufnr) abort$/;"	f
test	plugged/vim-go/autoload/go/test_test.vim	/^func! s:test(file, expected, ...) abort$/;"	f
test_job	plugged/vim-go/autoload/go/test.vim	/^function! s:test_job(cmd, args) abort$/;"	f
test_snipmate_format	plugged/vim-snippets/tests.sh	/^function test_snipmate_format {$/;"	f
test_space_indented	plugged/vim-snippets/tests.sh	/^function test_space_indented {$/;"	f
textDocumentPositionParams	plugged/vim-go/autoload/go/lsp/message.vim	/^function! s:textDocumentPositionParams(fname, line, col) abort$/;"	f
textEditLess	plugged/vim-go/autoload/go/lsp.vim	/^function! s:textEditLess(left, right) abort$/;"	f
theme_has_hint	colors/PaperColor.vim	/^fun! s:theme_has_hint(hint)$/;"	f
throw	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:throw(string) abort$/;"	f
tick	autoload/plug.vim	/^function! s:tick()$/;"	f
timeout	plugged/coc.nvim/autoload/coc/util.vim	/^  let timeout = s:is_vim ? 10 : 0$/;"	v
timer_handler	plugged/unite.vim/autoload/unite/handlers.vim	/^function! s:timer_handler(timer) abort "{{{$/;"	f
timer_restart	plugged/vim-go/autoload/go/auto.vim	/^function! s:timer_restart()$/;"	f
timer_start	plugged/vim-go/autoload/go/auto.vim	/^function! s:timer_start()$/;"	f
timer_stop	plugged/vim-go/autoload/go/auto.vim	/^function! s:timer_stop()$/;"	f
to_256	colors/PaperColor.vim	/^  fun! s:to_256(rgb)$/;"	f
to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
to_group	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:to_group(items) abort$/;"	f
to_hex_color	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:to_hex_color(color, term) abort$/;"	f
to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
toggleFold	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:toggleFold(fileinfo) abort dict$/;"	f
toggleIgnoreFilter	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter() abort$/;"	f
toggleShowBookmarks	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks() abort$/;"	f
toggleShowFileLines	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFileLines() abort$/;"	f
toggleShowFiles	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles() abort$/;"	f
toggleShowHidden	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden() abort$/;"	f
toggleZoom	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom() abort$/;"	f
toggle_auto_highlight	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:toggle_auto_highlight() abort "{{{$/;"	f
toggle_auto_preview	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:toggle_auto_preview() abort "{{{$/;"	f
toggle_each_buffer	plugged/vim-gitgutter/autoload/gitgutter.vim	/^function s:toggle_each_buffer(enable)$/;"	f
toggle_mark	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:toggle_mark(map) abort "{{{$/;"	f
toggle_mark_all_candidates	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:toggle_mark_all_candidates() abort "{{{$/;"	f
toggle_mark_candidates	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:toggle_mark_candidates(start, end) abort "{{{$/;"	f
toggle_off	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! s:toggle_off()$/;"	f
toggle_on	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! s:toggle_on()$/;"	f
toggle_transpose_window	plugged/unite.vim/autoload/unite/mappings.vim	/^function! s:toggle_transpose_window() abort "{{{$/;"	f
trigger_gitgutter	plugged/vim-gitgutter/test/test_gitgutter.vim	/^function s:trigger_gitgutter()$/;"	f
trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
trim	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:trim(str) abort$/;"	f
trim_end	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:trim_end(str) abort$/;"	f
trim_start	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:trim_start(str) abort$/;"	f
truncate	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:truncate(str, width) abort$/;"	f
truncate	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:truncate(str, width) abort$/;"	f
truncate_skipping	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
truncate_skipping	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
type(user_highlights.all) 	plugged/catppuccin/lua/catppuccin/lib/mapper.lua	/^		type(user_highlights.all) == "function" and user_highlights.all(C) or user_highlights.all or {}$/;"	f
typeDefinitionHandler	plugged/vim-go/autoload/go/lsp.vim	/^function! s:typeDefinitionHandler(next, msg) abort dict$/;"	f
typeHighlightGroup	plugged/vim-go/autoload/go/highlight_test.vim	/^function! s:typeHighlightGroup(testname, value)$/;"	f
unc_path	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:unc_path(bufnr)$/;"	f
undo	plugged/vim-gitgutter/autoload/gitgutter/hunk.vim	/^function! s:undo(hunk_diff)$/;"	f
unescape	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:unescape(str, chars) abort$/;"	f
unescape_pattern	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:unescape_pattern(str) abort$/;"	f
unify_separator	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:unify_separator(path) abort$/;"	f
uniq	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:uniq(list) abort$/;"	f
uniq	plugged/vim-go/autoload/go/impl.vim	/^  function! s:uniq(list)$/;"	f
uniq_by	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
unite#action#_get_candidate_action_table	plugged/unite.vim/autoload/unite/action.vim	/^function! unite#action#_get_candidate_action_table(candidate, sources) abort "{{{$/;"	f
unite#action#do	plugged/unite.vim/autoload/unite/action.vim	/^function! unite#action#do(action_name, ...) abort "{{{$/;"	f
unite#action#do_candidates	plugged/unite.vim/autoload/unite/action.vim	/^function! unite#action#do_candidates(action_name, candidates, ...) abort "{{{$/;"	f
unite#action#get_action_table	plugged/unite.vim/autoload/unite/action.vim	/^function! unite#action#get_action_table(source_name, kind, self_func, ...) abort "{{{$/;"	f
unite#action#get_alias_table	plugged/unite.vim/autoload/unite/action.vim	/^function! unite#action#get_alias_table(source_name, kind, ...) abort "{{{$/;"	f
unite#action#get_default_action	plugged/unite.vim/autoload/unite/action.vim	/^function! unite#action#get_default_action(source_name, kind) abort "{{{$/;"	f
unite#action#take	plugged/unite.vim/autoload/unite/action.vim	/^function! unite#action#take(action_name, candidate, is_parent_action) abort "{{{$/;"	f
unite#add_previewed_buffer_list	plugged/unite.vim/autoload/unite.vim	/^function! unite#add_previewed_buffer_list(bufnr) abort "{{{$/;"	f
unite#add_source_message	plugged/unite.vim/autoload/unite.vim	/^function! unite#add_source_message(message, source_name) abort "{{{$/;"	f
unite#all_quit_session	plugged/unite.vim/autoload/unite.vim	/^function! unite#all_quit_session(...) abort  "{{{$/;"	f
unite#args_complete	plugged/unite.vim/autoload/unite.vim	/^function! unite#args_complete(sources, arglead, cmdline, cursorpos) abort "{{{$/;"	f
unite#candidates#_gather_pos	plugged/unite.vim/autoload/unite/candidates.vim	/^function! unite#candidates#_gather_pos(offset) abort "{{{$/;"	f
unite#candidates#_recache	plugged/unite.vim/autoload/unite/candidates.vim	/^function! unite#candidates#_recache(input, is_force) abort "{{{$/;"	f
unite#candidates#gather	plugged/unite.vim/autoload/unite/candidates.vim	/^function! unite#candidates#gather(...) abort "{{{$/;"	f
unite#clear_message	plugged/unite.vim/autoload/unite.vim	/^function! unite#clear_message() abort "{{{$/;"	f
unite#complete#args	plugged/unite.vim/autoload/unite/complete.vim	/^function! unite#complete#args(sources, arglead, cmdline, cursorpos) abort "{{{$/;"	f
unite#complete#buffer_name	plugged/unite.vim/autoload/unite/complete.vim	/^function! unite#complete#buffer_name(arglead, cmdline, cursorpos) abort "{{{$/;"	f
unite#complete#gather	plugged/unite.vim/autoload/unite/complete.vim	/^function! unite#complete#gather(candidates, input) abort "{{{$/;"	f
unite#complete#gather_vim	plugged/unite.vim/autoload/unite/complete.vim	/^function! unite#complete#gather_vim(candidates, input) abort "{{{$/;"	f
unite#complete#source	plugged/unite.vim/autoload/unite/complete.vim	/^function! unite#complete#source(arglead, cmdline, cursorpos) abort "{{{$/;"	f
unite#complete#vimfiler	plugged/unite.vim/autoload/unite/complete.vim	/^function! unite#complete#vimfiler(sources, arglead, cmdline, cursorpos) abort "{{{$/;"	f
unite#complete_buffer_name	plugged/unite.vim/autoload/unite.vim	/^function! unite#complete_buffer_name(arglead, cmdline, cursorpos) abort "{{{$/;"	f
unite#complete_source	plugged/unite.vim/autoload/unite.vim	/^function! unite#complete_source(arglead, cmdline, cursorpos) abort "{{{$/;"	f
unite#custom#action	plugged/unite.vim/autoload/unite/custom.vim	/^function! unite#custom#action(kind, name, action) abort "{{{$/;"	f
unite#custom#alias	plugged/unite.vim/autoload/unite/custom.vim	/^function! unite#custom#alias(kind, name, action) abort "{{{$/;"	f
unite#custom#default_action	plugged/unite.vim/autoload/unite/custom.vim	/^function! unite#custom#default_action(kind, default_action) abort "{{{$/;"	f
unite#custom#get	plugged/unite.vim/autoload/unite/custom.vim	/^function! unite#custom#get() abort "{{{$/;"	f
unite#custom#get_context	plugged/unite.vim/autoload/unite/custom.vim	/^function! unite#custom#get_context(profile_name) abort "{{{$/;"	f
unite#custom#get_profile	plugged/unite.vim/autoload/unite/custom.vim	/^function! unite#custom#get_profile(profile_name, option_name) abort "{{{$/;"	f
unite#custom#profile	plugged/unite.vim/autoload/unite/custom.vim	/^function! unite#custom#profile(profile_name, option_name, value) abort "{{{$/;"	f
unite#custom#source	plugged/unite.vim/autoload/unite/custom.vim	/^function! unite#custom#source(source_name, option_name, value) abort "{{{$/;"	f
unite#custom#substitute	plugged/unite.vim/autoload/unite/custom.vim	/^function! unite#custom#substitute(profile, pattern, subst, ...) abort "{{{$/;"	f
unite#custom_action	plugged/unite.vim/autoload/unite.vim	/^function! unite#custom_action(kind, name, action) abort "{{{$/;"	f
unite#custom_alias	plugged/unite.vim/autoload/unite.vim	/^function! unite#custom_alias(kind, name, action) abort "{{{$/;"	f
unite#custom_default_action	plugged/unite.vim/autoload/unite.vim	/^function! unite#custom_default_action(kind, default_action) abort "{{{$/;"	f
unite#custom_filters	plugged/unite.vim/autoload/unite.vim	/^function! unite#custom_filters(source_name, expr) abort "{{{$/;"	f
unite#custom_max_candidates	plugged/unite.vim/autoload/unite.vim	/^function! unite#custom_max_candidates(source_name, max) abort "{{{$/;"	f
unite#custom_source	plugged/unite.vim/autoload/unite.vim	/^function! unite#custom_source(source_name, option_name, value) abort "{{{$/;"	f
unite#define_filter	plugged/unite.vim/autoload/unite.vim	/^function! unite#define_filter(filter) abort "{{{$/;"	f
unite#define_kind	plugged/unite.vim/autoload/unite.vim	/^function! unite#define_kind(kind) abort "{{{$/;"	f
unite#define_source	plugged/unite.vim/autoload/unite.vim	/^function! unite#define_source(source) abort "{{{$/;"	f
unite#do_action	plugged/unite.vim/autoload/unite.vim	/^function! unite#do_action(action) abort "{{{$/;"	f
unite#dummy_completefunc	plugged/unite.vim/autoload/unite.vim	/^function! unite#dummy_completefunc(findstart, base) abort "{{{$/;"	f
unite#exrename#create_buffer	plugged/unite.vim/autoload/unite/exrename.vim	/^function! unite#exrename#create_buffer(candidates, ...) abort "{{{$/;"	f
unite#filters#common_string	plugged/unite.vim/autoload/unite/filters.vim	/^function! unite#filters#common_string(list) abort "{{{$/;"	f
unite#filters#converter_abbr_word#define	plugged/unite.vim/autoload/unite/filters/converter_abbr_word.vim	/^function! unite#filters#converter_abbr_word#define() abort "{{{$/;"	f
unite#filters#converter_default#define	plugged/unite.vim/autoload/unite/filters/converter_default.vim	/^function! unite#filters#converter_default#define() abort "{{{$/;"	f
unite#filters#converter_default#get	plugged/unite.vim/autoload/unite/filters/converter_default.vim	/^function! unite#filters#converter_default#get() abort "{{{$/;"	f
unite#filters#converter_default#use	plugged/unite.vim/autoload/unite/filters/converter_default.vim	/^function! unite#filters#converter_default#use(converters) abort "{{{$/;"	f
unite#filters#converter_file_directory#define	plugged/unite.vim/autoload/unite/filters/converter_file_directory.vim	/^function! unite#filters#converter_file_directory#define() abort "{{{$/;"	f
unite#filters#converter_full_path#define	plugged/unite.vim/autoload/unite/filters/converter_full_path.vim	/^function! unite#filters#converter_full_path#define() abort "{{{$/;"	f
unite#filters#converter_nothing#define	plugged/unite.vim/autoload/unite/filters/converter_nothing.vim	/^function! unite#filters#converter_nothing#define() abort "{{{$/;"	f
unite#filters#converter_relative_abbr#define	plugged/unite.vim/autoload/unite/filters/converter_relative_abbr.vim	/^function! unite#filters#converter_relative_abbr#define() abort "{{{$/;"	f
unite#filters#converter_relative_word#define	plugged/unite.vim/autoload/unite/filters/converter_relative_word.vim	/^function! unite#filters#converter_relative_word#define() abort "{{{$/;"	f
unite#filters#converter_smart_path#define	plugged/unite.vim/autoload/unite/filters/converter_smart_path.vim	/^function! unite#filters#converter_smart_path#define() abort "{{{$/;"	f
unite#filters#converter_tail#define	plugged/unite.vim/autoload/unite/filters/converter_tail.vim	/^function! unite#filters#converter_tail#define() abort "{{{$/;"	f
unite#filters#converter_tail_abbr#define	plugged/unite.vim/autoload/unite/filters/converter_tail_abbr.vim	/^function! unite#filters#converter_tail_abbr#define() abort "{{{$/;"	f
unite#filters#converter_uniq_word#define	plugged/unite.vim/autoload/unite/filters/converter_uniq_word.vim	/^function! unite#filters#converter_uniq_word#define() abort "{{{$/;"	f
unite#filters#converter_word_abbr#define	plugged/unite.vim/autoload/unite/filters/converter_word_abbr.vim	/^function! unite#filters#converter_word_abbr#define() abort "{{{$/;"	f
unite#filters#escape	plugged/unite.vim/autoload/unite/filters.vim	/^function! unite#filters#escape(string) abort "{{{$/;"	f
unite#filters#filter_matcher	plugged/unite.vim/autoload/unite/filters.vim	/^function! unite#filters#filter_matcher(list, expr, context) abort "{{{$/;"	f
unite#filters#filter_patterns	plugged/unite.vim/autoload/unite/filters.vim	/^function! unite#filters#filter_patterns(candidates, patterns, whites) abort "{{{$/;"	f
unite#filters#fuzzy_escape	plugged/unite.vim/autoload/unite/filters.vim	/^function! unite#filters#fuzzy_escape(string) abort "{{{$/;"	f
unite#filters#globs2patterns	plugged/unite.vim/autoload/unite/filters.vim	/^function! unite#filters#globs2patterns(globs) abort "{{{$/;"	f
unite#filters#globs2vim_patterns	plugged/unite.vim/autoload/unite/filters.vim	/^function! unite#filters#globs2vim_patterns(globs) abort "{{{$/;"	f
unite#filters#matcher_context#define	plugged/unite.vim/autoload/unite/filters/matcher_context.vim	/^function! unite#filters#matcher_context#define() abort "{{{$/;"	f
unite#filters#matcher_default#define	plugged/unite.vim/autoload/unite/filters/matcher_default.vim	/^function! unite#filters#matcher_default#define() abort "{{{$/;"	f
unite#filters#matcher_default#get	plugged/unite.vim/autoload/unite/filters/matcher_default.vim	/^function! unite#filters#matcher_default#get() abort "{{{$/;"	f
unite#filters#matcher_default#use	plugged/unite.vim/autoload/unite/filters/matcher_default.vim	/^function! unite#filters#matcher_default#use(matchers) abort "{{{$/;"	f
unite#filters#matcher_fuzzy#define	plugged/unite.vim/autoload/unite/filters/matcher_fuzzy.vim	/^function! unite#filters#matcher_fuzzy#define() abort "{{{$/;"	f
unite#filters#matcher_fuzzy#get_fuzzy_input	plugged/unite.vim/autoload/unite/filters/matcher_fuzzy.vim	/^function! unite#filters#matcher_fuzzy#get_fuzzy_input(input) abort "{{{$/;"	f
unite#filters#matcher_glob#define	plugged/unite.vim/autoload/unite/filters/matcher_glob.vim	/^function! unite#filters#matcher_glob#define() abort "{{{$/;"	f
unite#filters#matcher_glob#glob_matcher	plugged/unite.vim/autoload/unite/filters/matcher_glob.vim	/^function! unite#filters#matcher_glob#glob_matcher(candidates, input, context) abort "{{{$/;"	f
unite#filters#matcher_hide_current_file#define	plugged/unite.vim/autoload/unite/filters/matcher_hide_current_file.vim	/^function! unite#filters#matcher_hide_current_file#define() abort "{{{$/;"	f
unite#filters#matcher_hide_hidden_files#define	plugged/unite.vim/autoload/unite/filters/matcher_hide_hidden_files.vim	/^function! unite#filters#matcher_hide_hidden_files#define() abort "{{{$/;"	f
unite#filters#matcher_migemo#define	plugged/unite.vim/autoload/unite/filters/matcher_migemo.vim	/^function! unite#filters#matcher_migemo#define() abort "{{{$/;"	f
unite#filters#matcher_project_files#define	plugged/unite.vim/autoload/unite/filters/matcher_project_files.vim	/^function! unite#filters#matcher_project_files#define() abort "{{{$/;"	f
unite#filters#matcher_project_ignore_files#define	plugged/unite.vim/autoload/unite/filters/matcher_project_ignore_files.vim	/^function! unite#filters#matcher_project_ignore_files#define() abort "{{{$/;"	f
unite#filters#matcher_project_ignore_files#get_ignore_results	plugged/unite.vim/autoload/unite/filters/matcher_project_ignore_files.vim	/^function! unite#filters#matcher_project_ignore_files#get_ignore_results(path) abort "{{{$/;"	f
unite#filters#matcher_regexp#define	plugged/unite.vim/autoload/unite/filters/matcher_regexp.vim	/^function! unite#filters#matcher_regexp#define() abort "{{{$/;"	f
unite#filters#matcher_regexp#get_expr	plugged/unite.vim/autoload/unite/filters/matcher_regexp.vim	/^function! unite#filters#matcher_regexp#get_expr(input, context) abort "{{{$/;"	f
unite#filters#matcher_regexp#regexp_matcher	plugged/unite.vim/autoload/unite/filters/matcher_regexp.vim	/^function! unite#filters#matcher_regexp#regexp_matcher(candidates, input, context) abort "{{{$/;"	f
unite#filters#sorter_default#define	plugged/unite.vim/autoload/unite/filters/sorter_default.vim	/^function! unite#filters#sorter_default#define() abort "{{{$/;"	f
unite#filters#sorter_default#get	plugged/unite.vim/autoload/unite/filters/sorter_default.vim	/^function! unite#filters#sorter_default#get() abort "{{{$/;"	f
unite#filters#sorter_default#use	plugged/unite.vim/autoload/unite/filters/sorter_default.vim	/^function! unite#filters#sorter_default#use(sorters) abort "{{{$/;"	f
unite#filters#sorter_ftime#define	plugged/unite.vim/autoload/unite/filters/sorter_ftime.vim	/^function! unite#filters#sorter_ftime#define() abort "{{{$/;"	f
unite#filters#sorter_length#define	plugged/unite.vim/autoload/unite/filters/sorter_length.vim	/^function! unite#filters#sorter_length#define() abort "{{{$/;"	f
unite#filters#sorter_nothing#define	plugged/unite.vim/autoload/unite/filters/sorter_nothing.vim	/^function! unite#filters#sorter_nothing#define() abort "{{{$/;"	f
unite#filters#sorter_rank#define	plugged/unite.vim/autoload/unite/filters/sorter_rank.vim	/^function! unite#filters#sorter_rank#define() abort "{{{$/;"	f
unite#filters#sorter_reverse#define	plugged/unite.vim/autoload/unite/filters/sorter_reverse.vim	/^function! unite#filters#sorter_reverse#define() abort "{{{$/;"	f
unite#filters#sorter_selecta#_sort	plugged/unite.vim/autoload/unite/filters/sorter_selecta.vim	/^function! unite#filters#sorter_selecta#_sort(candidates, input) abort$/;"	f
unite#filters#sorter_selecta#define	plugged/unite.vim/autoload/unite/filters/sorter_selecta.vim	/^function! unite#filters#sorter_selecta#define() abort$/;"	f
unite#filters#sorter_word#define	plugged/unite.vim/autoload/unite/filters/sorter_word.vim	/^function! unite#filters#sorter_word#define() abort "{{{$/;"	f
unite#filters#uniq	plugged/unite.vim/autoload/unite/filters.vim	/^function! unite#filters#uniq(list) abort "{{{$/;"	f
unite#filters#vim_filter_head	plugged/unite.vim/autoload/unite/filters.vim	/^function! unite#filters#vim_filter_head(candidates, input) abort "{{{$/;"	f
unite#filters#vim_filter_pattern	plugged/unite.vim/autoload/unite/filters.vim	/^function! unite#filters#vim_filter_pattern(candidates, pattern) abort "{{{$/;"	f
unite#filters#vim_filter_patterns	plugged/unite.vim/autoload/unite/filters.vim	/^function! unite#filters#vim_filter_patterns(candidates, patterns, whites) abort "{{{$/;"	f
unite#force_quit_session	plugged/unite.vim/autoload/unite.vim	/^function! unite#force_quit_session() abort  "{{{$/;"	f
unite#force_redraw	plugged/unite.vim/autoload/unite.vim	/^function! unite#force_redraw(...) abort "{{{$/;"	f
unite#get_all_sources	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_all_sources(...) abort "{{{$/;"	f
unite#get_candidates	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_candidates(...) abort "{{{$/;"	f
unite#get_context	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_context() abort "{{{$/;"	f
unite#get_cur_text	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_cur_text() abort "{{{$/;"	f
unite#get_current_unite	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_current_unite() abort "{{{$/;"	f
unite#get_data_directory	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_data_directory() abort "{{{$/;"	f
unite#get_filters	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_filters(...) abort "{{{$/;"	f
unite#get_input	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_input() abort "{{{$/;"	f
unite#get_kinds	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_kinds(...) abort "{{{$/;"	f
unite#get_marked_candidates	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_marked_candidates() abort "{{{$/;"	f
unite#get_profile	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_profile(profile_name, option_name) abort "{{{$/;"	f
unite#get_self_functions	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_self_functions() abort "{{{$/;"	f
unite#get_sources	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_sources(...) abort "{{{$/;"	f
unite#get_status_string	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_status_string() abort "{{{$/;"	f
unite#get_unite_candidates	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_unite_candidates() abort "{{{$/;"	f
unite#get_unite_winnr	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_unite_winnr(buffer_name) abort "{{{$/;"	f
unite#get_vimfiler_candidates	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_vimfiler_candidates(...) abort "{{{$/;"	f
unite#get_vimfiler_source_names	plugged/unite.vim/autoload/unite.vim	/^function! unite#get_vimfiler_source_names() abort "{{{$/;"	f
unite#handlers#_init_timer	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_init_timer() abort  "{{{$/;"	f
unite#handlers#_on_buf_unload	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_on_buf_unload(bufname) abort  "{{{$/;"	f
unite#handlers#_on_bufwin_enter	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_on_bufwin_enter(bufnr) abort  "{{{$/;"	f
unite#handlers#_on_cursor_hold	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_on_cursor_hold() abort  "{{{$/;"	f
unite#handlers#_on_cursor_hold_i	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_on_cursor_hold_i() abort  "{{{$/;"	f
unite#handlers#_on_cursor_moved	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_on_cursor_moved() abort  "{{{$/;"	f
unite#handlers#_on_cursor_moved_i	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_on_cursor_moved_i() abort  "{{{$/;"	f
unite#handlers#_on_insert_char_pre	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_on_insert_char_pre() abort  "{{{$/;"	f
unite#handlers#_on_insert_enter	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_on_insert_enter() abort  "{{{$/;"	f
unite#handlers#_on_insert_leave	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_on_insert_leave() abort  "{{{$/;"	f
unite#handlers#_on_text_changed	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_on_text_changed() abort  "{{{$/;"	f
unite#handlers#_restore_updatetime	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_restore_updatetime() abort  "{{{$/;"	f
unite#handlers#_save_updatetime	plugged/unite.vim/autoload/unite/handlers.vim	/^function! unite#handlers#_save_updatetime() abort  "{{{$/;"	f
unite#helper#adjustments	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#adjustments(currentwinwidth, the_max_source_name, size) abort "{{{$/;"	f
unite#helper#call_filter	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#call_filter(filter_name, candidates, context) abort "{{{$/;"	f
unite#helper#call_hook	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#call_hook(sources, hook_name) abort "{{{$/;"	f
unite#helper#call_source_filters	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#call_source_filters(filters, candidates, context, source) abort "{{{$/;"	f
unite#helper#call_unite	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#call_unite(command, args, line1, line2) abort "{{{$/;"	f
unite#helper#call_unite_resume	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#call_unite_resume(args) abort "{{{$/;"	f
unite#helper#choose_window	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#choose_window() abort "{{{$/;"	f
unite#helper#complete_search_history	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#complete_search_history(arglead, cmdline, cursorpos) abort "{{{$/;"	f
unite#helper#convert_source_name	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#convert_source_name(source_name) abort "{{{$/;"	f
unite#helper#cursor_prompt	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#cursor_prompt() abort "{{{$/;"	f
unite#helper#get_buffer_directory	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_buffer_directory(bufnr) abort "{{{$/;"	f
unite#helper#get_candidate_directory	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_candidate_directory(candidate) abort "{{{$/;"	f
unite#helper#get_choose_windows	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_choose_windows() abort "{{{$/;"	f
unite#helper#get_current_candidate	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_current_candidate(...) abort "{{{$/;"	f
unite#helper#get_current_candidate_linenr	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_current_candidate_linenr(num) abort "{{{$/;"	f
unite#helper#get_input	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_input(...) abort "{{{$/;"	f
unite#helper#get_input_list	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_input_list(input) abort "{{{$/;"	f
unite#helper#get_marked_candidates	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_marked_candidates() abort "{{{$/;"	f
unite#helper#get_postfix	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_postfix(prefix, is_create, ...) abort "{{{$/;"	f
unite#helper#get_source_args	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_source_args(sources) abort "{{{$/;"	f
unite#helper#get_source_names	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_source_names(sources) abort "{{{$/;"	f
unite#helper#get_substitute_input	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_substitute_input(input) abort "{{{$/;"	f
unite#helper#get_substitute_input_loop	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_substitute_input_loop(input, substitute_patterns) abort "{{{$/;"	f
unite#helper#get_unite_bufnr	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_unite_bufnr(buffer_name) abort "{{{$/;"	f
unite#helper#get_unite_winnr	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#get_unite_winnr(buffer_name) abort "{{{$/;"	f
unite#helper#ignore_candidates	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#ignore_candidates(candidates, context) abort "{{{$/;"	f
unite#helper#invalidate_cache	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#invalidate_cache(source_name) abort  "{{{$/;"	f
unite#helper#is_prompt	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#is_prompt(line) abort "{{{$/;"	f
unite#helper#is_pty	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#is_pty(command) abort "{{{$/;"	f
unite#helper#join_targets	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#join_targets(targets) abort "{{{$/;"	f
unite#helper#parse_options	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#parse_options(cmdline) abort "{{{$/;"	f
unite#helper#parse_options_args	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#parse_options_args(cmdline) abort "{{{$/;"	f
unite#helper#parse_options_user	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#parse_options_user(args) abort "{{{$/;"	f
unite#helper#parse_source_args	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#parse_source_args(args) abort "{{{$/;"	f
unite#helper#parse_source_path	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#parse_source_path(path) abort "{{{$/;"	f
unite#helper#paths2candidates	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#paths2candidates(paths) abort "{{{$/;"	f
unite#helper#relative_target	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#relative_target(target) abort "{{{$/;"	f
unite#helper#skip_prompt	plugged/unite.vim/autoload/unite/helper.vim	/^function! unite#helper#skip_prompt() abort "{{{$/;"	f
unite#init#_candidates	plugged/unite.vim/autoload/unite/init.vim	/^function! unite#init#_candidates(candidates) abort "{{{$/;"	f
unite#init#_candidates_source	plugged/unite.vim/autoload/unite/init.vim	/^function! unite#init#_candidates_source(candidates, source_name) abort "{{{$/;"	f
unite#init#_context	plugged/unite.vim/autoload/unite/init.vim	/^function! unite#init#_context(context, ...) abort "{{{$/;"	f
unite#init#_current_unite	plugged/unite.vim/autoload/unite/init.vim	/^function! unite#init#_current_unite(sources, context) abort "{{{$/;"	f
unite#init#_default_scripts	plugged/unite.vim/autoload/unite/init.vim	/^function! unite#init#_default_scripts(kind, names) abort "{{{$/;"	f
unite#init#_filters	plugged/unite.vim/autoload/unite/init.vim	/^function! unite#init#_filters() abort "{{{$/;"	f
unite#init#_kinds	plugged/unite.vim/autoload/unite/init.vim	/^function! unite#init#_kinds() abort "{{{$/;"	f
unite#init#_loaded_sources	plugged/unite.vim/autoload/unite/init.vim	/^function! unite#init#_loaded_sources(sources, context) abort "{{{$/;"	f
unite#init#_sources	plugged/unite.vim/autoload/unite/init.vim	/^function! unite#init#_sources(...) abort "{{{$/;"	f
unite#init#_tab_variables	plugged/unite.vim/autoload/unite/init.vim	/^function! unite#init#_tab_variables() abort "{{{$/;"	f
unite#init#_unite_buffer	plugged/unite.vim/autoload/unite/init.vim	/^function! unite#init#_unite_buffer() abort "{{{$/;"	f
unite#is_win	plugged/unite.vim/autoload/unite.vim	/^function! unite#is_win() abort "{{{$/;"	f
unite#kinds#buffer#define	plugged/unite.vim/autoload/unite/kinds/buffer.vim	/^function! unite#kinds#buffer#define() abort "{{{$/;"	f
unite#kinds#cdable#define	plugged/unite.vim/autoload/unite/kinds/cdable.vim	/^function! unite#kinds#cdable#define() abort "{{{$/;"	f
unite#kinds#command#define	plugged/unite.vim/autoload/unite/kinds/command.vim	/^function! unite#kinds#command#define() abort "{{{$/;"	f
unite#kinds#common#define	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! unite#kinds#common#define() abort "{{{$/;"	f
unite#kinds#common#insert_word	plugged/unite.vim/autoload/unite/kinds/common.vim	/^function! unite#kinds#common#insert_word(word, ...) abort "{{{$/;"	f
unite#kinds#completion#define	plugged/unite.vim/autoload/unite/kinds/completion.vim	/^function! unite#kinds#completion#define() abort "{{{$/;"	f
unite#kinds#directory#define	plugged/unite.vim/autoload/unite/kinds/directory.vim	/^function! unite#kinds#directory#define() abort "{{{$/;"	f
unite#kinds#file#complete_overwrite_method	plugged/unite.vim/autoload/unite/kinds/file.vim	/^function! unite#kinds#file#complete_overwrite_method(arglead, cmdline, cursorpos) abort "{{{$/;"	f
unite#kinds#file#define	plugged/unite.vim/autoload/unite/kinds/file.vim	/^function! unite#kinds#file#define() abort "{{{$/;"	f
unite#kinds#file#do_action	plugged/unite.vim/autoload/unite/kinds/file.vim	/^function! unite#kinds#file#do_action(candidates, dest_dir, action_name) abort "{{{$/;"	f
unite#kinds#file#do_rename	plugged/unite.vim/autoload/unite/kinds/file.vim	/^function! unite#kinds#file#do_rename(old_filename, new_filename) abort "{{{$/;"	f
unite#kinds#file_base#define	plugged/unite.vim/autoload/unite/kinds/file_base.vim	/^function! unite#kinds#file_base#define() abort "{{{$/;"	f
unite#kinds#file_vimfiler_base#define	plugged/unite.vim/autoload/unite/kinds/file_vimfiler_base.vim	/^function! unite#kinds#file_vimfiler_base#define() abort "{{{$/;"	f
unite#kinds#guicmd#define	plugged/unite.vim/autoload/unite/kinds/guicmd.vim	/^function! unite#kinds#guicmd#define() abort "{{{$/;"	f
unite#kinds#jump_list#define	plugged/unite.vim/autoload/unite/kinds/jump_list.vim	/^function! unite#kinds#jump_list#define() abort "{{{$/;"	f
unite#kinds#openable#define	plugged/unite.vim/autoload/unite/kinds/openable.vim	/^function! unite#kinds#openable#define() abort "{{{$/;"	f
unite#kinds#source#define	plugged/unite.vim/autoload/unite/kinds/source.vim	/^function! unite#kinds#source#define() abort "{{{$/;"	f
unite#kinds#tab#define	plugged/unite.vim/autoload/unite/kinds/tab.vim	/^function! unite#kinds#tab#define() abort "{{{$/;"	f
unite#kinds#uri#define	plugged/unite.vim/autoload/unite/kinds/uri.vim	/^function! unite#kinds#uri#define() abort "{{{$/;"	f
unite#kinds#window#define	plugged/unite.vim/autoload/unite/kinds/window.vim	/^function! unite#kinds#window#define() abort "{{{$/;"	f
unite#kinds#word#define	plugged/unite.vim/autoload/unite/kinds/word.vim	/^function! unite#kinds#word#define() abort "{{{$/;"	f
unite#loaded_source_names	plugged/unite.vim/autoload/unite.vim	/^function! unite#loaded_source_names() abort "{{{$/;"	f
unite#loaded_source_names_string	plugged/unite.vim/autoload/unite.vim	/^function! unite#loaded_source_names_string() abort "{{{$/;"	f
unite#loaded_sources_list	plugged/unite.vim/autoload/unite.vim	/^function! unite#loaded_sources_list() abort "{{{$/;"	f
unite#mappings#_choose_action	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#_choose_action(candidates, ...) abort "{{{$/;"	f
unite#mappings#_quick_match	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#_quick_match(is_jump) abort "{{{$/;"	f
unite#mappings#cursor_down	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#cursor_down(is_skip_not_matched) abort "{{{$/;"	f
unite#mappings#cursor_up	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#cursor_up(is_skip_not_matched) abort "{{{$/;"	f
unite#mappings#define_default_mappings	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#define_default_mappings() abort "{{{$/;"	f
unite#mappings#do_action	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#do_action(...) abort "{{{$/;"	f
unite#mappings#get_current_converters	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#get_current_converters() abort "{{{$/;"	f
unite#mappings#get_current_matchers	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#get_current_matchers() abort "{{{$/;"	f
unite#mappings#get_current_sorters	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#get_current_sorters() abort "{{{$/;"	f
unite#mappings#loop_cursor_down	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#loop_cursor_down(mode) abort "{{{$/;"	f
unite#mappings#loop_cursor_up	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#loop_cursor_up(mode) abort "{{{$/;"	f
unite#mappings#narrowing	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#narrowing(word, ...) abort "{{{$/;"	f
unite#mappings#set_current_converters	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#set_current_converters(converters) abort "{{{$/;"	f
unite#mappings#set_current_matchers	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#set_current_matchers(matchers) abort "{{{$/;"	f
unite#mappings#set_current_sorters	plugged/unite.vim/autoload/unite/mappings.vim	/^function! unite#mappings#set_current_sorters(sorters) abort "{{{$/;"	f
unite#path2directory	plugged/unite.vim/autoload/unite.vim	/^function! unite#path2directory(path) abort "{{{$/;"	f
unite#print_error	plugged/unite.vim/autoload/unite.vim	/^function! unite#print_error(message) abort "{{{$/;"	f
unite#print_message	plugged/unite.vim/autoload/unite.vim	/^function! unite#print_message(message) abort "{{{$/;"	f
unite#print_source_error	plugged/unite.vim/autoload/unite.vim	/^function! unite#print_source_error(message, source_name) abort "{{{$/;"	f
unite#print_source_message	plugged/unite.vim/autoload/unite.vim	/^function! unite#print_source_message(message, source_name) abort "{{{$/;"	f
unite#quit_session	plugged/unite.vim/autoload/unite.vim	/^function! unite#quit_session() abort  "{{{$/;"	f
unite#redraw	plugged/unite.vim/autoload/unite.vim	/^function! unite#redraw(...) abort "{{{$/;"	f
unite#remove_previewed_buffer_list	plugged/unite.vim/autoload/unite.vim	/^function! unite#remove_previewed_buffer_list(bufnr) abort "{{{$/;"	f
unite#resume	plugged/unite.vim/autoload/unite.vim	/^function! unite#resume(...) abort "{{{$/;"	f
unite#set_buffer_name_option	plugged/unite.vim/autoload/unite.vim	/^function! unite#set_buffer_name_option(buffer_name, option_name, value) abort "{{{$/;"	f
unite#set_context	plugged/unite.vim/autoload/unite.vim	/^function! unite#set_context(context) abort "{{{$/;"	f
unite#set_current_unite	plugged/unite.vim/autoload/unite.vim	/^function! unite#set_current_unite(unite) abort "{{{$/;"	f
unite#set_profile	plugged/unite.vim/autoload/unite.vim	/^function! unite#set_profile(profile_name, option_name, value) abort "{{{$/;"	f
unite#set_substitute_pattern	plugged/unite.vim/autoload/unite.vim	/^function! unite#set_substitute_pattern(buffer_name, pattern, subst, ...) abort "{{{$/;"	f
unite#smart_map	plugged/unite.vim/autoload/unite.vim	/^function! unite#smart_map(narrow_map, select_map) abort "{{{$/;"	f
unite#sources#action#define	plugged/unite.vim/autoload/unite/sources/action.vim	/^function! unite#sources#action#define() abort$/;"	f
unite#sources#alias#define	plugged/unite.vim/autoload/unite/sources/alias.vim	/^function! unite#sources#alias#define() abort$/;"	f
unite#sources#bookmark#_append	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! unite#sources#bookmark#_append(filename) abort "{{{$/;"	f
unite#sources#bookmark#define	plugged/unite.vim/autoload/unite/sources/bookmark.vim	/^function! unite#sources#bookmark#define() abort "{{{$/;"	f
unite#sources#buffer#define	plugged/unite.vim/autoload/unite/sources/buffer.vim	/^function! unite#sources#buffer#define() abort "{{{$/;"	f
unite#sources#buffer#variables#append	plugged/unite.vim/autoload/unite/sources/buffer/variables.vim	/^function! unite#sources#buffer#variables#append(bufnr) abort "{{{$/;"	f
unite#sources#buffer#variables#get_buffer_list	plugged/unite.vim/autoload/unite/sources/buffer/variables.vim	/^function! unite#sources#buffer#variables#get_buffer_list() abort "{{{$/;"	f
unite#sources#change#define	plugged/unite.vim/autoload/unite/sources/change.vim	/^function! unite#sources#change#define() abort "{{{$/;"	f
unite#sources#command#define	plugged/unite.vim/autoload/unite/sources/command.vim	/^function! unite#sources#command#define() abort "{{{$/;"	f
unite#sources#decls#define	plugged/vim-go/autoload/unite/sources/decls.vim	/^function! unite#sources#decls#define()$/;"	f
unite#sources#directory#define	plugged/unite.vim/autoload/unite/sources/directory.vim	/^function! unite#sources#directory#define() abort "{{{$/;"	f
unite#sources#file#_clear_cache	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#_clear_cache() abort "{{{$/;"	f
unite#sources#file#_get_files	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#_get_files(input, context) abort "{{{$/;"	f
unite#sources#file#_get_input	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#_get_input(path, context) abort "{{{$/;"	f
unite#sources#file#_get_path	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#_get_path(args, context) abort "{{{$/;"	f
unite#sources#file#complete_directory	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#complete_directory(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
unite#sources#file#complete_file	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#complete_file(args, context, arglead, cmdline, cursorpos) abort "{{{$/;"	f
unite#sources#file#copy_files	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#copy_files(dest, srcs) abort "{{{$/;"	f
unite#sources#file#create_file_dict	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#create_file_dict(file, input, ...) abort "{{{$/;"	f
unite#sources#file#create_vimfiler_dict	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#create_vimfiler_dict(candidate, exts) abort "{{{$/;"	f
unite#sources#file#define	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#define() abort "{{{$/;"	f
unite#sources#file#delete_files	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#delete_files(srcs) abort "{{{$/;"	f
unite#sources#file#get_file_source	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#get_file_source() abort "{{{$/;"	f
unite#sources#file#move_files	plugged/unite.vim/autoload/unite/sources/file.vim	/^function! unite#sources#file#move_files(dest, srcs) abort "{{{$/;"	f
unite#sources#file_list#define	plugged/unite.vim/autoload/unite/sources/file_list.vim	/^function! unite#sources#file_list#define() abort "{{{$/;"	f
unite#sources#file_point#define	plugged/unite.vim/autoload/unite/sources/file_point.vim	/^function! unite#sources#file_point#define() abort "{{{$/;"	f
unite#sources#find#define	plugged/unite.vim/autoload/unite/sources/find.vim	/^function! unite#sources#find#define() abort "{{{$/;"	f
unite#sources#function#define	plugged/unite.vim/autoload/unite/sources/function.vim	/^function! unite#sources#function#define() abort "{{{$/;"	f
unite#sources#grep#define	plugged/unite.vim/autoload/unite/sources/grep.vim	/^function! unite#sources#grep#define() abort "{{{$/;"	f
unite#sources#grep#parse	plugged/unite.vim/autoload/unite/sources/grep.vim	/^function! unite#sources#grep#parse(line) abort "{{{$/;"	f
unite#sources#grep_git#define	plugged/unite.vim/autoload/unite/sources/grep_git.vim	/^function! unite#sources#grep_git#define() abort "{{{$/;"	f
unite#sources#grep_git#is_available	plugged/unite.vim/autoload/unite/sources/grep_git.vim	/^function! unite#sources#grep_git#is_available() abort "{{{$/;"	f
unite#sources#grep_git#repository_root	plugged/unite.vim/autoload/unite/sources/grep_git.vim	/^function! unite#sources#grep_git#repository_root() abort "{{{$/;"	f
unite#sources#history_input#define	plugged/unite.vim/autoload/unite/sources/history_input.vim	/^function! unite#sources#history_input#define() abort$/;"	f
unite#sources#history_unite#add	plugged/unite.vim/autoload/unite/sources/history_unite.vim	/^function! unite#sources#history_unite#add(unite) abort"{{{$/;"	f
unite#sources#history_unite#define	plugged/unite.vim/autoload/unite/sources/history_unite.vim	/^function! unite#sources#history_unite#define() abort$/;"	f
unite#sources#interactive#define	plugged/unite.vim/autoload/unite/sources/interactive.vim	/^function! unite#sources#interactive#define() abort$/;"	f
unite#sources#jump#define	plugged/unite.vim/autoload/unite/sources/jump.vim	/^function! unite#sources#jump#define() abort "{{{$/;"	f
unite#sources#jump_point#define	plugged/unite.vim/autoload/unite/sources/jump_point.vim	/^function! unite#sources#jump_point#define() abort "{{{$/;"	f
unite#sources#launcher#define	plugged/unite.vim/autoload/unite/sources/launcher.vim	/^function! unite#sources#launcher#define() abort "{{{$/;"	f
unite#sources#launcher#get_executables	plugged/unite.vim/autoload/unite/sources/launcher.vim	/^function! unite#sources#launcher#get_executables(path) abort "{{{$/;"	f
unite#sources#line#define	plugged/unite.vim/autoload/unite/sources/line.vim	/^function! unite#sources#line#define() abort "{{{$/;"	f
unite#sources#mapping#define	plugged/unite.vim/autoload/unite/sources/mapping.vim	/^function! unite#sources#mapping#define() abort "{{{$/;"	f
unite#sources#menu#define	plugged/unite.vim/autoload/unite/sources/menu.vim	/^function! unite#sources#menu#define() abort$/;"	f
unite#sources#output#define	plugged/unite.vim/autoload/unite/sources/output.vim	/^function! unite#sources#output#define() abort "{{{$/;"	f
unite#sources#output_shellcmd#define	plugged/unite.vim/autoload/unite/sources/output_shellcmd.vim	/^function! unite#sources#output_shellcmd#define() abort "{{{$/;"	f
unite#sources#process#define	plugged/unite.vim/autoload/unite/sources/process.vim	/^function! unite#sources#process#define() abort "{{{$/;"	f
unite#sources#rec#_append	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! unite#sources#rec#_append() abort "{{{$/;"	f
unite#sources#rec#define	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! unite#sources#rec#define() abort "{{{$/;"	f
unite#sources#register#define	plugged/unite.vim/autoload/unite/sources/register.vim	/^function! unite#sources#register#define() abort "{{{$/;"	f
unite#sources#resume#define	plugged/unite.vim/autoload/unite/sources/resume.vim	/^function! unite#sources#resume#define() abort "{{{$/;"	f
unite#sources#runtimepath#define	plugged/unite.vim/autoload/unite/sources/runtimepath.vim	/^function! unite#sources#runtimepath#define() abort "{{{$/;"	f
unite#sources#script#define	plugged/unite.vim/autoload/unite/sources/script.vim	/^function! unite#sources#script#define() abort$/;"	f
unite#sources#source#define	plugged/unite.vim/autoload/unite/sources/source.vim	/^function! unite#sources#source#define() abort "{{{$/;"	f
unite#sources#tab#define	plugged/unite.vim/autoload/unite/sources/tab.vim	/^function! unite#sources#tab#define() abort "{{{$/;"	f
unite#sources#vimgrep#define	plugged/unite.vim/autoload/unite/sources/vimgrep.vim	/^function! unite#sources#vimgrep#define() abort "{{{$/;"	f
unite#sources#window#define	plugged/unite.vim/autoload/unite/sources/window.vim	/^function! unite#sources#window#define() abort "{{{$/;"	f
unite#sources#window#sorter	plugged/unite.vim/autoload/unite/sources/window.vim	/^function! unite#sources#window#sorter(candidates, context) abort "{{{$/;"	f
unite#sources#window_gui#define	plugged/unite.vim/autoload/unite/sources/window_gui.vim	/^function! unite#sources#window_gui#define() abort "{{{$/;"	f
unite#start	plugged/unite.vim/autoload/unite.vim	/^function! unite#start(...) abort "{{{$/;"	f
unite#start#_do_command	plugged/unite.vim/autoload/unite/start.vim	/^function! unite#start#_do_command(cmd)$/;"	f
unite#start#_pos	plugged/unite.vim/autoload/unite/start.vim	/^function! unite#start#_pos(buffer_name, direction, count) abort "{{{$/;"	f
unite#start#complete	plugged/unite.vim/autoload/unite/start.vim	/^function! unite#start#complete(sources, ...) abort "{{{$/;"	f
unite#start#get_candidates	plugged/unite.vim/autoload/unite/start.vim	/^function! unite#start#get_candidates(sources, ...) abort "{{{$/;"	f
unite#start#get_vimfiler_candidates	plugged/unite.vim/autoload/unite/start.vim	/^function! unite#start#get_vimfiler_candidates(sources, ...) abort "{{{$/;"	f
unite#start#resume	plugged/unite.vim/autoload/unite/start.vim	/^function! unite#start#resume(buffer_name, ...) abort "{{{$/;"	f
unite#start#resume_from_temporary	plugged/unite.vim/autoload/unite/start.vim	/^function! unite#start#resume_from_temporary(context) abort  "{{{$/;"	f
unite#start#script	plugged/unite.vim/autoload/unite/start.vim	/^function! unite#start#script(sources, ...) abort "{{{$/;"	f
unite#start#standard	plugged/unite.vim/autoload/unite/start.vim	/^function! unite#start#standard(sources, ...) abort "{{{$/;"	f
unite#start#temporary	plugged/unite.vim/autoload/unite/start.vim	/^function! unite#start#temporary(sources, ...) abort "{{{$/;"	f
unite#start#vimfiler_check_filetype	plugged/unite.vim/autoload/unite/start.vim	/^function! unite#start#vimfiler_check_filetype(sources, ...) abort "{{{$/;"	f
unite#start_complete	plugged/unite.vim/autoload/unite.vim	/^function! unite#start_complete(...) abort "{{{$/;"	f
unite#start_script	plugged/unite.vim/autoload/unite.vim	/^function! unite#start_script(...) abort "{{{$/;"	f
unite#start_temporary	plugged/unite.vim/autoload/unite.vim	/^function! unite#start_temporary(...) abort "{{{$/;"	f
unite#substitute_path_separator	plugged/unite.vim/autoload/unite.vim	/^function! unite#substitute_path_separator(path) abort "{{{$/;"	f
unite#take_action	plugged/unite.vim/autoload/unite.vim	/^function! unite#take_action(action_name, candidate) abort "{{{$/;"	f
unite#take_parents_action	plugged/unite.vim/autoload/unite.vim	/^function! unite#take_parents_action(action_name, candidate, extend_candidate) abort "{{{$/;"	f
unite#undef_filter	plugged/unite.vim/autoload/unite.vim	/^function! unite#undef_filter(name) abort "{{{$/;"	f
unite#undef_kind	plugged/unite.vim/autoload/unite.vim	/^function! unite#undef_kind(name) abort "{{{$/;"	f
unite#undef_source	plugged/unite.vim/autoload/unite.vim	/^function! unite#undef_source(name) abort "{{{$/;"	f
unite#util#alternate_buffer	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#alternate_buffer() abort "{{{$/;"	f
unite#util#command_with_restore_cursor	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#command_with_restore_cursor(command) abort "{{{$/;"	f
unite#util#convert2list	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#convert2list(expr) abort "{{{$/;"	f
unite#util#escape_file_searching	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#escape_file_searching(buffer_name) abort$/;"	f
unite#util#escape_match	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#escape_match(str) abort "{{{$/;"	f
unite#util#escape_pattern	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#escape_pattern(...) abort$/;"	f
unite#util#escape_shell	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#escape_shell(str) abort "{{{$/;"	f
unite#util#expand	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#expand(path) abort "{{{$/;"	f
unite#util#get_last_errmsg	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#get_last_errmsg() abort$/;"	f
unite#util#get_last_status	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#get_last_status(...) abort$/;"	f
unite#util#get_name	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#get_name(list, name, default) abort "{{{$/;"	f
unite#util#get_vital	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#get_vital() abort "{{{$/;"	f
unite#util#get_vital_cache	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#get_vital_cache() abort "{{{$/;"	f
unite#util#glob	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#glob(pattern, ...) abort "{{{$/;"	f
unite#util#has_timers	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#has_timers() abort$/;"	f
unite#util#has_vimproc	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#has_vimproc(...) abort$/;"	f
unite#util#iconv	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#iconv(...) abort$/;"	f
unite#util#index_name	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#index_name(list, name) abort "{{{$/;"	f
unite#util#input	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#input(prompt, ...) abort "{{{$/;"	f
unite#util#input_directory	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#input_directory(message) abort "{{{$/;"	f
unite#util#input_yesno	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#input_yesno(message) abort "{{{$/;"	f
unite#util#is_cmdwin	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#is_cmdwin() abort "{{{$/;"	f
unite#util#is_mac	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#is_mac(...) abort$/;"	f
unite#util#is_sudo	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#is_sudo() abort "{{{$/;"	f
unite#util#is_win	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#is_win(...) abort$/;"	f
unite#util#is_windows	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#is_windows(...) abort$/;"	f
unite#util#lcd	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#lcd(dir) abort "{{{$/;"	f
unite#util#move	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#move(src, dest) abort "{{{$/;"	f
unite#util#open	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#open(path) abort "{{{$/;"	f
unite#util#path2directory	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#path2directory(...) abort$/;"	f
unite#util#path2project_directory	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#path2project_directory(...) abort$/;"	f
unite#util#print_error	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#print_error(msg) abort$/;"	f
unite#util#read_lines	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#read_lines(source, ...) abort "{{{$/;"	f
unite#util#redir	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#redir(cmd) abort "{{{$/;"	f
unite#util#set_default	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#set_default(var, val, ...) abort  "{{{$/;"	f
unite#util#set_default_dictionary_helper	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#set_default_dictionary_helper(variable, keys, value) abort "{{{$/;"	f
unite#util#set_dictionary_helper	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#set_dictionary_helper(variable, keys, value) abort "{{{$/;"	f
unite#util#smart_execute_command	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#smart_execute_command(action, word) abort$/;"	f
unite#util#smart_open_command	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#smart_open_command(action, word) abort$/;"	f
unite#util#sort_by	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#sort_by(...) abort$/;"	f
unite#util#strchars	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#strchars(...) abort$/;"	f
unite#util#strwidthpart	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#strwidthpart(...) abort$/;"	f
unite#util#strwidthpart_reverse	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#strwidthpart_reverse(...) abort$/;"	f
unite#util#substitute_path_separator	plugged/unite.vim/autoload/unite/util.vim	/^  function! unite#util#substitute_path_separator(...) abort$/;"	f
unite#util#substitute_path_separator	plugged/unite.vim/autoload/unite/util.vim	/^  function! unite#util#substitute_path_separator(path) abort$/;"	f
unite#util#system	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#system(...) abort$/;"	f
unite#util#system_passwd	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#system_passwd(...) abort$/;"	f
unite#util#truncate	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#truncate(...) abort$/;"	f
unite#util#truncate_smart	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#truncate_smart(...) abort$/;"	f
unite#util#truncate_wrap	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#truncate_wrap(str, max, footer_width, separator) abort "{{{$/;"	f
unite#util#uniq	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#uniq(...) abort$/;"	f
unite#util#uniq_by	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#uniq_by(...) abort$/;"	f
unite#util#wcswidth	plugged/unite.vim/autoload/unite/util.vim	/^function! unite#util#wcswidth(string) abort$/;"	f
unite#variables#all_sources	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#all_sources(...) abort "{{{$/;"	f
unite#variables#current_unite	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#current_unite() abort "{{{$/;"	f
unite#variables#default_context	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#default_context() abort "{{{$/;"	f
unite#variables#disable_current_unite	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#disable_current_unite() abort "{{{$/;"	f
unite#variables#dynamic	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#dynamic() abort "{{{$/;"	f
unite#variables#enable_current_unite	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#enable_current_unite() abort "{{{$/;"	f
unite#variables#filters	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#filters(...) abort "{{{$/;"	f
unite#variables#kinds	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#kinds(...) abort "{{{$/;"	f
unite#variables#loaded_defaults	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#loaded_defaults() abort "{{{$/;"	f
unite#variables#loaded_sources	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#loaded_sources(...) abort "{{{$/;"	f
unite#variables#options	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#options() abort "{{{$/;"	f
unite#variables#set_current_unite	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#set_current_unite(unite) abort "{{{$/;"	f
unite#variables#sources	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#sources(...) abort "{{{$/;"	f
unite#variables#static	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#static() abort "{{{$/;"	f
unite#variables#use_current_unite	plugged/unite.vim/autoload/unite/variables.vim	/^function! unite#variables#use_current_unite() abort "{{{$/;"	f
unite#version	plugged/unite.vim/autoload/unite.vim	/^function! unite#version() abort "{{{$/;"	f
unite#view#_add_previewed_buffer_list	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_add_previewed_buffer_list(bufnr) abort "{{{$/;"	f
unite#view#_add_source_message	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_add_source_message(message, source_name) abort "{{{$/;"	f
unite#view#_bottom_cursor	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_bottom_cursor() abort "{{{$/;"	f
unite#view#_change_highlight	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_change_highlight() abort  "{{{$/;"	f
unite#view#_clear_match	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_clear_match() abort "{{{$/;"	f
unite#view#_clear_match_highlight	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_clear_match_highlight() abort "{{{$/;"	f
unite#view#_clear_message	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_clear_message() abort "{{{$/;"	f
unite#view#_close	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_close(buffer_name) abort  "{{{$/;"	f
unite#view#_close_preview_window	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_close_preview_window() abort "{{{$/;"	f
unite#view#_convert_lines	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_convert_lines(candidates) abort "{{{$/;"	f
unite#view#_do_auto_highlight	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_do_auto_highlight() abort "{{{$/;"	f
unite#view#_do_auto_preview	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_do_auto_preview() abort "{{{$/;"	f
unite#view#_get_source_candidates_string	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_get_source_candidates_string(source) abort "{{{$/;"	f
unite#view#_get_source_name_string	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_get_source_name_string(source) abort "{{{$/;"	f
unite#view#_get_status_head_string	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_get_status_head_string() abort "{{{$/;"	f
unite#view#_get_status_plane_string	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_get_status_plane_string() abort "{{{$/;"	f
unite#view#_get_status_string	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_get_status_string(unite) abort "{{{$/;"	f
unite#view#_get_status_tail_string	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_get_status_tail_string() abort "{{{$/;"	f
unite#view#_init_cursor	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_init_cursor() abort "{{{$/;"	f
unite#view#_match_line	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_match_line(highlight, line) abort "{{{$/;"	f
unite#view#_preview_file	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_preview_file(filename) abort "{{{$/;"	f
unite#view#_print_error	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_print_error(message) abort "{{{$/;"	f
unite#view#_print_message	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_print_message(message, ...) abort "{{{$/;"	f
unite#view#_print_source_error	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_print_source_error(message, source_name) abort "{{{$/;"	f
unite#view#_print_source_message	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_print_source_message(message, source_name) abort "{{{$/;"	f
unite#view#_print_warning	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_print_warning(message) abort "{{{$/;"	f
unite#view#_quick_match_redraw	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_quick_match_redraw(quick_match_table, is_define) abort "{{{$/;"	f
unite#view#_quit	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_quit(is_force, ...) abort  "{{{$/;"	f
unite#view#_redraw	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_redraw(is_force, winnr, is_gather_all) abort "{{{$/;"	f
unite#view#_redraw_all_candidates	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_redraw_all_candidates() abort "{{{$/;"	f
unite#view#_redraw_candidates	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_redraw_candidates(...) abort "{{{$/;"	f
unite#view#_redraw_echo	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_redraw_echo(expr) abort "{{{$/;"	f
unite#view#_redraw_line	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_redraw_line(...) abort "{{{$/;"	f
unite#view#_redraw_prompt	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_redraw_prompt() abort "{{{$/;"	f
unite#view#_remove_previewed_buffer_list	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_remove_previewed_buffer_list(bufnr) abort "{{{$/;"	f
unite#view#_resize_window	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_resize_window() abort "{{{$/;"	f
unite#view#_save_position	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_save_position() abort "{{{$/;"	f
unite#view#_search_cursor	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_search_cursor(candidate) abort "{{{$/;"	f
unite#view#_set_candidates_lines	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_set_candidates_lines(lines) abort "{{{$/;"	f
unite#view#_set_cursor_line	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_set_cursor_line() abort "{{{$/;"	f
unite#view#_set_syntax	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_set_syntax() abort "{{{$/;"	f
unite#view#_switch_unite_buffer	plugged/unite.vim/autoload/unite/view.vim	/^function! unite#view#_switch_unite_buffer(buffer_name, context) abort "{{{$/;"	f
unite#vimfiler_check_filetype	plugged/unite.vim/autoload/unite.vim	/^function! unite#vimfiler_check_filetype(...) abort "{{{$/;"	f
unite#vimfiler_complete	plugged/unite.vim/autoload/unite.vim	/^function! unite#vimfiler_complete(sources, arglead, cmdline, cursorpos) abort "{{{$/;"	f
unixpath	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:unixpath(path) abort$/;"	f
unload	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:unload() abort dict$/;"	f
unset	plugged/vim-go/autoload/go/util.vim	/^function! s:unset(name) abort$/;"	f
unshift	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:unshift(list, val) abort$/;"	f
untracked_output	plugged/vim-airline/autoload/airline/async.vim	/^function! s:untracked_output(dict, buf)$/;"	f
upDirCurrentRootClosed	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed() abort$/;"	f
upDirCurrentRootOpen	plugged/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen() abort$/;"	f
update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
update_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_branch()$/;"	f
update_breakpoint	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_breakpoint(res) abort$/;"	f
update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
update_git_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_git_branch()$/;"	f
update_goroutines	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_goroutines() abort$/;"	f
update_goroutines_state_handler	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_goroutines_state_handler(check_errors, res) abort$/;"	f
update_hg_branch	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_hg_branch()$/;"	f
update_highlights_timer	plugged/coc.nvim/autoload/coc/highlight.vim	/^function! s:update_highlights_timer(bufnr, changedtick, key, priority, groups, idx) abort$/;"	f
update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
update_stacktrace	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_stacktrace() abort$/;"	f
update_tabline	plugged/vim-airline/autoload/airline/extensions/tabline.vim	/^  function! s:update_tabline(forceit)$/;"	f
update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
update_untracked	plugged/vim-airline/autoload/airline/extensions/branch.vim	/^function! s:update_untracked()$/;"	f
update_variables	plugged/vim-go/autoload/go/debug.vim	/^function! s:update_variables() abort$/;"	f
update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
update_wordcount	plugged/vim-airline/autoload/airline/extensions/wordcount.vim	/^function! s:update_wordcount(force_update)$/;"	f
upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
upsert_new_gitgutter_signs	plugged/vim-gitgutter/autoload/gitgutter/sign.vim	/^function! s:upsert_new_gitgutter_signs(bufnr, modified_lines) abort$/;"	f
url	plugged/catppuccin/.github/scripts/update-palette.py	/^url = "https:\/\/github.com\/catppuccin\/palette\/raw\/main\/palette.json"$/;"	v
urllib	plugged/catppuccin/.github/scripts/update-palette.py	/^import urllib.request$/;"	i
use_known_shell	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:use_known_shell() abort$/;"	f
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
useful_diff_colours	plugged/vim-gitgutter/autoload/gitgutter/highlight.vim	/^function! s:useful_diff_colours()$/;"	f
util	plugged/vim-go/rplugin/python3/denite/source/decls.py	/^import denite.util$/;"	i
val) return vim.startswith	plugged/catppuccin/lua/catppuccin/init.lua	/^			return vim.tbl_filter(function(val) return vim.startswith(val, line) end, vim.tbl_keys(M.flavours))$/;"	f
valid_dir	plugged/vim-airline/autoload/airline/async.vim	/^function! s:valid_dir(dir)$/;"	f
vendordirs	plugged/vim-go/autoload/go/package.vim	/^function! s:vendordirs() abort$/;"	f
version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
vim	plugged/unite.vim/autoload/unite/filters/sorter_selecta.py	/^import vim$/;"	i
vim	plugged/vim-go/ftplugin/asm.vim	/^augroup vim-go-asm-buffer$/;"	a
vim	plugged/vim-go/ftplugin/go.vim	/^augroup vim-go-buffer$/;"	a
vim	plugged/vim-go/ftplugin/gomod.vim	/^augroup vim-go-gomod-buffer$/;"	a
vim	plugged/vim-go/plugin/go.vim	/^augroup vim-go$/;"	a
vim	plugged/vim-go/syntax/go.vim	/^augroup vim-go-hi$/;"	a
vim	plugged/vim-snippets/pythonx/vimsnippets.py	/^import string, vim, re$/;"	i
vim.fn.stdpath 	plugged/catppuccin/lua/catppuccin/lib/vim/init.lua	/^vim.fn.stdpath = function(what)$/;"	f
vim.tbl_deep_extend	plugged/catppuccin/lua/catppuccin/lib/vim/init.lua	/^function vim.tbl_deep_extend(behavior, ...) return tbl_extend(behavior, true, ...) end$/;"	f
vim_snippets#Filename	plugged/vim-snippets/autoload/vim_snippets.vim	/^fun! vim_snippets#Filename(...)$/;"	f
vim_version	plugged/vim-gitgutter/autoload/gitgutter/debug.vim	/^function! s:vim_version()$/;"	f
vimdir	plugged/vim-go/autoload/go/lint_test.vim	/^func! s:vimdir()$/;"	f
visible_popup	plugged/coc.nvim/autoload/coc/window.vim	/^function! s:visible_popup(winid) abort$/;"	f
visible_ranges	plugged/coc.nvim/autoload/coc/util.vim	/^function! s:visible_ranges(winid) abort$/;"	f
vital#	plugged/unite.vim/autoload/vital/_unite.vim	/^function! vital#{s:_plugin_name}#new() abort$/;"	f
vital#	plugged/unite.vim/autoload/vital/unite.vim	/^function! vital#{s:plugin_name}#import(...) abort$/;"	f
vital#	plugged/unite.vim/autoload/vital/unite.vim	/^function! vital#{s:plugin_name}#new() abort$/;"	f
vital#_unite#Data#List#import	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^  function! vital#_unite#Data#List#import() abort$/;"	f
vital#_unite#Data#String#import	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^  function! vital#_unite#Data#String#import() abort$/;"	f
vital#_unite#Prelude#import	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^  function! vital#_unite#Prelude#import() abort$/;"	f
vital#_unite#Process#import	plugged/unite.vim/autoload/vital/_unite/Process.vim	/^  function! vital#_unite#Process#import() abort$/;"	f
vital#_unite#System#Cache#Deprecated#import	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^  function! vital#_unite#System#Cache#Deprecated#import() abort$/;"	f
vital#_unite#System#File#import	plugged/unite.vim/autoload/vital/_unite/System/File.vim	/^  function! vital#_unite#System#File#import() abort$/;"	f
vital#_unite#System#Filepath#import	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^  function! vital#_unite#System#Filepath#import() abort$/;"	f
vital#_unite#Vim#Message#import	plugged/unite.vim/autoload/vital/_unite/Vim/Message.vim	/^  function! vital#_unite#Vim#Message#import() abort$/;"	f
vital#of	plugged/unite.vim/autoload/vital.vim	/^function! vital#of(name) abort$/;"	f
vital_files	plugged/unite.vim/autoload/vital/unite.vim	/^function! s:vital_files() abort$/;"	f
void	plugged/unite.vim/autoload/unite/exrename.vim	/^function! s:void(exrename) abort$/;"	f
warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
warn	plugged/unite.vim/autoload/vital/_unite/Vim/Message.vim	/^function! s:warn(msg) abort$/;"	f
warn_stale	plugged/vim-go/autoload/go/debug.vim	/^function! s:warn_stale(filename) abort$/;"	f
warn_when_stale	plugged/vim-go/autoload/go/debug.vim	/^function! s:warn_when_stale(filename) abort$/;"	f
warning	plugged/tagbar/autoload/tagbar.vim	/^function! s:warning(msg) abort$/;"	f
wcswidth	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^  function! s:wcswidth(str) abort$/;"	f
wcswidth	plugged/unite.vim/autoload/vital/_unite/Prelude.vim	/^  function! s:wcswidth(str) abort$/;"	f
wfe.jfe	plugged/coc.nvim/build/index.js	/^`)},r.push(async()=>{let x=this.documents.getDocument(d);!x||!x.attached||x.version!==m||(await x.applyEdits([f]),c.version=x.version)})}}else qr.is(u)?await this.createFile(cC(u.uri),u.options,r):vr.is(u)?await this.deleteFile(cC(u.uri),u.options,r):Yr.is(u)&&await this.renameFile(cC(u.oldUri),cC(u.newUri),u.options,r);if(r.length===0)return!0;t||(this.editState={edit:{documentChanges:i,changeAnnotations:e.changeAnnotations},changes:a,recovers:r,applied:!0}),this.nvim.redrawVim()}catch(s){return yfe.error("Error on applyEdits:",e,s),t||this.window.showErrorMessage(`Error on applyEdits: ${s}`),await this.undoChanges(r),!1}return t||o||this.window.showInformationMessage("Use ':wa' to save changes or ':CocCommand workspace.inspectEdit' to inspect."),!0}async undoChanges(e){for(;e.length>0;){let t=e.pop();await Promise.resolve(t())}}async inspectEdit(){if(!this.editState){this.window.showWarningMessage("No workspace edit to inspect");return}await new Ep(this.nvim,this.keymaps).show(this.editState)}async undoWorkspaceEdit(){let{editState:e}=this;if(!e||!e.applied){this.window.showWarningMessage("No workspace edit to undo");return}e.applied=!1,await this.undoChanges(e.recovers)}async redoWorkspaceEdit(){let{editState:e}=this;if(!e||e.applied){this.window.showWarningMessage("No workspace edit to redo");return}this.editState=void 0,await this.applyEdit(e.edit)}validateChanges(e){let{documents:t}=this;for(let i of e)if(xi.is(i)){let{uri:r,version:o}=i.textDocument,s=t.getDocument(r);if(typeof o=="number"&&o>0){if(!s)throw A4(r);if(s.version!=o)throw new Error(`${r} changed before apply edit`)}else if(!s&&!Kg(r))throw Pv(r)}else if(qr.is(i)||vr.is(i)){if(!Kg(i.uri))throw Pv(i.uri)}else if(Yr.is(i)&&(!Kg(i.oldUri)||!Kg(i.newUri)))throw Pv(i.oldUri)}async findFiles(e,t,i,r){let o=this.workspaceFolderControl.workspaceFolders;if(r?.isCancellationRequested||!o.length||i===0)return[];i=i??1\/0;let s=o.map(h=>Y.parse(h.uri).fsPath),a;typeof e!="string"?(a=e.pattern,s=[e.baseUri.fsPath]):a=e;let l=[],u=!1,c=new AbortController;r&&r.onCancellationRequested(()=>{c.abort()});for(let h of s){let d=await Zy.glob(a,{signal:c.signal,dot:!0,cwd:h,nodir:!0,absolute:!1});if(r?.isCancellationRequested)break;for(let g of d)if(!(t&&vfe(h,g,t))&&(l.push(Y.file(E.join(h,g))),l.length===i)){u=!0;break}if(u)break}return l}async fireWaitUntilEvent(e,t,i){let r=!0,o=[];e.fire({...t,waitUntil:s=>{if(!r)throw H4("waitUntil");let a=new Promise(u=>{setTimeout(u,this.operationTimeout)}),l=Promise.race([s,a]).then(u=>{if(u&&Hl.is(u))return this.applyEdit(u,!0)});o.push(l)}}),r=!1,await Promise.all(o)}}});function Ip(){return hC>dC.length-16&&(OX.default.randomFillSync(dC),hC=0),dC.slice(hC,hC+=16)}var OX,dC,hC,vE=k(()=>{OX=co(require("crypto")),dC=new Uint8Array(256),hC=dC.length});function gC(n,e=0){return mn[n[e+0]]+mn[n[e+1]]+mn[n[e+2]]+mn[n[e+3]]+"-"+mn[n[e+4]]+mn[n[e+5]]+"-"+mn[n[e+6]]+mn[n[e+7]]+"-"+mn[n[e+8]]+mn[n[e+9]]+"-"+mn[n[e+10]]+mn[n[e+11]]+mn[n[e+12]]+mn[n[e+13]]+mn[n[e+14]]+mn[n[e+15]]}var mn,wE=k(()=>{mn=[];for(let n=0;n<256;++n)mn.push((n+256).toString(16).slice(1))});function wfe(n,e,t){let i=e&&t||0,r=e||new Array(16);n=n||{};let o=n.node||AX,s=n.clockseq!==void 0?n.clockseq:xE;if(o==null||s==null){let d=n.random||(n.rng||Ip)();o==null&&(o=AX=[d[0]|1,d[1],d[2],d[3],d[4],d[5]]),s==null&&(s=xE=(d[6]<<8|d[7])&16383)}let a=n.msecs!==void 0?n.msecs:Date.now(),l=n.nsecs!==void 0?n.nsecs:SE+1,u=a-CE+(l-SE)\/1e4;if(u<0&&n.clockseq===void 0&&(s=s+1&16383),(u<0||a>CE)&&n.nsecs===void 0&&(l=0),l>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids\/sec");CE=a,SE=l,xE=s,a+=122192928e5;let c=((a&268435455)*1e4+l)%4294967296;r[i++]=c>>>24&255,r[i++]=c>>>16&255,r[i++]=c>>>8&255,r[i++]=c&255;let h=a\/4294967296*1e4&268435455;r[i++]=h>>>8&255,r[i++]=h&255,r[i++]=h>>>24&15|16,r[i++]=h>>>16&255,r[i++]=s>>>8|128,r[i++]=s&255;for(let d=0;d<6;++d)r[i+d]=o[d];return e||gC(r)}var AX,xE,CE,SE,mu,NX=k(()=>{vE();wE();CE=0,SE=0;mu=wfe});var HX,DE,BX=k(()=>{HX=co(require("crypto")),DE={randomUUID:HX.default.randomUUID}});function xfe(n,e,t){if(DE.randomUUID&&!e&&!n)return DE.randomUUID();n=n||{};let i=n.random||(n.rng||Ip)();if(i[6]=i[6]&15|64,i[8]=i[8]&63|128,e){t=t||0;for(let r=0;r<16;++r)e[t+r]=i[r];return e}return gC(i)}var Te,WX=k(()=>{BX();vE();wE();Te=xfe});var gt=k(()=>{NX();WX()});var UX=v((NNe,YX)=>{var TE=4294967296,qX=[];for(Lh=0;Lh<256;Lh++)qX[Lh]=(Lh>15?"":"0")+Lh.toString(16);var Lh,Fp=YX.exports=function(n,e){n instanceof Buffer?(this.buffer=n,this.offset=e||0):Object.prototype.toString.call(n)=="[object Uint8Array]"?(this.buffer=new Buffer(n),this.offset=e||0):(this.buffer=this.buffer||new Buffer(8),this.offset=0,this.setValue.apply(this,arguments))};Fp.MAX_INT=Math.pow(2,53);Fp.MIN_INT=-Math.pow(2,53);Fp.prototype={constructor:Fp,_2scomp:function(){for(var n=this.buffer,e=this.offset,t=1,i=e+7;i>=e;i--){var r=(n[i]^255)+t;n[i]=r&255,t=r>>8}},setValue:function(n,e){var t=!1;if(arguments.length==1)if(typeof n=="number"){if(t=n<0,n=Math.abs(n),e=n%TE,n=n\/TE,n>TE)throw new RangeError(n+" is outside Int64 range");n=n|0}else if(typeof n=="string")n=(n+"").replace(\/^0x\/,""),e=n.substr(-8),n=n.length>8?n.substr(0,n.length-8):"",n=parseInt(n,16),e=parseInt(e,16);else throw new Error(n+" must be a Number or String");for(var i=this.buffer,r=this.offset,o=7;o>=0;o--)i[r+o]=e&255,e=o==4?n:e>>>8;t&&this._2scomp()},toNumber:function(n){for(var e=this.buffer,t=this.offset,i=e[t]&128,r=0,o=1,s=7,a=1;s>=0;s--,a*=256){var l=e[t+s];i&&(l=(l^255)+o,o=l>>8,l=l&255),r+=l*a}return!n&&r>=Fp.MAX_INT?i?-1\/0:1\/0:i?-r:r},valueOf:function(){return this.toNumber(!1)},toString:function(n){return this.valueOf().toString(n||10)},toOctetString:function(n){for(var e=new Array(8),t=this.buffer,i=this.offset,r=0;r<8;r++)e[r]=qX[t[i+r]];return e.join(n||"")},toBuffer:function(n){if(n&&this.offset===0)return this.buffer;var e=new Buffer(8);return this.buffer.copy(e,0,this.offset,this.offset+8),e},copy:function(n,e){this.buffer.copy(n,e||0,this.offset,this.offset+8)},compare:function(n){if((this.buffer[this.offset]&128)!=(n.buffer[n.offset]&128))return n.buffer[n.offset]-this.buffer[this.offset];for(var e=0;e<8;e++)if(this.buffer[this.offset+e]!==n.buffer[n.offset+e])return this.buffer[this.offset+e]-n.buffer[n.offset+e];return 0},equals:function(n){return this.compare(n)===0},inspect:function(){return"[Int64 value:"+this+" octets:"+this.toOctetString(" ")+"]"}}});var tG=v(jp=>{var JX=require("events").EventEmitter,Cfe=require("util"),Sfe=require("os"),HNe=require("assert"),Mp=UX(),Xa=Sfe.endianness()=="BE";function $X(n){return Math.pow(2,Math.ceil(Math.log(n)\/Math.LN2))}function tn(n){this.buf=Buffer.alloc($X(n||8192)),this.readOffset=0,this.writeOffset=0}jp.Accumulator=tn;tn.prototype.writeAvail=function(){return this.buf.length-this.writeOffset};tn.prototype.readAvail=function(){return this.writeOffset-this.readOffset};tn.prototype.reserve=function(n){if(!(n<this.writeAvail())&&(this.readOffset>0&&(this.buf.copy(this.buf,0,this.readOffset,this.writeOffset),this.writeOffset-=this.readOffset,this.readOffset=0),!(n<this.writeAvail()))){var e=Buffer.alloc($X(this.buf.length+n-this.writeAvail()));this.buf.copy(e),this.buf=e}};tn.prototype.append=function(n){if(Buffer.isBuffer(n))this.reserve(n.length),n.copy(this.buf,this.writeOffset,0,n.length),this.writeOffset+=n.length;else{var e=Buffer.byteLength(n);this.reserve(e),this.buf.write(n,this.writeOffset),this.writeOffset+=e}};tn.prototype.assertReadableSize=function(n){if(this.readAvail()<n)throw new Error("wanted to read "+n+" bytes but only have "+this.readAvail())};tn.prototype.peekString=function(n){return this.assertReadableSize(n),this.buf.toString("utf-8",this.readOffset,this.readOffset+n)};tn.prototype.readString=function(n){var e=this.peekString(n);return this.readOffset+=n,e};tn.prototype.peekInt=function(n){switch(this.assertReadableSize(n),n){case 1:return this.buf.readInt8(this.readOffset,n);case 2:return Xa?this.buf.readInt16BE(this.readOffset,n):this.buf.readInt16LE(this.readOffset,n);case 4:return Xa?this.buf.readInt32BE(this.readOffset,n):this.buf.readInt32LE(this.readOffset,n);case 8:var e=this.buf.slice(this.readOffset,this.readOffset+8);return Xa?new Mp(e):new Mp(VX(e));default:throw new Error("invalid integer size "+n)}};tn.prototype.readInt=function(n){var e=this.peekInt(n);return e instanceof Mp&&isFinite(e.valueOf())&&(e=e.valueOf()),this.readOffset+=n,e};tn.prototype.peekDouble=function(){return this.assertReadableSize(8),Xa?this.buf.readDoubleBE(this.readOffset):this.buf.readDoubleLE(this.readOffset)};tn.prototype.readDouble=function(){var n=this.peekDouble();return this.readOffset+=8,n};tn.prototype.readAdvance=function(n){if(n>0)this.assertReadableSize(n);else if(n<0&&this.readOffset+n<0)throw new Error("advance with negative offset "+n+" would seek off the start of the buffer");this.readOffset+=n};tn.prototype.writeByte=function(n){this.reserve(1),this.buf.writeInt8(n,this.writeOffset),++this.writeOffset};tn.prototype.writeInt=function(n,e){switch(this.reserve(e),e){case 1:this.buf.writeInt8(n,this.writeOffset);break;case 2:Xa?this.buf.writeInt16BE(n,this.writeOffset):this.buf.writeInt16LE(n,this.writeOffset);break;case 4:Xa?this.buf.writeInt32BE(n,this.writeOffset):this.buf.writeInt32LE(n,this.writeOffset);break;default:throw new Error("unsupported integer size "+e)}this.writeOffset+=e};tn.prototype.writeDouble=function(n){this.reserve(8),Xa?this.buf.writeDoubleBE(n,this.writeOffset):this.buf.writeDoubleLE(n,this.writeOffset),this.writeOffset+=8};var PE=0,_E=1,RE=2,EE=3,LE=4,bC=5,mC=6,XX=7,GX=8,zX=9,KX=10,QX=11,Dfe=12,kE=0,ZX=1,Tfe=127,kfe=32767,Pfe=2147483647;function sr(){JX.call(this),this.buf=new tn,this.state=kE}Cfe.inherits(sr,JX);jp.BunserBuf=sr;sr.prototype.append=function(n,e){if(e)return this.buf.append(n),this.process(e);try{this.buf.append(n)}catch(t){this.emit("error",t);return}this.processLater()};sr.prototype.processLater=function(){var n=this;process.nextTick(function(){try{n.process(!1)}catch(e){n.emit("error",e)}})};sr.prototype.process=function(n){if(this.state==kE){if(this.buf.readAvail()<2)return;if(this.expectCode(0),this.expectCode(1),this.pduLen=this.decodeInt(!0),this.pduLen===!1){this.buf.readAdvance(-2);return}this.buf.reserve(this.pduLen),this.state=ZX}if(this.state==ZX){if(this.buf.readAvail()<this.pduLen)return;var e=this.decodeAny();if(n)return e;this.emit("value",e),this.state=kE}!n&&this.buf.readAvail()>0&&this.processLater()};sr.prototype.raise=function(n){throw new Error(n+", in Buffer of length "+this.buf.buf.length+" ("+this.buf.readAvail()+" readable) at offset "+this.buf.readOffset+" buffer: "+JSON.stringify(this.buf.buf.slice(this.buf.readOffset,this.buf.readOffset+32).toJSON()))};sr.prototype.expectCode=function(n){var e=this.buf.readInt(1);e!=n&&this.raise("expected bser opcode "+n+" but got "+e)};sr.prototype.decodeAny=function(){var n=this.buf.peekInt(1);switch(n){case EE:case LE:case bC:case mC:return this.decodeInt();case XX:return this.buf.readAdvance(1),this.buf.readDouble();case GX:return this.buf.readAdvance(1),!0;case zX:return this.buf.readAdvance(1),!1;case KX:return this.buf.readAdvance(1),null;case RE:return this.decodeString();case PE:return this.decodeArray();case _E:return this.decodeObject();case QX:return this.decodeTemplate();default:this.raise("unhandled bser opcode "+n)}};sr.prototype.decodeArray=function(){this.expectCode(PE);for(var n=this.decodeInt(),e=[],t=0;t<n;++t)e.push(this.decodeAny());return e};sr.prototype.decodeObject=function(){this.expectCode(_E);for(var n=this.decodeInt(),e={},t=0;t<n;++t){var i=this.decodeString(),r=this.decodeAny();e[i]=r}return e};sr.prototype.decodeTemplate=function(){this.expectCode(QX);for(var n=this.decodeArray(),e=this.decodeInt(),t=[],i=0;i<e;++i){for(var r={},o=0;o<n.length;++o){if(this.buf.peekInt(1)==Dfe){this.buf.readAdvance(1);continue}var s=this.decodeAny();r[n[o]]=s}t.push(r)}return t};sr.prototype.decodeString=function(){this.expectCode(RE);var n=this.decodeInt();return this.buf.readString(n)};sr.prototype.decodeInt=function(n){if(n&&this.buf.readAvail()<1)return!1;this.buf.assertReadableSize(1);var e=this.buf.peekInt(1),t=0;switch(e){case EE:t=1;break;case LE:t=2;break;case bC:t=4;break;case mC:t=8;break;default:this.raise("invalid bser int encoding "+e)}return n&&this.buf.readAvail()<1+t?!1:(this.buf.readAdvance(1),this.buf.readInt(t))};function _fe(n){var e=new sr,t=e.append(n,!0);if(e.buf.readAvail())throw Error("excess data found after input buffer, use BunserBuf instead");if(typeof t>"u")throw Error("no bser found in string and no error raised!?");return t}jp.loadFromBuffer=_fe;function VX(n){for(var e=Buffer.alloc(n.length),t=0;t<n.length;t++)e[t]=n[n.length-1-t];return e}function eG(n,e){var t=e.toBuffer();if(Xa){n.writeByte(mC),n.append(t);return}var i=VX(t);n.writeByte(mC),n.append(i)}function pC(n,e){var t=Math.abs(e);t<=Tfe?(n.writeByte(EE),n.writeInt(e,1)):t<=kfe?(n.writeByte(LE),n.writeInt(e,2)):t<=Pfe?(n.writeByte(bC),n.writeInt(e,4)):eG(n,new Mp(e))}function fC(n,e){switch(typeof e){case"number":isFinite(e)&&Math.floor(e)===e?pC(n,e):(n.writeByte(XX),n.writeDouble(e));return;case"string":n.writeByte(RE),pC(n,Buffer.byteLength(e)),n.append(e);return;case"boolean":n.writeByte(e?GX:zX);return;case"object":if(e===null){n.writeByte(KX);return}if(e instanceof Mp){eG(n,e);return}if(Array.isArray(e)){n.writeByte(PE),pC(n,e.length);for(var t=0;t<e.length;++t)fC(n,e[t]);return}n.writeByte(_E);for(var i=Object.keys(e),r=i.length,t=0;t<i.length;++t){var o=i[t],s=e[o];typeof s>"u"&&r--}pC(n,r);for(var t=0;t<i.length;++t){var o=i[t],s=e[o];if(!(typeof s>"u")){fC(n,o);try{fC(n,s)}catch(c){throw new Error(c.message+" (while serializing object property with name `"+o+"')")}}}return;default:throw new Error("cannot serialize type "+typeof e+" to BSER")}}function Rfe(n){var e=new tn;e.writeByte(0),e.writeByte(1),e.writeByte(bC),e.writeInt(0,4),fC(e,n);var t=e.writeOffset,i=t-7;return e.writeOffset=3,e.writeInt(i,4),e.writeOffset=t,e.buf.slice(0,t)}jp.dumpToBuffer=Rfe});var lG=v((WNe,aG)=>{"use strict";var Efe=require("net"),oG=require("events").EventEmitter,Lfe=require("util"),Ife=require("child_process"),sG=tG(),iG=["subscription","log"];function Hs(n){var e=this;oG.call(this),this.watchmanBinaryPath="watchman",n&&n.watchmanBinaryPath&&(this.watchmanBinaryPath=n.watchmanBinaryPath.trim()),this.commands=[]}Lfe.inherits(Hs,oG);aG.exports.Client=Hs;Hs.prototype.sendNextCommand=function(){this.currentCommand||(this.currentCommand=this.commands.shift(),this.currentCommand&&this.socket.write(sG.dumpToBuffer(this.currentCommand.cmd)))};Hs.prototype.cancelCommands=function(n){var e=new Error(n),t=this.commands;this.commands=[],this.currentCommand&&(t.unshift(this.currentCommand),this.currentCommand=null),t.forEach(function(i){i.cb(e)})};Hs.prototype.connect=function(){var n=this;function e(l){n.bunser=new sG.BunserBuf,n.bunser.on("value",function(u){for(var c=!1,h=0;h<iG.length;h++){var d=iG[h];d in u&&(c=d)}if(c)n.emit(c,u);else if(n.currentCommand){var g=n.currentCommand;if(n.currentCommand=null,"error"in u){var f=new Error(u.error);f.watchmanResponse=u,g.cb(f)}else g.cb(null,u)}n.sendNextCommand()}),n.bunser.on("error",function(u){n.emit("error",u)}),n.socket=Efe.createConnection(l),n.socket.on("connect",function(){n.connecting=!1,n.emit("connect"),n.sendNextCommand()}),n.socket.on("error",function(u){n.connecting=!1,n.emit("error",u)}),n.socket.on("data",function(u){n.bunser&&n.bunser.append(u)}),n.socket.on("end",function(){n.socket=null,n.bunser=null,n.cancelCommands("The watchman connection was closed"),n.emit("end")})}if(process.env.WATCHMAN_SOCK){e(process.env.WATCHMAN_SOCK);return}var t=["--no-pretty","get-sockname"],i=null,r=!1;function o(l){r||(r=!0,l.code==="EACCES"||l.errno==="EACCES"?l.message="The Watchman CLI is installed but cannot be spawned because of a permission problem":(l.code==="ENOENT"||l.errno==="ENOENT")&&(l.message="Watchman was not found in PATH.  See https:\/\/facebook.github.io\/watchman\/docs\/install.html for installation instructions"),console.error("Watchman: ",l.message),n.emit("error",l))}try{i=Ife.spawn(this.watchmanBinaryPath,t,{stdio:["ignore","pipe","pipe"],windowsHide:!0})}catch(l){o(l);return}var s=[],a=[];i.stdout.on("data",function(l){s.push(l)}),i.stderr.on("data",function(l){l=l.toString("utf8"),a.push(l),console.error(l)}),i.on("error",function(l){o(l)}),i.on("close",function(l,u){if(l!==0){o(new Error(n.watchmanBinaryPath+" "+t.join(" ")+" returned with exit code="+l+", signal="+u+", stderr= "+a.join("")));return}try{var c=JSON.parse(s.join(""));if("error"in c){var h=new Error(c.error);h.watchmanResponse=c,n.emit("error",h);return}e(c.sockname)}catch(d){n.emit("error",d)}})};Hs.prototype.command=function(n,e){if(e=e||function(){},this.commands.push({cmd:n,cb:e}),!this.socket){if(!this.connecting){this.connecting=!0,this.connect();return}return}this.sendNextCommand()};var nG={"cmd-watch-del-all":"3.1.1","cmd-watch-project":"3.1",relative_root:"3.3","term-dirname":"3.1","term-idirname":"3.1",wildmatch:"3.7"};function Ffe(n,e){n=n.split("."),e=e.split(".");for(var t=0;t<3;t++){var i=parseInt(n[t]||"0")-parseInt(e[t]||"0");if(i!=0)return i}return 0}function rG(n,e){return e in nG?Ffe(n,nG[e])>=0:!1}Hs.prototype._synthesizeCapabilityCheck=function(n,e,t){n.capabilities={};var i=n.version;return e.forEach(function(r){n.capabilities[r]=rG(i,r)}),t.forEach(function(r){var o=rG(i,r);n.capabilities[r]=o,o||(n.error="client required capability `"+r+"` is not supported by this server")}),n};Hs.prototype.capabilityCheck=function(n,e){var t=n.optional||[],i=n.required||[],r=this;this.command(["version",{optional:t,required:i}],function(o,s){if(o){e(o);return}if(!("capabilities"in s)&&(s=r._synthesizeCapabilityCheck(s,t,i),s.error)){o=new Error(s.error),o.watchmanResponse=s,e(o);return}e(null,s)})};Hs.prototype.end=function(){this.cancelCommands("The client was ended"),this.socket&&(this.socket.end(),this.socket=null),this.bunser=null}});function jfe(n){return!(n=="\/"||n=="\/tmp"||n=="\/private\/tmp"||n==Bt.tmpdir()||St(n,Bt.homedir(),!0)||E.parse(n).base==n)}var IE,Mfe,bu,FE=k(()=>{"use strict";gt();Ee();pt();fe();IE=te("core-watchman"),Mfe=["relative_root","cmd-watch-project","wildmatch","field-new"],bu=class n{constructor(e,t){this.channel=t;this._disposed=!1;let i=lG();this.client=new i.Client({watchmanBinaryPath:e}),this.client.setMaxListeners(300)}checkCapability(){let{client:e}=this;return new Promise((t,i)=>{e.capabilityCheck({optional:[],required:Mfe},(r,o)=>{if(r)return t(!1);let{capabilities:s}=o;for(let a of Object.keys(s))if(!s[a])return t(!1);t(!0)})})}async watchProject(e){let t=await this.command(["watch-project",e]),{watch:i,warning:r,relative_path:o}=t;return i?(r&&IE.warn(r),this.watch=i,this.relative_path=o,IE.info(`watchman watching project: ${e}`),this.appendOutput(`watchman watching project: ${e}`),!0):!1}command(e){return new Promise((t,i)=>{this.client.command(e,(r,o)=>{if(r)return i(r);t(o)})})}async subscribe(e,t){let{watch:i,relative_path:r}=this;if(!i)throw new Error("watchman not watching");let{clock:o}=await this.command(["clock",i]),s=mu(),a={expression:["allof",["match","**\/*","wholename"]],fields:["name","size","new","exists","type","mtime_ms","ctime_ms"],since:o},l=i;if(r&&(a.relative_root=r,l=E.join(i,r)),!this.client)return;let{subscribe:u}=await this.command(["subscribe",i,s,a]);return this.appendOutput(`subscribing "${e}" in ${l}`),this.client.on("subscription",c=>{if(!c||c.subscription!=s)return;let{files:h}=c;if(!h||(h=h.filter(g=>g.type=="f"&&wi(g.name,e,{dot:!0})),!h.length))return;let d=Object.assign({},c);this.relative_path&&(d.root=E.resolve(c.root,this.relative_path)),this.appendOutput(`file change detected: ${JSON.stringify(d,null,2)}`),t(d)}),{dispose:()=>{this.unsubscribe(u)},subscribe:u}}unsubscribe(e){if(this._disposed)return Promise.resolve();let{watch:t}=this;if(t)return this.appendOutput(`unsubscribe "${e}" in: ${t}`),this.command(["unsubscribe",t,e]).catch(i=>{i.message?.includes("The client was ended")&&IE.error(i)})}dispose(){this._disposed||(this._disposed=!0,this.client&&(this.client.end(),this.client=void 0))}appendOutput(e,t="Info"){this.channel&&this.channel.appendLine(`[${t}  - ${new Date().toLocaleTimeString()}] ${e}`)}static async createClient(e,t,i){if(!jfe(t))throw new Error(`Watch for ${t} is ignored`);let r;try{if(r=new n(e,i),!await r.checkCapability())throw new Error("required capabilities do not exist.");if(!await r.watchProject(t))throw new Error("unable to watch");return r}catch(o){throw r&&r.dispose(),o}}}});var Ofe,Op,ME,uG=k(()=>{"use strict";$e();Ee();se();Le();pt();fe();ie();FE();Ofe=te("fileSystemWatcher"),Op=class n{constructor(e,t){this.workspaceFolder=e;this.watchmanPath=t;this.clientsMap=new Map;this.disposables=[];this.creating=new Set;this._onDidCreateClient=new p.Emitter;this.disabled=!1;this.onDidCreateClient=this._onDidCreateClient.event}static{this.watchers=new Set}attach(e){this.channel=e;let t=i=>{let r=Y.parse(i.uri).fsPath;this.createClient(r)};this.workspaceFolder.workspaceFolders.forEach(i=>{t(i)}),this.workspaceFolder.onDidChangeWorkspaceFolders(i=>{i.added.forEach(r=>{t(r)}),i.removed.forEach(r=>{let o=Y.parse(r.uri).fsPath,s=this.clientsMap.get(o);s&&(this.clientsMap.delete(o),s.dispose())})},null,this.disposables)}waitClient(e){return this.clientsMap.has(e)?Promise.resolve():new Promise(t=>{let i=this.onDidCreateClient(r=>{r==e&&(i.dispose(),t())})})}async createClient(e){if(!(this.watchmanPath==null||this.has(e)||this.disabled))try{let t=await this.getWatchmanPath();this.creating.add(e);let i=await bu.createClient(t,e,this.channel);this.creating.delete(e),this.clientsMap.set(e,i);for(let r of n.watchers)r.listen(e,i);this._onDidCreateClient.fire(e)}catch(t){this.creating.delete(e),this.channel&&this.channel.appendLine(`Error on create watchman client: ${t}`)}}async getWatchmanPath(){let e=this.watchmanPath;return process.env.WATCHMAN_SOCK||(e=await Wo(this.watchmanPath,{all:!1})),e}has(e){let t=Array.from(this.clientsMap.keys());return t.push(...this.creating),t.some(i=>Di(i,e))}createFileSystemWatcher(e,t,i,r){let o=new ME(e,t,i,r),s=typeof e=="string"?void 0:e.baseUri.fsPath;for(let[a,l]of this.clientsMap.entries())s&&St(a,s,!0)&&(s=void 0),o.listen(a,l);return s&&this.createClient(s),n.watchers.add(o),o}dispose(){this._onDidCreateClient.dispose();for(let e of this.clientsMap.values())e&&e.dispose();this.clientsMap.clear(),n.watchers.clear(),z(this.disposables)}},ME=class{constructor(e,t,i,r){this.globPattern=e;this.ignoreCreateEvents=t;this.ignoreChangeEvents=i;this.ignoreDeleteEvents=r;this._onDidCreate=new p.Emitter;this._onDidChange=new p.Emitter;this._onDidDelete=new p.Emitter;this._onDidRename=new p.Emitter;this.disposables=[];this._disposed=!1;this.onDidCreate=this._onDidCreate.event;this.onDidChange=this._onDidChange.event;this.onDidDelete=this._onDidDelete.event;this.onDidRename=this._onDidRename.event;this._onDidListen=new p.Emitter;this.onDidListen=this._onDidListen.event}listen(e,t){let{globPattern:i,ignoreCreateEvents:r,ignoreChangeEvents:o,ignoreDeleteEvents:s}=this,a,l;if(typeof i=="string")a=i;else if(a=i.pattern,l=i.baseUri.fsPath,!St(e,l,!0))return;let u=c=>{let{root:h,files:d}=c;l&&!Di(h,l)?d=d.filter(g=>{if(g.type!="f")return!1;let f=E.join(h,g.name);return St(l,f)?wi(E.relative(l,f),a,{dot:!0}):!1}):d=d.filter(g=>g.type=="f"&&wi(g.name,a,{dot:!0}));for(let g of d){let f=Y.file(E.join(h,g.name));g.exists?g.new===!0?r||this._onDidCreate.fire(f):o||this._onDidChange.fire(f):s||this._onDidDelete.fire(f)}if(d.length==2&&d[0].exists!==d[1].exists){let g=d.find(m=>m.exists!==!0),f=d.find(m=>m.exists===!0);g.size==f.size&&this._onDidRename.fire({oldUri:Y.file(E.join(h,g.name)),newUri:Y.file(E.join(h,f.name))})}if(d.length>2&&d.length%2==0){let[g,f]=Gw(d,m=>m.exists===!1);if(g.length==f.length)for(let m of g){let b=f.find(w=>w.size==m.size&&w.mtime_ms==m.mtime_ms);b&&this._onDidRename.fire({oldUri:Y.file(E.join(h,m.name)),newUri:Y.file(E.join(h,b.name))})}}};t.subscribe(a,u).then(c=>{if(c){if(this._onDidListen.fire(),this.subscribe=c.subscribe,this._disposed)return c.dispose();this.disposables.push(c)}},c=>{c instanceof Error&&c.message.includes("client was ended")||Ofe.error(`Error on subscribe ${a}`,c)})}dispose(){this._disposed=!0,Op.watchers.delete(this),this._onDidRename.dispose(),this._onDidCreate.dispose(),this._onDidChange.dispose(),z(this.disposables)}}});function cG(n){return n=="n"||n=="o"||n=="x"||n=="v"?"<C-U>":n=="i"?"<C-o>":n=="s"?"<Esc>":""}function Nfe(n){return typeof n=="number"?n:F.bufnr}var Afe,Ap,hG=k(()=>{"use strict";je();Ee();ie();Ce();Afe=te("core-keymaps");Ap=class{constructor(){this.keymaps=new Map}attach(e){this.nvim=e}async doKeymap(e,t){let i=this.keymaps.get(e)??this.keymaps.get("coc-"+e);if(!i)return Afe.error(`keymap for ${e} not found`),t;let[r,o]=i,s=await Promise.resolve(r());return o&&await this.nvim.command(`silent! call repeat#set("\\\\<Plug>(coc-${e})", -1)`),s??t}registerKeymap(e,t,i,r={}){if(!t)throw new Error(`Invalid key ${t} of registerKeymap`);let o=`coc-${t}`;if(this.keymaps.has(o))throw new Error(`${t} already exists.`);let s=`<Plug>(${o})`;r=Object.assign({sync:!0,cancel:!0,silent:!0,repeat:!1},r);let{nvim:a}=this;this.keymaps.set(o,[i,!!r.repeat]);let l=r.sync?"request":"notify",u=r.cancel?1:0;for(let c of e)c=="i"?a.setKeymap(c,s,`coc#_insert_key('${l}', '${o}', ${u})`,{expr:!0,noremap:!0,silent:r.silent}):a.setKeymap(c,s,`:${cG(c)}call coc#rpc#${l}('doKeymap', ['${o}'])<cr>`,{noremap:!0,silent:r.silent});return p.Disposable.create(()=>{this.keymaps.delete(o);for(let c of e)a.deleteKeymap(c,s)})}registerExprKeymap(e,t,i,r=!1,o=!0){let s=Nfe(r),a=`${e}-${b_(t)}${r?`-${s}`:""}`,{nvim:l}=this,u;e=="i"?u=`coc#_insert_key('request', '${a}', ${o?"1":"0"})`:u=`coc#rpc#request('doKeymap', ['${a}'])`;let c={noremap:!0,silent:!0,expr:!0,nowait:!0};return r?l.createBuffer(s).setKeymap(e,t,u,c):l.setKeymap(e,t,u,c),this.keymaps.set(a,[i,!1]),p.Disposable.create(()=>{this.keymaps.delete(a),r?l.createBuffer(s).deleteKeymap(e,t):l.deleteKeymap(e,t)})}registerLocalKeymap(e,t,i,r,o){let{nvim:s}=this,a=s.createBuffer(e),l=`local-${e}-${t}-${b_(i)}`;this.keymaps.set(l,[r,!1]);let u=o?"notify":"request",c=cG(t);return a.setKeymap(t,i,`:${c}call coc#rpc#${u}('doKeymap', ['${l}'])<CR>`,{silent:!0,nowait:!0,noremap:!0}),p.Disposable.create(()=>{this.keymaps.delete(l),a.deleteKeymap(t,i)})}}});var dG,Np,gG=k(()=>{"use strict";je();Ee();se();ie();Ce();dG=te("watchers"),Np=class{constructor(){this.optionCallbacks=new Map;this.globalCallbacks=new Map;this.disposables=[];this._onDidRuntimePathChange=new p.Emitter;this.onDidRuntimePathChange=this._onDidRuntimePathChange.event;F.on("OptionSet",async(e,t,i)=>{let r=Array.from(this.optionCallbacks.get(e)??[]);await Promise.allSettled(r.map(o=>(async()=>{try{await Promise.resolve(o(t,i))}catch(s){this.nvim.errWriteLine(`Error on OptionSet '${e}': ${Jr(s)}`),dG.error("Error on OptionSet callback:",s)}})()))},null,this.disposables),F.on("GlobalChange",async(e,t,i)=>{let r=Array.from(this.globalCallbacks.get(e)??[]);await Promise.allSettled(r.map(o=>(async()=>{try{await Promise.resolve(o(t,i))}catch(s){this.nvim.errWriteLine(`Error on GlobalChange '${e}': ${Jr(s)}`),dG.error("Error on GlobalChange callback:",s)}})()))},null,this.disposables)}get options(){return Array.from(this.optionCallbacks.keys())}attach(e,t){this.nvim=e,this.env=t,this.watchOption("runtimepath",(i,r)=>{let o=i.split(","),a=r.split(",").filter(l=>!o.includes(l));a.length>0&&this._onDidRuntimePathChange.fire(a),this.env.runtimepath=r},this.disposables)}watchOption(e,t,i){let r=this.optionCallbacks.get(e);r||(r=new Set,this.optionCallbacks.set(e,r)),r.add(t);let o=`autocmd! coc_dynamic_option OptionSet ${e} call coc#rpc#notify('OptionSet',[expand('<amatch>'), v:option_old, v:option_new])`;this.nvim.command(o,!0);let s=p.Disposable.create(()=>{let a=this.optionCallbacks.get(e);a.delete(t),a.size===0&&this.nvim.command(`autocmd! coc_dynamic_option OptionSet ${e}`,!0)});return i&&i.push(s),s}watchGlobal(e,t,i){let{nvim:r}=this,o=this.globalCallbacks.get(e);o||(o=new Set,this.globalCallbacks.set(e,o)),o.add(t),r.call("coc#_watch",e,!0);let s=p.Disposable.create(()=>{let a=this.globalCallbacks.get(e);a.delete(t),a.size===0&&r.call("coc#_unwatch",e,!0)});return i&&i.push(s),s}dispose(){z(this.disposables),this._onDidRuntimePathChange.dispose()}}});function Hp(n){if(!(!n||!E.isAbsolute(n)))return{name:E.basename(n),uri:Y.file(n).toString()}}var yC,Hfe,Bfe,Wfe,qfe,Bp,vC=k(()=>{"use strict";$e();je();Ee();se();Le();qi();Is();pt();fe();Ye();ie();Xo();yC=(i=>(i[i.Buffer=0]="Buffer",i[i.LanguageServer=1]="LanguageServer",i[i.Global=2]="Global",i))(yC||{}),Hfe=te("core-workspaceFolder"),Bfe=[0,1,2],Wfe=ve(5e3,50);qfe=Pi.as(Ls.ExtensionContribution),Bp=class{constructor(e){this.configurations=e;this._onDidChangeWorkspaceFolders=new p.Emitter;this.onDidChangeWorkspaceFolders=this._onDidChangeWorkspaceFolders.event;this.rootPatterns=new Map;this._workspaceFolders=[];this._tokenSources=new Set;F.on("VimLeavePre",this.cancelAll,this),this.updateConfiguration(!0),this.configurations.onDidChange(t=>{(t.affectsConfiguration("workspace")||t.affectsConfiguration("coc.preferences"))&&this.updateConfiguration(!1)})}updateConfiguration(e){let t=this.configurations.initialConfiguration,i=t.get("workspace"),r=t.get("coc.preferences.rootPatterns");if(this.config={rootPatterns:le(r)?pe(i.rootPatterns):r,ignoredFiletypes:pe(i.ignoredFiletypes),bottomUpFiletypes:pe(i.bottomUpFiletypes),ignoredFolders:pe(i.ignoredFolders),workspaceFolderCheckCwd:!!i.workspaceFolderCheckCwd,workspaceFolderFallbackCwd:!!i.workspaceFolderFallbackCwd},e){let o=t.get("languageserver",{});this.addServerRootPatterns(o)}}addServerRootPatterns(e){for(let t of Object.keys(Ke(e))){let i=e[t],{filetypes:r,rootPatterns:o}=i;Array.isArray(r)&&!le(o)&&r.filter(s=>typeof s=="string").forEach(s=>{this.addRootPattern(s,o)})}}cancelAll(){for(let e of this._tokenSources)e.cancel()}setWorkspaceFolders(e){if(!e||!Array.isArray(e))return;let t=e.map(i=>Hp(i));this._workspaceFolders=t.filter(i=>i!=null)}getWorkspaceFolder(e){if(e.scheme!=="file")return;let t=Array.from(this._workspaceFolders).map(o=>Y.parse(o.uri).fsPath);t.sort((o,s)=>s.length-o.length);let i=e.fsPath,r=t.find(o=>St(o,i,!0));return Hp(r)}getRelativePath(e,t){let i,r="";if(typeof e=="string"?(i=Y.file(e),r=e):typeof e<"u"&&(i=e,r=e.fsPath),!i)return r;let o=this.getWorkspaceFolder(i);if(!o)return r;typeof t>"u"&&this._workspaceFolders&&(t=this._workspaceFolders.length>1);let s=E.relative(Y.parse(o.uri).fsPath,i.fsPath);return s=s==""?i.fsPath:s,t&&o.name&&(s=`${o.name}\/${s}`),s}get workspaceFolders(){return this._workspaceFolders}addRootPattern(e,t){let i=this.rootPatterns.get(e)??[];for(let r of t)i.includes(r)||i.push(r);this.rootPatterns.set(e,i)}resolveRoot(e,t,i,r){if(e.buftype!==""||e.schema!=="file")return null;let o=Y.parse(e.uri),s=La(o.fsPath)?E.normalize(o.fsPath):E.dirname(o.fsPath),{ignoredFiletypes:a,ignoredFolders:l,workspaceFolderCheckCwd:u,workspaceFolderFallbackCwd:c,bottomUpFiletypes:h}=this.config;if(a?.includes(e.filetype))return null;l=Array.isArray(l)?l.filter(g=>g&&g.length>0).map(g=>r(g)):[];let d=null;for(let g of Bfe){let f=this.getRootPatterns(e,g);if(f&&f.length){let m=h.includes("*")||h.includes(e.filetype),b=Xg(s,f,t,m,u,l);if(b){d=b;break}}}return!d&&c&&!$g(t,l)&&St(t,s,!0)&&(d=t),d&&this.addWorkspaceFolder(d,i),d}addWorkspaceFolder(e,t){let i=Hp(e);if(i)return this._workspaceFolders.findIndex(r=>r.uri==i.uri)==-1&&(this._workspaceFolders.push(i),t&&this._onDidChangeWorkspaceFolders.fire({added:[i],removed:[]})),i}renameWorkspaceFolder(e,t){let i=Hp(t);if(!i)return;let r=this._workspaceFolders.findIndex(s=>Y.parse(s.uri).fsPath==e);if(r==-1)return;let o=this.workspaceFolders[r];this._workspaceFolders.splice(r,1,i),this._onDidChangeWorkspaceFolders.fire({removed:[o],added:[i]})}removeWorkspaceFolder(e){let t=Hp(e);if(!t)return;let i=this._workspaceFolders.findIndex(r=>r.uri==t.uri);i!=-1&&(this._workspaceFolders.splice(i,1),this._onDidChangeWorkspaceFolders.fire({removed:[t],added:[]}))}getRootPatterns(e,t){return t==0?e.getVar("root_patterns",[])||[]:t==1?this.getServerRootPatterns(e.languageId):this.config.rootPatterns}reset(){this.rootPatterns.clear(),this._workspaceFolders=[]}getServerRootPatterns(e){let t=qfe.getRootPatternsByFiletype(e);return t=t.concat(pe(this.rootPatterns.get(e))),Oi(t)}checkFolder(e,t,i){return rJ(e,t,i)}async checkPatterns(e,t){if(le(e))return!1;let i=e.map(u=>Y.parse(u.uri).fsPath),r=!1,o=new p.CancellationTokenSource;this._tokenSources.add(o);let s=o.token,a=setTimeout(()=>{o.cancel()},Wfe),l=await Promise.allSettled(i.map(u=>this.checkFolder(u,t,s).then(c=>{this._tokenSources.delete(o),c&&(r=!0,clearTimeout(a),o.cancel())})));return clearTimeout(a),l.forEach(u=>{u.status==="rejected"&&!Lc(u.reason)&&Hfe.error("checkPatterns error:",t,u.reason)}),r}}});var Wp,pG=k(()=>{"use strict";je();se();Wp=class{constructor(e,t){this._create=e;this.disposables=[];this.itemsMap=new Map;let{disposables:i}=this;for(let r of t.attached())this.create(r);t.onDidOpenTextDocument(r=>{this.create(t.getDocument(r.bufnr))},null,i),t.onDidChangeDocument(r=>{this.onChange(r)},null,i),t.onDidCloseDocument(r=>{this.delete(r.bufnr)},null,i),F.on("LinesChanged",this.onTextChange,this,i)}onTextChange(e){let t=this.itemsMap.get(e);t&&typeof t.item.onTextChange=="function"&&t.item.onTextChange()}get items(){return Array.from(this.itemsMap.values()).map(e=>e.item)}getItem(e){if(typeof e=="number")return this.itemsMap.get(e)?.item;let t=Array.from(this.itemsMap.values()).find(i=>i.uri==e);return t?t.item:void 0}create(e){let t=this.itemsMap.get(e.bufnr);t&&t.item.dispose();let i=this._create(e);i&&this.itemsMap.set(e.bufnr,{uri:e.uri,item:i})}onChange(e){let t=this.itemsMap.get(e.bufnr);t&&typeof t.item.onChange=="function"&&t.item.onChange(e)}delete(e){let t=this.itemsMap.get(e);t&&(t.item.dispose(),this.itemsMap.delete(e))}reset(){for(let e of this.itemsMap.values())e.item.dispose();this.itemsMap.clear()}dispose(){z(this.disposables);for(let e of this.itemsMap.values())e.item.dispose();this._create=void 0,this.itemsMap.clear()}}});var qp,fG=k(()=>{"use strict";fe();Ye();qp=class{constructor(e){this.filepath=e}fetch(e){let t=this.load();if(!e)return t;let i=e.split(".");for(let r of i){if(typeof t[r]>"u")return;t=t[r]}return t}exists(e){let t=this.load(),i=e.split(".");for(let r of i){if(typeof t[r]>"u")return!1;t=t[r]}return!0}delete(e){let t=this.load(),i=t,r=e.split("."),o=r.length;for(let s=0;s<o&&!(typeof t[r[s]]>"u");s++){if(s==o-1){delete t[r[s]],B.writeFileSync(this.filepath,JSON.stringify(i,null,2),"utf8");break}t=t[r[s]]}}push(e,t){let i=Ke(this.load()),r=i,o=e.split("."),s=o.length;for(let a=0;a<s;a++){let l=o[a];if(a==s-1){r[l]=t;let u=E.dirname(this.filepath);B.mkdirSync(u,{recursive:!0}),B.writeFileSync(this.filepath,JSON.stringify(i,null,2));break}typeof r[l]>"u"&&(r[l]={}),r=r[l]}}load(){let e=E.dirname(this.filepath);if(!B.existsSync(e))return B.mkdirSync(e,{recursive:!0}),B.writeFileSync(this.filepath,"{}","utf8"),{};try{let i=B.readFileSync(this.filepath,"utf8");return JSON.parse(i.trim())}catch{return B.writeFileSync(this.filepath,"{}","utf8"),{}}}clear(){B.existsSync(this.filepath)&&B.writeFileSync(this.filepath,"{}","utf8")}destroy(){B.existsSync(this.filepath)&&B.unlinkSync(this.filepath)}}});var jE,Yp,OE=k(()=>{"use strict";gt();jE=["\\u280B","\\u2819","\\u2839","\\u2838","\\u283C","\\u2834","\\u2826","\\u2827","\\u2807","\\u280F"],Yp=class{constructor(){this.items=new Map;this.shownIds=new Set;this._text="";this.interval=setInterval(()=>{this.setStatusText()},100).unref()}dispose(){this.items.clear(),this.shownIds.clear(),clearInterval(this.interval)}reset(){this.items.clear(),this.shownIds.clear()}createStatusBarItem(e,t=!1){let i=mu(),r={text:"",priority:e,isProgress:t,show:()=>{this.shownIds.add(i),this.setStatusText()},hide:()=>{this.shownIds.delete(i),this.setStatusText()},dispose:()=>{this.shownIds.delete(i),this.items.delete(i),this.setStatusText()}};return this.items.set(i,r),r}getText(){if(this.shownIds.size==0)return"";let t=Math.floor(new Date().getMilliseconds()\/100),i="",r=[];for(let[o,s]of this.items)this.shownIds.has(o)&&r.push(s);r.sort((o,s)=>o.priority-s.priority);for(let o of r)o.isProgress?i=`${i} ${jE[t]} ${o.text}`:i=`${i} ${o.text}`;return i}setStatusText(){let e=this.getText(),{nvim:t}=this;e!=this._text&&t&&(this._text=e,t.pauseNotification(),this.nvim.setVar("coc_status",e,!0),this.nvim.call("coc#util#do_autocmd",["CocStatusChange"],!0),t.resumeNotification(!1,!0))}}});var Up,mG=k(()=>{"use strict";je();se();ie();Up=class{constructor(e,t){this.nvim=e;this.id=t;this.disposables=[];this._onExit=new p.Emitter;this._onStderr=new p.Emitter;this._onStdout=new p.Emitter;this.onExit=this._onExit.event;this.onStdout=this._onStdout.event;this.onStderr=this._onStderr.event;F.on("TaskExit",(i,r)=>{i==this.id&&this._onExit.fire(r)},null,this.disposables),F.on("TaskStderr",(i,r)=>{i==this.id&&this._onStderr.fire(r)},null,this.disposables),F.on("TaskStdout",(i,r)=>{i==this.id&&this._onStdout.fire(r)},null,this.disposables)}async start(e){let{nvim:t}=this;return await t.call("coc#task#start",[this.id,e])}async stop(){let{nvim:e}=this;await e.call("coc#task#stop",[this.id])}get running(){let{nvim:e}=this;return e.call("coc#task#running",[this.id])}dispose(){let{nvim:e}=this;e.call("coc#task#stop",[this.id],!0),this._onStdout.dispose(),this._onStderr.dispose(),this._onExit.dispose(),z(this.disposables)}}});var AE,Yfe,NE,y,be=k(()=>{"use strict";$e();Q5();V5();iX();U_();rX();IX();FX();jX();uG();jR();hG();uu();gG();vC();je();Ee();pG();fG();np();Qg();OE();X_();mG();oi();Is();fe();Ye();ru();AE=te("workspace"),Yfe=["showMessage","runTerminalCommand","openTerminal","showQuickpick","menuPick","openLocalConfig","showPrompt","createStatusBarItem","createOutputChannel","showOutputChannel","requestInput","echoLines","getCursorPosition","moveTo","getOffset","getSelectedRange","selectRange","createTerminal"],NE=class{constructor(){this.statusLine=new Yp;yJ().then(o=>{this.fuzzyExports=o}),dh.create().then(o=>{this.strWdith=o}),F.on("VimResized",(o,s)=>{Object.assign(Ke(this.env),{columns:o,lines:s})}),Object.defineProperty(this.statusLine,"nvim",{get:()=>this.nvim});let e=this.configurations=new Sp(BZ,new Dp(this));this.workspaceFolderControl=new Bp(this.configurations);let t=this.documentsManager=new _p(this.configurations,this.workspaceFolderControl);this.contentProvider=new kp(t),this.watchers=new Np,this.autocmds=new Tp,this.keymaps=new Ap,this.files=new Lp(t,this.configurations,this.workspaceFolderControl,this.keymaps),this.editors=new Rp(t),this.onDidRuntimePathChange=this.watchers.onDidRuntimePathChange,this.onDidChangeWorkspaceFolders=this.workspaceFolderControl.onDidChangeWorkspaceFolders,this.onDidChangeConfiguration=this.configurations.onDidChange,this.onDidOpenTextDocument=t.onDidOpenTextDocument,this.onDidChangeTextDocument=t.onDidChangeDocument,this.onDidCloseTextDocument=t.onDidCloseDocument,this.onDidSaveTextDocument=t.onDidSaveTextDocument,this.onWillSaveTextDocument=t.onWillSaveTextDocument,this.onDidCreateFiles=this.files.onDidCreateFiles,this.onDidRenameFiles=this.files.onDidRenameFiles,this.onDidDeleteFiles=this.files.onDidDeleteFiles,this.onWillCreateFiles=this.files.onWillCreateFiles,this.onWillRenameFiles=this.files.onWillRenameFiles,this.onWillDeleteFiles=this.files.onWillDeleteFiles;let r=e.initialConfiguration.get("coc.preferences").watchmanPath??WZ;this.fileSystemWatchers=new Op(this.workspaceFolderControl,r)}get initialConfiguration(){return this.configurations.initialConfiguration}async init(e){let{nvim:t}=this;for(let o of Yfe)Object.defineProperty(this,o,{get:()=>(...s)=>{let a=`$/;"	f
wfe.xfe	plugged/coc.nvim/build/index.js	/^`)},r.push(async()=>{let x=this.documents.getDocument(d);!x||!x.attached||x.version!==m||(await x.applyEdits([f]),c.version=x.version)})}}else qr.is(u)?await this.createFile(cC(u.uri),u.options,r):vr.is(u)?await this.deleteFile(cC(u.uri),u.options,r):Yr.is(u)&&await this.renameFile(cC(u.oldUri),cC(u.newUri),u.options,r);if(r.length===0)return!0;t||(this.editState={edit:{documentChanges:i,changeAnnotations:e.changeAnnotations},changes:a,recovers:r,applied:!0}),this.nvim.redrawVim()}catch(s){return yfe.error("Error on applyEdits:",e,s),t||this.window.showErrorMessage(`Error on applyEdits: ${s}`),await this.undoChanges(r),!1}return t||o||this.window.showInformationMessage("Use ':wa' to save changes or ':CocCommand workspace.inspectEdit' to inspect."),!0}async undoChanges(e){for(;e.length>0;){let t=e.pop();await Promise.resolve(t())}}async inspectEdit(){if(!this.editState){this.window.showWarningMessage("No workspace edit to inspect");return}await new Ep(this.nvim,this.keymaps).show(this.editState)}async undoWorkspaceEdit(){let{editState:e}=this;if(!e||!e.applied){this.window.showWarningMessage("No workspace edit to undo");return}e.applied=!1,await this.undoChanges(e.recovers)}async redoWorkspaceEdit(){let{editState:e}=this;if(!e||e.applied){this.window.showWarningMessage("No workspace edit to redo");return}this.editState=void 0,await this.applyEdit(e.edit)}validateChanges(e){let{documents:t}=this;for(let i of e)if(xi.is(i)){let{uri:r,version:o}=i.textDocument,s=t.getDocument(r);if(typeof o=="number"&&o>0){if(!s)throw A4(r);if(s.version!=o)throw new Error(`${r} changed before apply edit`)}else if(!s&&!Kg(r))throw Pv(r)}else if(qr.is(i)||vr.is(i)){if(!Kg(i.uri))throw Pv(i.uri)}else if(Yr.is(i)&&(!Kg(i.oldUri)||!Kg(i.newUri)))throw Pv(i.oldUri)}async findFiles(e,t,i,r){let o=this.workspaceFolderControl.workspaceFolders;if(r?.isCancellationRequested||!o.length||i===0)return[];i=i??1\/0;let s=o.map(h=>Y.parse(h.uri).fsPath),a;typeof e!="string"?(a=e.pattern,s=[e.baseUri.fsPath]):a=e;let l=[],u=!1,c=new AbortController;r&&r.onCancellationRequested(()=>{c.abort()});for(let h of s){let d=await Zy.glob(a,{signal:c.signal,dot:!0,cwd:h,nodir:!0,absolute:!1});if(r?.isCancellationRequested)break;for(let g of d)if(!(t&&vfe(h,g,t))&&(l.push(Y.file(E.join(h,g))),l.length===i)){u=!0;break}if(u)break}return l}async fireWaitUntilEvent(e,t,i){let r=!0,o=[];e.fire({...t,waitUntil:s=>{if(!r)throw H4("waitUntil");let a=new Promise(u=>{setTimeout(u,this.operationTimeout)}),l=Promise.race([s,a]).then(u=>{if(u&&Hl.is(u))return this.applyEdit(u,!0)});o.push(l)}}),r=!1,await Promise.all(o)}}});function Ip(){return hC>dC.length-16&&(OX.default.randomFillSync(dC),hC=0),dC.slice(hC,hC+=16)}var OX,dC,hC,vE=k(()=>{OX=co(require("crypto")),dC=new Uint8Array(256),hC=dC.length});function gC(n,e=0){return mn[n[e+0]]+mn[n[e+1]]+mn[n[e+2]]+mn[n[e+3]]+"-"+mn[n[e+4]]+mn[n[e+5]]+"-"+mn[n[e+6]]+mn[n[e+7]]+"-"+mn[n[e+8]]+mn[n[e+9]]+"-"+mn[n[e+10]]+mn[n[e+11]]+mn[n[e+12]]+mn[n[e+13]]+mn[n[e+14]]+mn[n[e+15]]}var mn,wE=k(()=>{mn=[];for(let n=0;n<256;++n)mn.push((n+256).toString(16).slice(1))});function wfe(n,e,t){let i=e&&t||0,r=e||new Array(16);n=n||{};let o=n.node||AX,s=n.clockseq!==void 0?n.clockseq:xE;if(o==null||s==null){let d=n.random||(n.rng||Ip)();o==null&&(o=AX=[d[0]|1,d[1],d[2],d[3],d[4],d[5]]),s==null&&(s=xE=(d[6]<<8|d[7])&16383)}let a=n.msecs!==void 0?n.msecs:Date.now(),l=n.nsecs!==void 0?n.nsecs:SE+1,u=a-CE+(l-SE)\/1e4;if(u<0&&n.clockseq===void 0&&(s=s+1&16383),(u<0||a>CE)&&n.nsecs===void 0&&(l=0),l>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids\/sec");CE=a,SE=l,xE=s,a+=122192928e5;let c=((a&268435455)*1e4+l)%4294967296;r[i++]=c>>>24&255,r[i++]=c>>>16&255,r[i++]=c>>>8&255,r[i++]=c&255;let h=a\/4294967296*1e4&268435455;r[i++]=h>>>8&255,r[i++]=h&255,r[i++]=h>>>24&15|16,r[i++]=h>>>16&255,r[i++]=s>>>8|128,r[i++]=s&255;for(let d=0;d<6;++d)r[i+d]=o[d];return e||gC(r)}var AX,xE,CE,SE,mu,NX=k(()=>{vE();wE();CE=0,SE=0;mu=wfe});var HX,DE,BX=k(()=>{HX=co(require("crypto")),DE={randomUUID:HX.default.randomUUID}});function xfe(n,e,t){if(DE.randomUUID&&!e&&!n)return DE.randomUUID();n=n||{};let i=n.random||(n.rng||Ip)();if(i[6]=i[6]&15|64,i[8]=i[8]&63|128,e){t=t||0;for(let r=0;r<16;++r)e[t+r]=i[r];return e}return gC(i)}var Te,WX=k(()=>{BX();vE();wE();Te=xfe});var gt=k(()=>{NX();WX()});var UX=v((NNe,YX)=>{var TE=4294967296,qX=[];for(Lh=0;Lh<256;Lh++)qX[Lh]=(Lh>15?"":"0")+Lh.toString(16);var Lh,Fp=YX.exports=function(n,e){n instanceof Buffer?(this.buffer=n,this.offset=e||0):Object.prototype.toString.call(n)=="[object Uint8Array]"?(this.buffer=new Buffer(n),this.offset=e||0):(this.buffer=this.buffer||new Buffer(8),this.offset=0,this.setValue.apply(this,arguments))};Fp.MAX_INT=Math.pow(2,53);Fp.MIN_INT=-Math.pow(2,53);Fp.prototype={constructor:Fp,_2scomp:function(){for(var n=this.buffer,e=this.offset,t=1,i=e+7;i>=e;i--){var r=(n[i]^255)+t;n[i]=r&255,t=r>>8}},setValue:function(n,e){var t=!1;if(arguments.length==1)if(typeof n=="number"){if(t=n<0,n=Math.abs(n),e=n%TE,n=n\/TE,n>TE)throw new RangeError(n+" is outside Int64 range");n=n|0}else if(typeof n=="string")n=(n+"").replace(\/^0x\/,""),e=n.substr(-8),n=n.length>8?n.substr(0,n.length-8):"",n=parseInt(n,16),e=parseInt(e,16);else throw new Error(n+" must be a Number or String");for(var i=this.buffer,r=this.offset,o=7;o>=0;o--)i[r+o]=e&255,e=o==4?n:e>>>8;t&&this._2scomp()},toNumber:function(n){for(var e=this.buffer,t=this.offset,i=e[t]&128,r=0,o=1,s=7,a=1;s>=0;s--,a*=256){var l=e[t+s];i&&(l=(l^255)+o,o=l>>8,l=l&255),r+=l*a}return!n&&r>=Fp.MAX_INT?i?-1\/0:1\/0:i?-r:r},valueOf:function(){return this.toNumber(!1)},toString:function(n){return this.valueOf().toString(n||10)},toOctetString:function(n){for(var e=new Array(8),t=this.buffer,i=this.offset,r=0;r<8;r++)e[r]=qX[t[i+r]];return e.join(n||"")},toBuffer:function(n){if(n&&this.offset===0)return this.buffer;var e=new Buffer(8);return this.buffer.copy(e,0,this.offset,this.offset+8),e},copy:function(n,e){this.buffer.copy(n,e||0,this.offset,this.offset+8)},compare:function(n){if((this.buffer[this.offset]&128)!=(n.buffer[n.offset]&128))return n.buffer[n.offset]-this.buffer[this.offset];for(var e=0;e<8;e++)if(this.buffer[this.offset+e]!==n.buffer[n.offset+e])return this.buffer[this.offset+e]-n.buffer[n.offset+e];return 0},equals:function(n){return this.compare(n)===0},inspect:function(){return"[Int64 value:"+this+" octets:"+this.toOctetString(" ")+"]"}}});var tG=v(jp=>{var JX=require("events").EventEmitter,Cfe=require("util"),Sfe=require("os"),HNe=require("assert"),Mp=UX(),Xa=Sfe.endianness()=="BE";function $X(n){return Math.pow(2,Math.ceil(Math.log(n)\/Math.LN2))}function tn(n){this.buf=Buffer.alloc($X(n||8192)),this.readOffset=0,this.writeOffset=0}jp.Accumulator=tn;tn.prototype.writeAvail=function(){return this.buf.length-this.writeOffset};tn.prototype.readAvail=function(){return this.writeOffset-this.readOffset};tn.prototype.reserve=function(n){if(!(n<this.writeAvail())&&(this.readOffset>0&&(this.buf.copy(this.buf,0,this.readOffset,this.writeOffset),this.writeOffset-=this.readOffset,this.readOffset=0),!(n<this.writeAvail()))){var e=Buffer.alloc($X(this.buf.length+n-this.writeAvail()));this.buf.copy(e),this.buf=e}};tn.prototype.append=function(n){if(Buffer.isBuffer(n))this.reserve(n.length),n.copy(this.buf,this.writeOffset,0,n.length),this.writeOffset+=n.length;else{var e=Buffer.byteLength(n);this.reserve(e),this.buf.write(n,this.writeOffset),this.writeOffset+=e}};tn.prototype.assertReadableSize=function(n){if(this.readAvail()<n)throw new Error("wanted to read "+n+" bytes but only have "+this.readAvail())};tn.prototype.peekString=function(n){return this.assertReadableSize(n),this.buf.toString("utf-8",this.readOffset,this.readOffset+n)};tn.prototype.readString=function(n){var e=this.peekString(n);return this.readOffset+=n,e};tn.prototype.peekInt=function(n){switch(this.assertReadableSize(n),n){case 1:return this.buf.readInt8(this.readOffset,n);case 2:return Xa?this.buf.readInt16BE(this.readOffset,n):this.buf.readInt16LE(this.readOffset,n);case 4:return Xa?this.buf.readInt32BE(this.readOffset,n):this.buf.readInt32LE(this.readOffset,n);case 8:var e=this.buf.slice(this.readOffset,this.readOffset+8);return Xa?new Mp(e):new Mp(VX(e));default:throw new Error("invalid integer size "+n)}};tn.prototype.readInt=function(n){var e=this.peekInt(n);return e instanceof Mp&&isFinite(e.valueOf())&&(e=e.valueOf()),this.readOffset+=n,e};tn.prototype.peekDouble=function(){return this.assertReadableSize(8),Xa?this.buf.readDoubleBE(this.readOffset):this.buf.readDoubleLE(this.readOffset)};tn.prototype.readDouble=function(){var n=this.peekDouble();return this.readOffset+=8,n};tn.prototype.readAdvance=function(n){if(n>0)this.assertReadableSize(n);else if(n<0&&this.readOffset+n<0)throw new Error("advance with negative offset "+n+" would seek off the start of the buffer");this.readOffset+=n};tn.prototype.writeByte=function(n){this.reserve(1),this.buf.writeInt8(n,this.writeOffset),++this.writeOffset};tn.prototype.writeInt=function(n,e){switch(this.reserve(e),e){case 1:this.buf.writeInt8(n,this.writeOffset);break;case 2:Xa?this.buf.writeInt16BE(n,this.writeOffset):this.buf.writeInt16LE(n,this.writeOffset);break;case 4:Xa?this.buf.writeInt32BE(n,this.writeOffset):this.buf.writeInt32LE(n,this.writeOffset);break;default:throw new Error("unsupported integer size "+e)}this.writeOffset+=e};tn.prototype.writeDouble=function(n){this.reserve(8),Xa?this.buf.writeDoubleBE(n,this.writeOffset):this.buf.writeDoubleLE(n,this.writeOffset),this.writeOffset+=8};var PE=0,_E=1,RE=2,EE=3,LE=4,bC=5,mC=6,XX=7,GX=8,zX=9,KX=10,QX=11,Dfe=12,kE=0,ZX=1,Tfe=127,kfe=32767,Pfe=2147483647;function sr(){JX.call(this),this.buf=new tn,this.state=kE}Cfe.inherits(sr,JX);jp.BunserBuf=sr;sr.prototype.append=function(n,e){if(e)return this.buf.append(n),this.process(e);try{this.buf.append(n)}catch(t){this.emit("error",t);return}this.processLater()};sr.prototype.processLater=function(){var n=this;process.nextTick(function(){try{n.process(!1)}catch(e){n.emit("error",e)}})};sr.prototype.process=function(n){if(this.state==kE){if(this.buf.readAvail()<2)return;if(this.expectCode(0),this.expectCode(1),this.pduLen=this.decodeInt(!0),this.pduLen===!1){this.buf.readAdvance(-2);return}this.buf.reserve(this.pduLen),this.state=ZX}if(this.state==ZX){if(this.buf.readAvail()<this.pduLen)return;var e=this.decodeAny();if(n)return e;this.emit("value",e),this.state=kE}!n&&this.buf.readAvail()>0&&this.processLater()};sr.prototype.raise=function(n){throw new Error(n+", in Buffer of length "+this.buf.buf.length+" ("+this.buf.readAvail()+" readable) at offset "+this.buf.readOffset+" buffer: "+JSON.stringify(this.buf.buf.slice(this.buf.readOffset,this.buf.readOffset+32).toJSON()))};sr.prototype.expectCode=function(n){var e=this.buf.readInt(1);e!=n&&this.raise("expected bser opcode "+n+" but got "+e)};sr.prototype.decodeAny=function(){var n=this.buf.peekInt(1);switch(n){case EE:case LE:case bC:case mC:return this.decodeInt();case XX:return this.buf.readAdvance(1),this.buf.readDouble();case GX:return this.buf.readAdvance(1),!0;case zX:return this.buf.readAdvance(1),!1;case KX:return this.buf.readAdvance(1),null;case RE:return this.decodeString();case PE:return this.decodeArray();case _E:return this.decodeObject();case QX:return this.decodeTemplate();default:this.raise("unhandled bser opcode "+n)}};sr.prototype.decodeArray=function(){this.expectCode(PE);for(var n=this.decodeInt(),e=[],t=0;t<n;++t)e.push(this.decodeAny());return e};sr.prototype.decodeObject=function(){this.expectCode(_E);for(var n=this.decodeInt(),e={},t=0;t<n;++t){var i=this.decodeString(),r=this.decodeAny();e[i]=r}return e};sr.prototype.decodeTemplate=function(){this.expectCode(QX);for(var n=this.decodeArray(),e=this.decodeInt(),t=[],i=0;i<e;++i){for(var r={},o=0;o<n.length;++o){if(this.buf.peekInt(1)==Dfe){this.buf.readAdvance(1);continue}var s=this.decodeAny();r[n[o]]=s}t.push(r)}return t};sr.prototype.decodeString=function(){this.expectCode(RE);var n=this.decodeInt();return this.buf.readString(n)};sr.prototype.decodeInt=function(n){if(n&&this.buf.readAvail()<1)return!1;this.buf.assertReadableSize(1);var e=this.buf.peekInt(1),t=0;switch(e){case EE:t=1;break;case LE:t=2;break;case bC:t=4;break;case mC:t=8;break;default:this.raise("invalid bser int encoding "+e)}return n&&this.buf.readAvail()<1+t?!1:(this.buf.readAdvance(1),this.buf.readInt(t))};function _fe(n){var e=new sr,t=e.append(n,!0);if(e.buf.readAvail())throw Error("excess data found after input buffer, use BunserBuf instead");if(typeof t>"u")throw Error("no bser found in string and no error raised!?");return t}jp.loadFromBuffer=_fe;function VX(n){for(var e=Buffer.alloc(n.length),t=0;t<n.length;t++)e[t]=n[n.length-1-t];return e}function eG(n,e){var t=e.toBuffer();if(Xa){n.writeByte(mC),n.append(t);return}var i=VX(t);n.writeByte(mC),n.append(i)}function pC(n,e){var t=Math.abs(e);t<=Tfe?(n.writeByte(EE),n.writeInt(e,1)):t<=kfe?(n.writeByte(LE),n.writeInt(e,2)):t<=Pfe?(n.writeByte(bC),n.writeInt(e,4)):eG(n,new Mp(e))}function fC(n,e){switch(typeof e){case"number":isFinite(e)&&Math.floor(e)===e?pC(n,e):(n.writeByte(XX),n.writeDouble(e));return;case"string":n.writeByte(RE),pC(n,Buffer.byteLength(e)),n.append(e);return;case"boolean":n.writeByte(e?GX:zX);return;case"object":if(e===null){n.writeByte(KX);return}if(e instanceof Mp){eG(n,e);return}if(Array.isArray(e)){n.writeByte(PE),pC(n,e.length);for(var t=0;t<e.length;++t)fC(n,e[t]);return}n.writeByte(_E);for(var i=Object.keys(e),r=i.length,t=0;t<i.length;++t){var o=i[t],s=e[o];typeof s>"u"&&r--}pC(n,r);for(var t=0;t<i.length;++t){var o=i[t],s=e[o];if(!(typeof s>"u")){fC(n,o);try{fC(n,s)}catch(c){throw new Error(c.message+" (while serializing object property with name `"+o+"')")}}}return;default:throw new Error("cannot serialize type "+typeof e+" to BSER")}}function Rfe(n){var e=new tn;e.writeByte(0),e.writeByte(1),e.writeByte(bC),e.writeInt(0,4),fC(e,n);var t=e.writeOffset,i=t-7;return e.writeOffset=3,e.writeInt(i,4),e.writeOffset=t,e.buf.slice(0,t)}jp.dumpToBuffer=Rfe});var lG=v((WNe,aG)=>{"use strict";var Efe=require("net"),oG=require("events").EventEmitter,Lfe=require("util"),Ife=require("child_process"),sG=tG(),iG=["subscription","log"];function Hs(n){var e=this;oG.call(this),this.watchmanBinaryPath="watchman",n&&n.watchmanBinaryPath&&(this.watchmanBinaryPath=n.watchmanBinaryPath.trim()),this.commands=[]}Lfe.inherits(Hs,oG);aG.exports.Client=Hs;Hs.prototype.sendNextCommand=function(){this.currentCommand||(this.currentCommand=this.commands.shift(),this.currentCommand&&this.socket.write(sG.dumpToBuffer(this.currentCommand.cmd)))};Hs.prototype.cancelCommands=function(n){var e=new Error(n),t=this.commands;this.commands=[],this.currentCommand&&(t.unshift(this.currentCommand),this.currentCommand=null),t.forEach(function(i){i.cb(e)})};Hs.prototype.connect=function(){var n=this;function e(l){n.bunser=new sG.BunserBuf,n.bunser.on("value",function(u){for(var c=!1,h=0;h<iG.length;h++){var d=iG[h];d in u&&(c=d)}if(c)n.emit(c,u);else if(n.currentCommand){var g=n.currentCommand;if(n.currentCommand=null,"error"in u){var f=new Error(u.error);f.watchmanResponse=u,g.cb(f)}else g.cb(null,u)}n.sendNextCommand()}),n.bunser.on("error",function(u){n.emit("error",u)}),n.socket=Efe.createConnection(l),n.socket.on("connect",function(){n.connecting=!1,n.emit("connect"),n.sendNextCommand()}),n.socket.on("error",function(u){n.connecting=!1,n.emit("error",u)}),n.socket.on("data",function(u){n.bunser&&n.bunser.append(u)}),n.socket.on("end",function(){n.socket=null,n.bunser=null,n.cancelCommands("The watchman connection was closed"),n.emit("end")})}if(process.env.WATCHMAN_SOCK){e(process.env.WATCHMAN_SOCK);return}var t=["--no-pretty","get-sockname"],i=null,r=!1;function o(l){r||(r=!0,l.code==="EACCES"||l.errno==="EACCES"?l.message="The Watchman CLI is installed but cannot be spawned because of a permission problem":(l.code==="ENOENT"||l.errno==="ENOENT")&&(l.message="Watchman was not found in PATH.  See https:\/\/facebook.github.io\/watchman\/docs\/install.html for installation instructions"),console.error("Watchman: ",l.message),n.emit("error",l))}try{i=Ife.spawn(this.watchmanBinaryPath,t,{stdio:["ignore","pipe","pipe"],windowsHide:!0})}catch(l){o(l);return}var s=[],a=[];i.stdout.on("data",function(l){s.push(l)}),i.stderr.on("data",function(l){l=l.toString("utf8"),a.push(l),console.error(l)}),i.on("error",function(l){o(l)}),i.on("close",function(l,u){if(l!==0){o(new Error(n.watchmanBinaryPath+" "+t.join(" ")+" returned with exit code="+l+", signal="+u+", stderr= "+a.join("")));return}try{var c=JSON.parse(s.join(""));if("error"in c){var h=new Error(c.error);h.watchmanResponse=c,n.emit("error",h);return}e(c.sockname)}catch(d){n.emit("error",d)}})};Hs.prototype.command=function(n,e){if(e=e||function(){},this.commands.push({cmd:n,cb:e}),!this.socket){if(!this.connecting){this.connecting=!0,this.connect();return}return}this.sendNextCommand()};var nG={"cmd-watch-del-all":"3.1.1","cmd-watch-project":"3.1",relative_root:"3.3","term-dirname":"3.1","term-idirname":"3.1",wildmatch:"3.7"};function Ffe(n,e){n=n.split("."),e=e.split(".");for(var t=0;t<3;t++){var i=parseInt(n[t]||"0")-parseInt(e[t]||"0");if(i!=0)return i}return 0}function rG(n,e){return e in nG?Ffe(n,nG[e])>=0:!1}Hs.prototype._synthesizeCapabilityCheck=function(n,e,t){n.capabilities={};var i=n.version;return e.forEach(function(r){n.capabilities[r]=rG(i,r)}),t.forEach(function(r){var o=rG(i,r);n.capabilities[r]=o,o||(n.error="client required capability `"+r+"` is not supported by this server")}),n};Hs.prototype.capabilityCheck=function(n,e){var t=n.optional||[],i=n.required||[],r=this;this.command(["version",{optional:t,required:i}],function(o,s){if(o){e(o);return}if(!("capabilities"in s)&&(s=r._synthesizeCapabilityCheck(s,t,i),s.error)){o=new Error(s.error),o.watchmanResponse=s,e(o);return}e(null,s)})};Hs.prototype.end=function(){this.cancelCommands("The client was ended"),this.socket&&(this.socket.end(),this.socket=null),this.bunser=null}});function jfe(n){return!(n=="\/"||n=="\/tmp"||n=="\/private\/tmp"||n==Bt.tmpdir()||St(n,Bt.homedir(),!0)||E.parse(n).base==n)}var IE,Mfe,bu,FE=k(()=>{"use strict";gt();Ee();pt();fe();IE=te("core-watchman"),Mfe=["relative_root","cmd-watch-project","wildmatch","field-new"],bu=class n{constructor(e,t){this.channel=t;this._disposed=!1;let i=lG();this.client=new i.Client({watchmanBinaryPath:e}),this.client.setMaxListeners(300)}checkCapability(){let{client:e}=this;return new Promise((t,i)=>{e.capabilityCheck({optional:[],required:Mfe},(r,o)=>{if(r)return t(!1);let{capabilities:s}=o;for(let a of Object.keys(s))if(!s[a])return t(!1);t(!0)})})}async watchProject(e){let t=await this.command(["watch-project",e]),{watch:i,warning:r,relative_path:o}=t;return i?(r&&IE.warn(r),this.watch=i,this.relative_path=o,IE.info(`watchman watching project: ${e}`),this.appendOutput(`watchman watching project: ${e}`),!0):!1}command(e){return new Promise((t,i)=>{this.client.command(e,(r,o)=>{if(r)return i(r);t(o)})})}async subscribe(e,t){let{watch:i,relative_path:r}=this;if(!i)throw new Error("watchman not watching");let{clock:o}=await this.command(["clock",i]),s=mu(),a={expression:["allof",["match","**\/*","wholename"]],fields:["name","size","new","exists","type","mtime_ms","ctime_ms"],since:o},l=i;if(r&&(a.relative_root=r,l=E.join(i,r)),!this.client)return;let{subscribe:u}=await this.command(["subscribe",i,s,a]);return this.appendOutput(`subscribing "${e}" in ${l}`),this.client.on("subscription",c=>{if(!c||c.subscription!=s)return;let{files:h}=c;if(!h||(h=h.filter(g=>g.type=="f"&&wi(g.name,e,{dot:!0})),!h.length))return;let d=Object.assign({},c);this.relative_path&&(d.root=E.resolve(c.root,this.relative_path)),this.appendOutput(`file change detected: ${JSON.stringify(d,null,2)}`),t(d)}),{dispose:()=>{this.unsubscribe(u)},subscribe:u}}unsubscribe(e){if(this._disposed)return Promise.resolve();let{watch:t}=this;if(t)return this.appendOutput(`unsubscribe "${e}" in: ${t}`),this.command(["unsubscribe",t,e]).catch(i=>{i.message?.includes("The client was ended")&&IE.error(i)})}dispose(){this._disposed||(this._disposed=!0,this.client&&(this.client.end(),this.client=void 0))}appendOutput(e,t="Info"){this.channel&&this.channel.appendLine(`[${t}  - ${new Date().toLocaleTimeString()}] ${e}`)}static async createClient(e,t,i){if(!jfe(t))throw new Error(`Watch for ${t} is ignored`);let r;try{if(r=new n(e,i),!await r.checkCapability())throw new Error("required capabilities do not exist.");if(!await r.watchProject(t))throw new Error("unable to watch");return r}catch(o){throw r&&r.dispose(),o}}}});var Ofe,Op,ME,uG=k(()=>{"use strict";$e();Ee();se();Le();pt();fe();ie();FE();Ofe=te("fileSystemWatcher"),Op=class n{constructor(e,t){this.workspaceFolder=e;this.watchmanPath=t;this.clientsMap=new Map;this.disposables=[];this.creating=new Set;this._onDidCreateClient=new p.Emitter;this.disabled=!1;this.onDidCreateClient=this._onDidCreateClient.event}static{this.watchers=new Set}attach(e){this.channel=e;let t=i=>{let r=Y.parse(i.uri).fsPath;this.createClient(r)};this.workspaceFolder.workspaceFolders.forEach(i=>{t(i)}),this.workspaceFolder.onDidChangeWorkspaceFolders(i=>{i.added.forEach(r=>{t(r)}),i.removed.forEach(r=>{let o=Y.parse(r.uri).fsPath,s=this.clientsMap.get(o);s&&(this.clientsMap.delete(o),s.dispose())})},null,this.disposables)}waitClient(e){return this.clientsMap.has(e)?Promise.resolve():new Promise(t=>{let i=this.onDidCreateClient(r=>{r==e&&(i.dispose(),t())})})}async createClient(e){if(!(this.watchmanPath==null||this.has(e)||this.disabled))try{let t=await this.getWatchmanPath();this.creating.add(e);let i=await bu.createClient(t,e,this.channel);this.creating.delete(e),this.clientsMap.set(e,i);for(let r of n.watchers)r.listen(e,i);this._onDidCreateClient.fire(e)}catch(t){this.creating.delete(e),this.channel&&this.channel.appendLine(`Error on create watchman client: ${t}`)}}async getWatchmanPath(){let e=this.watchmanPath;return process.env.WATCHMAN_SOCK||(e=await Wo(this.watchmanPath,{all:!1})),e}has(e){let t=Array.from(this.clientsMap.keys());return t.push(...this.creating),t.some(i=>Di(i,e))}createFileSystemWatcher(e,t,i,r){let o=new ME(e,t,i,r),s=typeof e=="string"?void 0:e.baseUri.fsPath;for(let[a,l]of this.clientsMap.entries())s&&St(a,s,!0)&&(s=void 0),o.listen(a,l);return s&&this.createClient(s),n.watchers.add(o),o}dispose(){this._onDidCreateClient.dispose();for(let e of this.clientsMap.values())e&&e.dispose();this.clientsMap.clear(),n.watchers.clear(),z(this.disposables)}},ME=class{constructor(e,t,i,r){this.globPattern=e;this.ignoreCreateEvents=t;this.ignoreChangeEvents=i;this.ignoreDeleteEvents=r;this._onDidCreate=new p.Emitter;this._onDidChange=new p.Emitter;this._onDidDelete=new p.Emitter;this._onDidRename=new p.Emitter;this.disposables=[];this._disposed=!1;this.onDidCreate=this._onDidCreate.event;this.onDidChange=this._onDidChange.event;this.onDidDelete=this._onDidDelete.event;this.onDidRename=this._onDidRename.event;this._onDidListen=new p.Emitter;this.onDidListen=this._onDidListen.event}listen(e,t){let{globPattern:i,ignoreCreateEvents:r,ignoreChangeEvents:o,ignoreDeleteEvents:s}=this,a,l;if(typeof i=="string")a=i;else if(a=i.pattern,l=i.baseUri.fsPath,!St(e,l,!0))return;let u=c=>{let{root:h,files:d}=c;l&&!Di(h,l)?d=d.filter(g=>{if(g.type!="f")return!1;let f=E.join(h,g.name);return St(l,f)?wi(E.relative(l,f),a,{dot:!0}):!1}):d=d.filter(g=>g.type=="f"&&wi(g.name,a,{dot:!0}));for(let g of d){let f=Y.file(E.join(h,g.name));g.exists?g.new===!0?r||this._onDidCreate.fire(f):o||this._onDidChange.fire(f):s||this._onDidDelete.fire(f)}if(d.length==2&&d[0].exists!==d[1].exists){let g=d.find(m=>m.exists!==!0),f=d.find(m=>m.exists===!0);g.size==f.size&&this._onDidRename.fire({oldUri:Y.file(E.join(h,g.name)),newUri:Y.file(E.join(h,f.name))})}if(d.length>2&&d.length%2==0){let[g,f]=Gw(d,m=>m.exists===!1);if(g.length==f.length)for(let m of g){let b=f.find(w=>w.size==m.size&&w.mtime_ms==m.mtime_ms);b&&this._onDidRename.fire({oldUri:Y.file(E.join(h,m.name)),newUri:Y.file(E.join(h,b.name))})}}};t.subscribe(a,u).then(c=>{if(c){if(this._onDidListen.fire(),this.subscribe=c.subscribe,this._disposed)return c.dispose();this.disposables.push(c)}},c=>{c instanceof Error&&c.message.includes("client was ended")||Ofe.error(`Error on subscribe ${a}`,c)})}dispose(){this._disposed=!0,Op.watchers.delete(this),this._onDidRename.dispose(),this._onDidCreate.dispose(),this._onDidChange.dispose(),z(this.disposables)}}});function cG(n){return n=="n"||n=="o"||n=="x"||n=="v"?"<C-U>":n=="i"?"<C-o>":n=="s"?"<Esc>":""}function Nfe(n){return typeof n=="number"?n:F.bufnr}var Afe,Ap,hG=k(()=>{"use strict";je();Ee();ie();Ce();Afe=te("core-keymaps");Ap=class{constructor(){this.keymaps=new Map}attach(e){this.nvim=e}async doKeymap(e,t){let i=this.keymaps.get(e)??this.keymaps.get("coc-"+e);if(!i)return Afe.error(`keymap for ${e} not found`),t;let[r,o]=i,s=await Promise.resolve(r());return o&&await this.nvim.command(`silent! call repeat#set("\\\\<Plug>(coc-${e})", -1)`),s??t}registerKeymap(e,t,i,r={}){if(!t)throw new Error(`Invalid key ${t} of registerKeymap`);let o=`coc-${t}`;if(this.keymaps.has(o))throw new Error(`${t} already exists.`);let s=`<Plug>(${o})`;r=Object.assign({sync:!0,cancel:!0,silent:!0,repeat:!1},r);let{nvim:a}=this;this.keymaps.set(o,[i,!!r.repeat]);let l=r.sync?"request":"notify",u=r.cancel?1:0;for(let c of e)c=="i"?a.setKeymap(c,s,`coc#_insert_key('${l}', '${o}', ${u})`,{expr:!0,noremap:!0,silent:r.silent}):a.setKeymap(c,s,`:${cG(c)}call coc#rpc#${l}('doKeymap', ['${o}'])<cr>`,{noremap:!0,silent:r.silent});return p.Disposable.create(()=>{this.keymaps.delete(o);for(let c of e)a.deleteKeymap(c,s)})}registerExprKeymap(e,t,i,r=!1,o=!0){let s=Nfe(r),a=`${e}-${b_(t)}${r?`-${s}`:""}`,{nvim:l}=this,u;e=="i"?u=`coc#_insert_key('request', '${a}', ${o?"1":"0"})`:u=`coc#rpc#request('doKeymap', ['${a}'])`;let c={noremap:!0,silent:!0,expr:!0,nowait:!0};return r?l.createBuffer(s).setKeymap(e,t,u,c):l.setKeymap(e,t,u,c),this.keymaps.set(a,[i,!1]),p.Disposable.create(()=>{this.keymaps.delete(a),r?l.createBuffer(s).deleteKeymap(e,t):l.deleteKeymap(e,t)})}registerLocalKeymap(e,t,i,r,o){let{nvim:s}=this,a=s.createBuffer(e),l=`local-${e}-${t}-${b_(i)}`;this.keymaps.set(l,[r,!1]);let u=o?"notify":"request",c=cG(t);return a.setKeymap(t,i,`:${c}call coc#rpc#${u}('doKeymap', ['${l}'])<CR>`,{silent:!0,nowait:!0,noremap:!0}),p.Disposable.create(()=>{this.keymaps.delete(l),a.deleteKeymap(t,i)})}}});var dG,Np,gG=k(()=>{"use strict";je();Ee();se();ie();Ce();dG=te("watchers"),Np=class{constructor(){this.optionCallbacks=new Map;this.globalCallbacks=new Map;this.disposables=[];this._onDidRuntimePathChange=new p.Emitter;this.onDidRuntimePathChange=this._onDidRuntimePathChange.event;F.on("OptionSet",async(e,t,i)=>{let r=Array.from(this.optionCallbacks.get(e)??[]);await Promise.allSettled(r.map(o=>(async()=>{try{await Promise.resolve(o(t,i))}catch(s){this.nvim.errWriteLine(`Error on OptionSet '${e}': ${Jr(s)}`),dG.error("Error on OptionSet callback:",s)}})()))},null,this.disposables),F.on("GlobalChange",async(e,t,i)=>{let r=Array.from(this.globalCallbacks.get(e)??[]);await Promise.allSettled(r.map(o=>(async()=>{try{await Promise.resolve(o(t,i))}catch(s){this.nvim.errWriteLine(`Error on GlobalChange '${e}': ${Jr(s)}`),dG.error("Error on GlobalChange callback:",s)}})()))},null,this.disposables)}get options(){return Array.from(this.optionCallbacks.keys())}attach(e,t){this.nvim=e,this.env=t,this.watchOption("runtimepath",(i,r)=>{let o=i.split(","),a=r.split(",").filter(l=>!o.includes(l));a.length>0&&this._onDidRuntimePathChange.fire(a),this.env.runtimepath=r},this.disposables)}watchOption(e,t,i){let r=this.optionCallbacks.get(e);r||(r=new Set,this.optionCallbacks.set(e,r)),r.add(t);let o=`autocmd! coc_dynamic_option OptionSet ${e} call coc#rpc#notify('OptionSet',[expand('<amatch>'), v:option_old, v:option_new])`;this.nvim.command(o,!0);let s=p.Disposable.create(()=>{let a=this.optionCallbacks.get(e);a.delete(t),a.size===0&&this.nvim.command(`autocmd! coc_dynamic_option OptionSet ${e}`,!0)});return i&&i.push(s),s}watchGlobal(e,t,i){let{nvim:r}=this,o=this.globalCallbacks.get(e);o||(o=new Set,this.globalCallbacks.set(e,o)),o.add(t),r.call("coc#_watch",e,!0);let s=p.Disposable.create(()=>{let a=this.globalCallbacks.get(e);a.delete(t),a.size===0&&r.call("coc#_unwatch",e,!0)});return i&&i.push(s),s}dispose(){z(this.disposables),this._onDidRuntimePathChange.dispose()}}});function Hp(n){if(!(!n||!E.isAbsolute(n)))return{name:E.basename(n),uri:Y.file(n).toString()}}var yC,Hfe,Bfe,Wfe,qfe,Bp,vC=k(()=>{"use strict";$e();je();Ee();se();Le();qi();Is();pt();fe();Ye();ie();Xo();yC=(i=>(i[i.Buffer=0]="Buffer",i[i.LanguageServer=1]="LanguageServer",i[i.Global=2]="Global",i))(yC||{}),Hfe=te("core-workspaceFolder"),Bfe=[0,1,2],Wfe=ve(5e3,50);qfe=Pi.as(Ls.ExtensionContribution),Bp=class{constructor(e){this.configurations=e;this._onDidChangeWorkspaceFolders=new p.Emitter;this.onDidChangeWorkspaceFolders=this._onDidChangeWorkspaceFolders.event;this.rootPatterns=new Map;this._workspaceFolders=[];this._tokenSources=new Set;F.on("VimLeavePre",this.cancelAll,this),this.updateConfiguration(!0),this.configurations.onDidChange(t=>{(t.affectsConfiguration("workspace")||t.affectsConfiguration("coc.preferences"))&&this.updateConfiguration(!1)})}updateConfiguration(e){let t=this.configurations.initialConfiguration,i=t.get("workspace"),r=t.get("coc.preferences.rootPatterns");if(this.config={rootPatterns:le(r)?pe(i.rootPatterns):r,ignoredFiletypes:pe(i.ignoredFiletypes),bottomUpFiletypes:pe(i.bottomUpFiletypes),ignoredFolders:pe(i.ignoredFolders),workspaceFolderCheckCwd:!!i.workspaceFolderCheckCwd,workspaceFolderFallbackCwd:!!i.workspaceFolderFallbackCwd},e){let o=t.get("languageserver",{});this.addServerRootPatterns(o)}}addServerRootPatterns(e){for(let t of Object.keys(Ke(e))){let i=e[t],{filetypes:r,rootPatterns:o}=i;Array.isArray(r)&&!le(o)&&r.filter(s=>typeof s=="string").forEach(s=>{this.addRootPattern(s,o)})}}cancelAll(){for(let e of this._tokenSources)e.cancel()}setWorkspaceFolders(e){if(!e||!Array.isArray(e))return;let t=e.map(i=>Hp(i));this._workspaceFolders=t.filter(i=>i!=null)}getWorkspaceFolder(e){if(e.scheme!=="file")return;let t=Array.from(this._workspaceFolders).map(o=>Y.parse(o.uri).fsPath);t.sort((o,s)=>s.length-o.length);let i=e.fsPath,r=t.find(o=>St(o,i,!0));return Hp(r)}getRelativePath(e,t){let i,r="";if(typeof e=="string"?(i=Y.file(e),r=e):typeof e<"u"&&(i=e,r=e.fsPath),!i)return r;let o=this.getWorkspaceFolder(i);if(!o)return r;typeof t>"u"&&this._workspaceFolders&&(t=this._workspaceFolders.length>1);let s=E.relative(Y.parse(o.uri).fsPath,i.fsPath);return s=s==""?i.fsPath:s,t&&o.name&&(s=`${o.name}\/${s}`),s}get workspaceFolders(){return this._workspaceFolders}addRootPattern(e,t){let i=this.rootPatterns.get(e)??[];for(let r of t)i.includes(r)||i.push(r);this.rootPatterns.set(e,i)}resolveRoot(e,t,i,r){if(e.buftype!==""||e.schema!=="file")return null;let o=Y.parse(e.uri),s=La(o.fsPath)?E.normalize(o.fsPath):E.dirname(o.fsPath),{ignoredFiletypes:a,ignoredFolders:l,workspaceFolderCheckCwd:u,workspaceFolderFallbackCwd:c,bottomUpFiletypes:h}=this.config;if(a?.includes(e.filetype))return null;l=Array.isArray(l)?l.filter(g=>g&&g.length>0).map(g=>r(g)):[];let d=null;for(let g of Bfe){let f=this.getRootPatterns(e,g);if(f&&f.length){let m=h.includes("*")||h.includes(e.filetype),b=Xg(s,f,t,m,u,l);if(b){d=b;break}}}return!d&&c&&!$g(t,l)&&St(t,s,!0)&&(d=t),d&&this.addWorkspaceFolder(d,i),d}addWorkspaceFolder(e,t){let i=Hp(e);if(i)return this._workspaceFolders.findIndex(r=>r.uri==i.uri)==-1&&(this._workspaceFolders.push(i),t&&this._onDidChangeWorkspaceFolders.fire({added:[i],removed:[]})),i}renameWorkspaceFolder(e,t){let i=Hp(t);if(!i)return;let r=this._workspaceFolders.findIndex(s=>Y.parse(s.uri).fsPath==e);if(r==-1)return;let o=this.workspaceFolders[r];this._workspaceFolders.splice(r,1,i),this._onDidChangeWorkspaceFolders.fire({removed:[o],added:[i]})}removeWorkspaceFolder(e){let t=Hp(e);if(!t)return;let i=this._workspaceFolders.findIndex(r=>r.uri==t.uri);i!=-1&&(this._workspaceFolders.splice(i,1),this._onDidChangeWorkspaceFolders.fire({removed:[t],added:[]}))}getRootPatterns(e,t){return t==0?e.getVar("root_patterns",[])||[]:t==1?this.getServerRootPatterns(e.languageId):this.config.rootPatterns}reset(){this.rootPatterns.clear(),this._workspaceFolders=[]}getServerRootPatterns(e){let t=qfe.getRootPatternsByFiletype(e);return t=t.concat(pe(this.rootPatterns.get(e))),Oi(t)}checkFolder(e,t,i){return rJ(e,t,i)}async checkPatterns(e,t){if(le(e))return!1;let i=e.map(u=>Y.parse(u.uri).fsPath),r=!1,o=new p.CancellationTokenSource;this._tokenSources.add(o);let s=o.token,a=setTimeout(()=>{o.cancel()},Wfe),l=await Promise.allSettled(i.map(u=>this.checkFolder(u,t,s).then(c=>{this._tokenSources.delete(o),c&&(r=!0,clearTimeout(a),o.cancel())})));return clearTimeout(a),l.forEach(u=>{u.status==="rejected"&&!Lc(u.reason)&&Hfe.error("checkPatterns error:",t,u.reason)}),r}}});var Wp,pG=k(()=>{"use strict";je();se();Wp=class{constructor(e,t){this._create=e;this.disposables=[];this.itemsMap=new Map;let{disposables:i}=this;for(let r of t.attached())this.create(r);t.onDidOpenTextDocument(r=>{this.create(t.getDocument(r.bufnr))},null,i),t.onDidChangeDocument(r=>{this.onChange(r)},null,i),t.onDidCloseDocument(r=>{this.delete(r.bufnr)},null,i),F.on("LinesChanged",this.onTextChange,this,i)}onTextChange(e){let t=this.itemsMap.get(e);t&&typeof t.item.onTextChange=="function"&&t.item.onTextChange()}get items(){return Array.from(this.itemsMap.values()).map(e=>e.item)}getItem(e){if(typeof e=="number")return this.itemsMap.get(e)?.item;let t=Array.from(this.itemsMap.values()).find(i=>i.uri==e);return t?t.item:void 0}create(e){let t=this.itemsMap.get(e.bufnr);t&&t.item.dispose();let i=this._create(e);i&&this.itemsMap.set(e.bufnr,{uri:e.uri,item:i})}onChange(e){let t=this.itemsMap.get(e.bufnr);t&&typeof t.item.onChange=="function"&&t.item.onChange(e)}delete(e){let t=this.itemsMap.get(e);t&&(t.item.dispose(),this.itemsMap.delete(e))}reset(){for(let e of this.itemsMap.values())e.item.dispose();this.itemsMap.clear()}dispose(){z(this.disposables);for(let e of this.itemsMap.values())e.item.dispose();this._create=void 0,this.itemsMap.clear()}}});var qp,fG=k(()=>{"use strict";fe();Ye();qp=class{constructor(e){this.filepath=e}fetch(e){let t=this.load();if(!e)return t;let i=e.split(".");for(let r of i){if(typeof t[r]>"u")return;t=t[r]}return t}exists(e){let t=this.load(),i=e.split(".");for(let r of i){if(typeof t[r]>"u")return!1;t=t[r]}return!0}delete(e){let t=this.load(),i=t,r=e.split("."),o=r.length;for(let s=0;s<o&&!(typeof t[r[s]]>"u");s++){if(s==o-1){delete t[r[s]],B.writeFileSync(this.filepath,JSON.stringify(i,null,2),"utf8");break}t=t[r[s]]}}push(e,t){let i=Ke(this.load()),r=i,o=e.split("."),s=o.length;for(let a=0;a<s;a++){let l=o[a];if(a==s-1){r[l]=t;let u=E.dirname(this.filepath);B.mkdirSync(u,{recursive:!0}),B.writeFileSync(this.filepath,JSON.stringify(i,null,2));break}typeof r[l]>"u"&&(r[l]={}),r=r[l]}}load(){let e=E.dirname(this.filepath);if(!B.existsSync(e))return B.mkdirSync(e,{recursive:!0}),B.writeFileSync(this.filepath,"{}","utf8"),{};try{let i=B.readFileSync(this.filepath,"utf8");return JSON.parse(i.trim())}catch{return B.writeFileSync(this.filepath,"{}","utf8"),{}}}clear(){B.existsSync(this.filepath)&&B.writeFileSync(this.filepath,"{}","utf8")}destroy(){B.existsSync(this.filepath)&&B.unlinkSync(this.filepath)}}});var jE,Yp,OE=k(()=>{"use strict";gt();jE=["\\u280B","\\u2819","\\u2839","\\u2838","\\u283C","\\u2834","\\u2826","\\u2827","\\u2807","\\u280F"],Yp=class{constructor(){this.items=new Map;this.shownIds=new Set;this._text="";this.interval=setInterval(()=>{this.setStatusText()},100).unref()}dispose(){this.items.clear(),this.shownIds.clear(),clearInterval(this.interval)}reset(){this.items.clear(),this.shownIds.clear()}createStatusBarItem(e,t=!1){let i=mu(),r={text:"",priority:e,isProgress:t,show:()=>{this.shownIds.add(i),this.setStatusText()},hide:()=>{this.shownIds.delete(i),this.setStatusText()},dispose:()=>{this.shownIds.delete(i),this.items.delete(i),this.setStatusText()}};return this.items.set(i,r),r}getText(){if(this.shownIds.size==0)return"";let t=Math.floor(new Date().getMilliseconds()\/100),i="",r=[];for(let[o,s]of this.items)this.shownIds.has(o)&&r.push(s);r.sort((o,s)=>o.priority-s.priority);for(let o of r)o.isProgress?i=`${i} ${jE[t]} ${o.text}`:i=`${i} ${o.text}`;return i}setStatusText(){let e=this.getText(),{nvim:t}=this;e!=this._text&&t&&(this._text=e,t.pauseNotification(),this.nvim.setVar("coc_status",e,!0),this.nvim.call("coc#util#do_autocmd",["CocStatusChange"],!0),t.resumeNotification(!1,!0))}}});var Up,mG=k(()=>{"use strict";je();se();ie();Up=class{constructor(e,t){this.nvim=e;this.id=t;this.disposables=[];this._onExit=new p.Emitter;this._onStderr=new p.Emitter;this._onStdout=new p.Emitter;this.onExit=this._onExit.event;this.onStdout=this._onStdout.event;this.onStderr=this._onStderr.event;F.on("TaskExit",(i,r)=>{i==this.id&&this._onExit.fire(r)},null,this.disposables),F.on("TaskStderr",(i,r)=>{i==this.id&&this._onStderr.fire(r)},null,this.disposables),F.on("TaskStdout",(i,r)=>{i==this.id&&this._onStdout.fire(r)},null,this.disposables)}async start(e){let{nvim:t}=this;return await t.call("coc#task#start",[this.id,e])}async stop(){let{nvim:e}=this;await e.call("coc#task#stop",[this.id])}get running(){let{nvim:e}=this;return e.call("coc#task#running",[this.id])}dispose(){let{nvim:e}=this;e.call("coc#task#stop",[this.id],!0),this._onStdout.dispose(),this._onStderr.dispose(),this._onExit.dispose(),z(this.disposables)}}});var AE,Yfe,NE,y,be=k(()=>{"use strict";$e();Q5();V5();iX();U_();rX();IX();FX();jX();uG();jR();hG();uu();gG();vC();je();Ee();pG();fG();np();Qg();OE();X_();mG();oi();Is();fe();Ye();ru();AE=te("workspace"),Yfe=["showMessage","runTerminalCommand","openTerminal","showQuickpick","menuPick","openLocalConfig","showPrompt","createStatusBarItem","createOutputChannel","showOutputChannel","requestInput","echoLines","getCursorPosition","moveTo","getOffset","getSelectedRange","selectRange","createTerminal"],NE=class{constructor(){this.statusLine=new Yp;yJ().then(o=>{this.fuzzyExports=o}),dh.create().then(o=>{this.strWdith=o}),F.on("VimResized",(o,s)=>{Object.assign(Ke(this.env),{columns:o,lines:s})}),Object.defineProperty(this.statusLine,"nvim",{get:()=>this.nvim});let e=this.configurations=new Sp(BZ,new Dp(this));this.workspaceFolderControl=new Bp(this.configurations);let t=this.documentsManager=new _p(this.configurations,this.workspaceFolderControl);this.contentProvider=new kp(t),this.watchers=new Np,this.autocmds=new Tp,this.keymaps=new Ap,this.files=new Lp(t,this.configurations,this.workspaceFolderControl,this.keymaps),this.editors=new Rp(t),this.onDidRuntimePathChange=this.watchers.onDidRuntimePathChange,this.onDidChangeWorkspaceFolders=this.workspaceFolderControl.onDidChangeWorkspaceFolders,this.onDidChangeConfiguration=this.configurations.onDidChange,this.onDidOpenTextDocument=t.onDidOpenTextDocument,this.onDidChangeTextDocument=t.onDidChangeDocument,this.onDidCloseTextDocument=t.onDidCloseDocument,this.onDidSaveTextDocument=t.onDidSaveTextDocument,this.onWillSaveTextDocument=t.onWillSaveTextDocument,this.onDidCreateFiles=this.files.onDidCreateFiles,this.onDidRenameFiles=this.files.onDidRenameFiles,this.onDidDeleteFiles=this.files.onDidDeleteFiles,this.onWillCreateFiles=this.files.onWillCreateFiles,this.onWillRenameFiles=this.files.onWillRenameFiles,this.onWillDeleteFiles=this.files.onWillDeleteFiles;let r=e.initialConfiguration.get("coc.preferences").watchmanPath??WZ;this.fileSystemWatchers=new Op(this.workspaceFolderControl,r)}get initialConfiguration(){return this.configurations.initialConfiguration}async init(e){let{nvim:t}=this;for(let o of Yfe)Object.defineProperty(this,o,{get:()=>(...s)=>{let a=`$/;"	f
which	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^  function! s:which(command, ...) abort$/;"	f
which	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^  function! s:which(str) abort$/;"	f
win_execute	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:win_execute(winid, cmd, ...) abort$/;"	f
win_setview	plugged/coc.nvim/autoload/coc/float.vim	/^function! s:win_setview(winid, topline, lnum) abort$/;"	f
win_tabnr	plugged/coc.nvim/autoload/coc/api.vim	/^function! s:win_tabnr(winid) abort$/;"	f
winjobarg	plugged/vim-go/autoload/go/job.vim	/^function! s:winjobarg(idx, val) abort$/;"	f
winpath	plugged/unite.vim/autoload/vital/_unite/System/Filepath.vim	/^function! s:winpath(path) abort$/;"	f
winshell	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:winshell() abort$/;"	f
winshell	plugged/vim-gitgutter/autoload/gitgutter/utility.vim	/^function! s:winshell()$/;"	f
with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
with_index	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:with_index(list, ...) abort$/;"	f
within	plugged/vim-go/autoload/go/lsp.vim	/^function! s:within(range, line, character) abort$/;"	f
work	plugged/vim-go/autoload/go/promise_test.vim	/^func! s:work(val, timer)$/;"	f
workspaceFolder	plugged/vim-go/autoload/go/lsp/message.vim	/^function! s:workspaceFolder(key, val) abort$/;"	f
wrap	plugged/unite.vim/autoload/vital/_unite/Data/String.vim	/^function! s:wrap(str,...) abort$/;"	f
wrap_accent	plugged/vim-airline/autoload/airline/section.vim	/^function! s:wrap_accent(part, value)$/;"	f
wrap_cmds	autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
wrapper	plugged/vim-go/autoload/go/promise.vim	/^function! s:wrapper(fn, default, ...) dict$/;"	f
write_buffer	plugged/vim-gitgutter/autoload/gitgutter/diff.vim	/^function! s:write_buffer(bufnr, file)$/;"	f
write_cache	plugged/unite.vim/autoload/unite/sources/rec.vim	/^function! s:write_cache(context, directory, files) abort "{{{$/;"	f
write_out	plugged/vim-go/autoload/go/tags.vim	/^func s:write_out(out) abort$/;"	f
write_triggered_update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
writefile	plugged/unite.vim/autoload/vital/_unite/System/Cache/Deprecated.vim	/^function! s:writefile(cache_dir, filename, list) abort$/;"	f
ws_refresh	plugged/vim-airline/autoload/airline/extensions/whitespace.vim	/^function! s:ws_refresh()$/;"	f
zip	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:zip(...) abort$/;"	f
zip_fill	plugged/unite.vim/autoload/vital/_unite/Data/List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
